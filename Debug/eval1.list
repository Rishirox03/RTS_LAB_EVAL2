
eval1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074e4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002130  08007684  08007684  00008684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097b4  080097b4  0000b078  2**0
                  CONTENTS
  4 .ARM          00000008  080097b4  080097b4  0000a7b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097bc  080097bc  0000b078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097bc  080097bc  0000a7bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080097c0  080097c0  0000a7c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  080097c4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000f838  20000078  0800983c  0000b078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000f8b0  0800983c  0000b8b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000131ee  00000000  00000000  0000b0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f91  00000000  00000000  0001e296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b0  00000000  00000000  00021228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e95  00000000  00000000  000224d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000196b1  00000000  00000000  0002336d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000165f6  00000000  00000000  0003ca1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4c14  00000000  00000000  00053014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f7c28  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054e8  00000000  00000000  000f7c6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000fd154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800766c 	.word	0x0800766c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	0800766c 	.word	0x0800766c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b96a 	b.w	8000d48 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	460c      	mov	r4, r1
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d14e      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a98:	4694      	mov	ip, r2
 8000a9a:	458c      	cmp	ip, r1
 8000a9c:	4686      	mov	lr, r0
 8000a9e:	fab2 f282 	clz	r2, r2
 8000aa2:	d962      	bls.n	8000b6a <__udivmoddi4+0xde>
 8000aa4:	b14a      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa6:	f1c2 0320 	rsb	r3, r2, #32
 8000aaa:	4091      	lsls	r1, r2
 8000aac:	fa20 f303 	lsr.w	r3, r0, r3
 8000ab0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab4:	4319      	orrs	r1, r3
 8000ab6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000abe:	fa1f f68c 	uxth.w	r6, ip
 8000ac2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ac6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aca:	fb07 1114 	mls	r1, r7, r4, r1
 8000ace:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad2:	fb04 f106 	mul.w	r1, r4, r6
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ae2:	f080 8112 	bcs.w	8000d0a <__udivmoddi4+0x27e>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 810f 	bls.w	8000d0a <__udivmoddi4+0x27e>
 8000aec:	3c02      	subs	r4, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a59      	subs	r1, r3, r1
 8000af2:	fa1f f38e 	uxth.w	r3, lr
 8000af6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000afa:	fb07 1110 	mls	r1, r7, r0, r1
 8000afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b02:	fb00 f606 	mul.w	r6, r0, r6
 8000b06:	429e      	cmp	r6, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x94>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b12:	f080 80fc 	bcs.w	8000d0e <__udivmoddi4+0x282>
 8000b16:	429e      	cmp	r6, r3
 8000b18:	f240 80f9 	bls.w	8000d0e <__udivmoddi4+0x282>
 8000b1c:	4463      	add	r3, ip
 8000b1e:	3802      	subs	r0, #2
 8000b20:	1b9b      	subs	r3, r3, r6
 8000b22:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b26:	2100      	movs	r1, #0
 8000b28:	b11d      	cbz	r5, 8000b32 <__udivmoddi4+0xa6>
 8000b2a:	40d3      	lsrs	r3, r2
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d905      	bls.n	8000b46 <__udivmoddi4+0xba>
 8000b3a:	b10d      	cbz	r5, 8000b40 <__udivmoddi4+0xb4>
 8000b3c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b40:	2100      	movs	r1, #0
 8000b42:	4608      	mov	r0, r1
 8000b44:	e7f5      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b46:	fab3 f183 	clz	r1, r3
 8000b4a:	2900      	cmp	r1, #0
 8000b4c:	d146      	bne.n	8000bdc <__udivmoddi4+0x150>
 8000b4e:	42a3      	cmp	r3, r4
 8000b50:	d302      	bcc.n	8000b58 <__udivmoddi4+0xcc>
 8000b52:	4290      	cmp	r0, r2
 8000b54:	f0c0 80f0 	bcc.w	8000d38 <__udivmoddi4+0x2ac>
 8000b58:	1a86      	subs	r6, r0, r2
 8000b5a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	2d00      	cmp	r5, #0
 8000b62:	d0e6      	beq.n	8000b32 <__udivmoddi4+0xa6>
 8000b64:	e9c5 6300 	strd	r6, r3, [r5]
 8000b68:	e7e3      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b6a:	2a00      	cmp	r2, #0
 8000b6c:	f040 8090 	bne.w	8000c90 <__udivmoddi4+0x204>
 8000b70:	eba1 040c 	sub.w	r4, r1, ip
 8000b74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b78:	fa1f f78c 	uxth.w	r7, ip
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b86:	fb08 4416 	mls	r4, r8, r6, r4
 8000b8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b8e:	fb07 f006 	mul.w	r0, r7, r6
 8000b92:	4298      	cmp	r0, r3
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x11c>
 8000b96:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x11a>
 8000ba0:	4298      	cmp	r0, r3
 8000ba2:	f200 80cd 	bhi.w	8000d40 <__udivmoddi4+0x2b4>
 8000ba6:	4626      	mov	r6, r4
 8000ba8:	1a1c      	subs	r4, r3, r0
 8000baa:	fa1f f38e 	uxth.w	r3, lr
 8000bae:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bb2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bb6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bba:	fb00 f707 	mul.w	r7, r0, r7
 8000bbe:	429f      	cmp	r7, r3
 8000bc0:	d908      	bls.n	8000bd4 <__udivmoddi4+0x148>
 8000bc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bca:	d202      	bcs.n	8000bd2 <__udivmoddi4+0x146>
 8000bcc:	429f      	cmp	r7, r3
 8000bce:	f200 80b0 	bhi.w	8000d32 <__udivmoddi4+0x2a6>
 8000bd2:	4620      	mov	r0, r4
 8000bd4:	1bdb      	subs	r3, r3, r7
 8000bd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bda:	e7a5      	b.n	8000b28 <__udivmoddi4+0x9c>
 8000bdc:	f1c1 0620 	rsb	r6, r1, #32
 8000be0:	408b      	lsls	r3, r1
 8000be2:	fa22 f706 	lsr.w	r7, r2, r6
 8000be6:	431f      	orrs	r7, r3
 8000be8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bec:	fa04 f301 	lsl.w	r3, r4, r1
 8000bf0:	ea43 030c 	orr.w	r3, r3, ip
 8000bf4:	40f4      	lsrs	r4, r6
 8000bf6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bfa:	0c38      	lsrs	r0, r7, #16
 8000bfc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c00:	fbb4 fef0 	udiv	lr, r4, r0
 8000c04:	fa1f fc87 	uxth.w	ip, r7
 8000c08:	fb00 441e 	mls	r4, r0, lr, r4
 8000c0c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c10:	fb0e f90c 	mul.w	r9, lr, ip
 8000c14:	45a1      	cmp	r9, r4
 8000c16:	fa02 f201 	lsl.w	r2, r2, r1
 8000c1a:	d90a      	bls.n	8000c32 <__udivmoddi4+0x1a6>
 8000c1c:	193c      	adds	r4, r7, r4
 8000c1e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c22:	f080 8084 	bcs.w	8000d2e <__udivmoddi4+0x2a2>
 8000c26:	45a1      	cmp	r9, r4
 8000c28:	f240 8081 	bls.w	8000d2e <__udivmoddi4+0x2a2>
 8000c2c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c30:	443c      	add	r4, r7
 8000c32:	eba4 0409 	sub.w	r4, r4, r9
 8000c36:	fa1f f983 	uxth.w	r9, r3
 8000c3a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c3e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c42:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c46:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c4a:	45a4      	cmp	ip, r4
 8000c4c:	d907      	bls.n	8000c5e <__udivmoddi4+0x1d2>
 8000c4e:	193c      	adds	r4, r7, r4
 8000c50:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c54:	d267      	bcs.n	8000d26 <__udivmoddi4+0x29a>
 8000c56:	45a4      	cmp	ip, r4
 8000c58:	d965      	bls.n	8000d26 <__udivmoddi4+0x29a>
 8000c5a:	3b02      	subs	r3, #2
 8000c5c:	443c      	add	r4, r7
 8000c5e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c62:	fba0 9302 	umull	r9, r3, r0, r2
 8000c66:	eba4 040c 	sub.w	r4, r4, ip
 8000c6a:	429c      	cmp	r4, r3
 8000c6c:	46ce      	mov	lr, r9
 8000c6e:	469c      	mov	ip, r3
 8000c70:	d351      	bcc.n	8000d16 <__udivmoddi4+0x28a>
 8000c72:	d04e      	beq.n	8000d12 <__udivmoddi4+0x286>
 8000c74:	b155      	cbz	r5, 8000c8c <__udivmoddi4+0x200>
 8000c76:	ebb8 030e 	subs.w	r3, r8, lr
 8000c7a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c7e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c82:	40cb      	lsrs	r3, r1
 8000c84:	431e      	orrs	r6, r3
 8000c86:	40cc      	lsrs	r4, r1
 8000c88:	e9c5 6400 	strd	r6, r4, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e750      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000c90:	f1c2 0320 	rsb	r3, r2, #32
 8000c94:	fa20 f103 	lsr.w	r1, r0, r3
 8000c98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c9c:	fa24 f303 	lsr.w	r3, r4, r3
 8000ca0:	4094      	lsls	r4, r2
 8000ca2:	430c      	orrs	r4, r1
 8000ca4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cac:	fa1f f78c 	uxth.w	r7, ip
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cb8:	0c23      	lsrs	r3, r4, #16
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb00 f107 	mul.w	r1, r0, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d908      	bls.n	8000cd8 <__udivmoddi4+0x24c>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cce:	d22c      	bcs.n	8000d2a <__udivmoddi4+0x29e>
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d92a      	bls.n	8000d2a <__udivmoddi4+0x29e>
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	4463      	add	r3, ip
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ce0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb01 f307 	mul.w	r3, r1, r7
 8000cec:	42a3      	cmp	r3, r4
 8000cee:	d908      	bls.n	8000d02 <__udivmoddi4+0x276>
 8000cf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cf8:	d213      	bcs.n	8000d22 <__udivmoddi4+0x296>
 8000cfa:	42a3      	cmp	r3, r4
 8000cfc:	d911      	bls.n	8000d22 <__udivmoddi4+0x296>
 8000cfe:	3902      	subs	r1, #2
 8000d00:	4464      	add	r4, ip
 8000d02:	1ae4      	subs	r4, r4, r3
 8000d04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d08:	e739      	b.n	8000b7e <__udivmoddi4+0xf2>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	e6f0      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d0e:	4608      	mov	r0, r1
 8000d10:	e706      	b.n	8000b20 <__udivmoddi4+0x94>
 8000d12:	45c8      	cmp	r8, r9
 8000d14:	d2ae      	bcs.n	8000c74 <__udivmoddi4+0x1e8>
 8000d16:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d1a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d1e:	3801      	subs	r0, #1
 8000d20:	e7a8      	b.n	8000c74 <__udivmoddi4+0x1e8>
 8000d22:	4631      	mov	r1, r6
 8000d24:	e7ed      	b.n	8000d02 <__udivmoddi4+0x276>
 8000d26:	4603      	mov	r3, r0
 8000d28:	e799      	b.n	8000c5e <__udivmoddi4+0x1d2>
 8000d2a:	4630      	mov	r0, r6
 8000d2c:	e7d4      	b.n	8000cd8 <__udivmoddi4+0x24c>
 8000d2e:	46d6      	mov	lr, sl
 8000d30:	e77f      	b.n	8000c32 <__udivmoddi4+0x1a6>
 8000d32:	4463      	add	r3, ip
 8000d34:	3802      	subs	r0, #2
 8000d36:	e74d      	b.n	8000bd4 <__udivmoddi4+0x148>
 8000d38:	4606      	mov	r6, r0
 8000d3a:	4623      	mov	r3, r4
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	e70f      	b.n	8000b60 <__udivmoddi4+0xd4>
 8000d40:	3e02      	subs	r6, #2
 8000d42:	4463      	add	r3, ip
 8000d44:	e730      	b.n	8000ba8 <__udivmoddi4+0x11c>
 8000d46:	bf00      	nop

08000d48 <__aeabi_idiv0>:
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop

08000d4c <update_task_priorities>:
void update_task_priorities(void);

/* USER CODE BEGIN 4 */

// Function to update task priorities based on deadlines (DMS)
void update_task_priorities(void) {
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
    uint32_t currentTime = HAL_GetTick();
 8000d52:	f000 ff4d 	bl	8001bf0 <HAL_GetTick>
 8000d56:	60f8      	str	r0, [r7, #12]

    // Calculate remaining time to deadline for each task
    uint32_t timeToTask1Deadline = (task1Deadline > currentTime) ? (task1Deadline - currentTime) : 0;
 8000d58:	4b1c      	ldr	r3, [pc, #112]	@ (8000dcc <update_task_priorities+0x80>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	68fa      	ldr	r2, [r7, #12]
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	d204      	bcs.n	8000d6c <update_task_priorities+0x20>
 8000d62:	4b1a      	ldr	r3, [pc, #104]	@ (8000dcc <update_task_priorities+0x80>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	e000      	b.n	8000d6e <update_task_priorities+0x22>
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60bb      	str	r3, [r7, #8]
    uint32_t timeToTask2Deadline = (task2Deadline > currentTime) ? (task2Deadline - currentTime) : 0;
 8000d70:	4b17      	ldr	r3, [pc, #92]	@ (8000dd0 <update_task_priorities+0x84>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	68fa      	ldr	r2, [r7, #12]
 8000d76:	429a      	cmp	r2, r3
 8000d78:	d204      	bcs.n	8000d84 <update_task_priorities+0x38>
 8000d7a:	4b15      	ldr	r3, [pc, #84]	@ (8000dd0 <update_task_priorities+0x84>)
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	e000      	b.n	8000d86 <update_task_priorities+0x3a>
 8000d84:	2300      	movs	r3, #0
 8000d86:	607b      	str	r3, [r7, #4]

    // Update priorities: Shorter deadline = higher priority
    if (timeToTask1Deadline < timeToTask2Deadline) {
 8000d88:	68ba      	ldr	r2, [r7, #8]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d20c      	bcs.n	8000daa <update_task_priorities+0x5e>
        // Task 1 has an earlier deadline, so it gets a higher priority
        vTaskPrioritySet(task1_handle, 2);  // Task 1 gets higher priority
 8000d90:	4b10      	ldr	r3, [pc, #64]	@ (8000dd4 <update_task_priorities+0x88>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2102      	movs	r1, #2
 8000d96:	4618      	mov	r0, r3
 8000d98:	f004 f866 	bl	8004e68 <vTaskPrioritySet>
        vTaskPrioritySet(task2_handle, 1);  // Task 2 gets lower priority
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd8 <update_task_priorities+0x8c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2101      	movs	r1, #1
 8000da2:	4618      	mov	r0, r3
 8000da4:	f004 f860 	bl	8004e68 <vTaskPrioritySet>
    } else {
        // Task 2 has an earlier deadline, so it gets a higher priority
        vTaskPrioritySet(task1_handle, 1);  // Task 1 gets lower priority
        vTaskPrioritySet(task2_handle, 2);  // Task 2 gets higher priority
    }
}
 8000da8:	e00b      	b.n	8000dc2 <update_task_priorities+0x76>
        vTaskPrioritySet(task1_handle, 1);  // Task 1 gets lower priority
 8000daa:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd4 <update_task_priorities+0x88>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2101      	movs	r1, #1
 8000db0:	4618      	mov	r0, r3
 8000db2:	f004 f859 	bl	8004e68 <vTaskPrioritySet>
        vTaskPrioritySet(task2_handle, 2);  // Task 2 gets higher priority
 8000db6:	4b08      	ldr	r3, [pc, #32]	@ (8000dd8 <update_task_priorities+0x8c>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2102      	movs	r1, #2
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f004 f853 	bl	8004e68 <vTaskPrioritySet>
}
 8000dc2:	bf00      	nop
 8000dc4:	3710      	adds	r7, #16
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000010 	.word	0x20000010
 8000dd0:	20000014 	.word	0x20000014
 8000dd4:	2000015c 	.word	0x2000015c
 8000dd8:	20000160 	.word	0x20000160
 8000ddc:	00000000 	.word	0x00000000

08000de0 <task1_handler>:

static void task1_handler(void* parameters) {
 8000de0:	b590      	push	{r4, r7, lr}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
    while (1) {
        // Update task priorities based on deadlines (DMS)
        update_task_priorities();
 8000de8:	f7ff ffb0 	bl	8000d4c <update_task_priorities>

        // Save the original task priority
        originalTask1Priority = uxTaskPriorityGet(NULL);
 8000dec:	2000      	movs	r0, #0
 8000dee:	f004 f821 	bl	8004e34 <uxTaskPriorityGet>
 8000df2:	4603      	mov	r3, r0
 8000df4:	4a4e      	ldr	r2, [pc, #312]	@ (8000f30 <task1_handler+0x150>)
 8000df6:	6013      	str	r3, [r2, #0]

        // Take the GPIO semaphore and raise the priority to the ceiling priority
        if (xSemaphoreTake(gpioMutex, portMAX_DELAY) == pdTRUE) {
 8000df8:	4b4e      	ldr	r3, [pc, #312]	@ (8000f34 <task1_handler+0x154>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8000e00:	4618      	mov	r0, r3
 8000e02:	f003 fbc9 	bl	8004598 <xQueueSemaphoreTake>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	f040 8088 	bne.w	8000f1e <task1_handler+0x13e>
            vTaskPrioritySet(NULL, GPIO_CEILING_PRIORITY);  // Raise to ceiling priority
 8000e0e:	2103      	movs	r1, #3
 8000e10:	2000      	movs	r0, #0
 8000e12:	f004 f829 	bl	8004e68 <vTaskPrioritySet>

            // Start distance measurement
            HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000e16:	2201      	movs	r2, #1
 8000e18:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e1c:	4846      	ldr	r0, [pc, #280]	@ (8000f38 <task1_handler+0x158>)
 8000e1e:	f001 f971 	bl	8002104 <HAL_GPIO_WritePin>
            __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000e22:	4b46      	ldr	r3, [pc, #280]	@ (8000f3c <task1_handler+0x15c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2200      	movs	r2, #0
 8000e28:	625a      	str	r2, [r3, #36]	@ 0x24
            while (__HAL_TIM_GET_COUNTER(&htim1) < 10);  // wait for 10 us
 8000e2a:	bf00      	nop
 8000e2c:	4b43      	ldr	r3, [pc, #268]	@ (8000f3c <task1_handler+0x15c>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e32:	2b09      	cmp	r3, #9
 8000e34:	d9fa      	bls.n	8000e2c <task1_handler+0x4c>
            HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000e36:	2200      	movs	r2, #0
 8000e38:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e3c:	483e      	ldr	r0, [pc, #248]	@ (8000f38 <task1_handler+0x158>)
 8000e3e:	f001 f961 	bl	8002104 <HAL_GPIO_WritePin>

            pMillis = HAL_GetTick(); // used to avoid infinite while loop (for timeout)
 8000e42:	f000 fed5 	bl	8001bf0 <HAL_GetTick>
 8000e46:	4603      	mov	r3, r0
 8000e48:	4a3d      	ldr	r2, [pc, #244]	@ (8000f40 <task1_handler+0x160>)
 8000e4a:	6013      	str	r3, [r2, #0]
            // wait for the echo pin to go high
            while (!(HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN)) && pMillis + 10 > HAL_GetTick());
 8000e4c:	bf00      	nop
 8000e4e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e52:	4839      	ldr	r0, [pc, #228]	@ (8000f38 <task1_handler+0x158>)
 8000e54:	f001 f93e 	bl	80020d4 <HAL_GPIO_ReadPin>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d108      	bne.n	8000e70 <task1_handler+0x90>
 8000e5e:	4b38      	ldr	r3, [pc, #224]	@ (8000f40 <task1_handler+0x160>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f103 040a 	add.w	r4, r3, #10
 8000e66:	f000 fec3 	bl	8001bf0 <HAL_GetTick>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	d8ee      	bhi.n	8000e4e <task1_handler+0x6e>
            Value1 = __HAL_TIM_GET_COUNTER(&htim1);
 8000e70:	4b32      	ldr	r3, [pc, #200]	@ (8000f3c <task1_handler+0x15c>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e76:	4a33      	ldr	r2, [pc, #204]	@ (8000f44 <task1_handler+0x164>)
 8000e78:	6013      	str	r3, [r2, #0]

            pMillis = HAL_GetTick(); // used to avoid infinite while loop (for timeout)
 8000e7a:	f000 feb9 	bl	8001bf0 <HAL_GetTick>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	4a2f      	ldr	r2, [pc, #188]	@ (8000f40 <task1_handler+0x160>)
 8000e82:	6013      	str	r3, [r2, #0]
            // wait for the echo pin to go low
            while ((HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
 8000e84:	bf00      	nop
 8000e86:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e8a:	482b      	ldr	r0, [pc, #172]	@ (8000f38 <task1_handler+0x158>)
 8000e8c:	f001 f922 	bl	80020d4 <HAL_GPIO_ReadPin>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d008      	beq.n	8000ea8 <task1_handler+0xc8>
 8000e96:	4b2a      	ldr	r3, [pc, #168]	@ (8000f40 <task1_handler+0x160>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f103 0432 	add.w	r4, r3, #50	@ 0x32
 8000e9e:	f000 fea7 	bl	8001bf0 <HAL_GetTick>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	429c      	cmp	r4, r3
 8000ea6:	d8ee      	bhi.n	8000e86 <task1_handler+0xa6>
            Value2 = __HAL_TIM_GET_COUNTER(&htim1);
 8000ea8:	4b24      	ldr	r3, [pc, #144]	@ (8000f3c <task1_handler+0x15c>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eae:	4a26      	ldr	r2, [pc, #152]	@ (8000f48 <task1_handler+0x168>)
 8000eb0:	6013      	str	r3, [r2, #0]

            Distance = (Value2 - Value1) * 0.034 / 2;
 8000eb2:	4b25      	ldr	r3, [pc, #148]	@ (8000f48 <task1_handler+0x168>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	4b23      	ldr	r3, [pc, #140]	@ (8000f44 <task1_handler+0x164>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff fb21 	bl	8000504 <__aeabi_ui2d>
 8000ec2:	a319      	add	r3, pc, #100	@ (adr r3, 8000f28 <task1_handler+0x148>)
 8000ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec8:	f7ff fb96 	bl	80005f8 <__aeabi_dmul>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	460b      	mov	r3, r1
 8000ed0:	4610      	mov	r0, r2
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	f04f 0200 	mov.w	r2, #0
 8000ed8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000edc:	f7ff fcb6 	bl	800084c <__aeabi_ddiv>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	4610      	mov	r0, r2
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	f7ff fd98 	bl	8000a1c <__aeabi_d2uiz>
 8000eec:	4603      	mov	r3, r0
 8000eee:	b29a      	uxth	r2, r3
 8000ef0:	4b16      	ldr	r3, [pc, #88]	@ (8000f4c <task1_handler+0x16c>)
 8000ef2:	801a      	strh	r2, [r3, #0]

            // Send distance value to the queue
            xQueueSend(distanceQueue, &Distance, portMAX_DELAY);
 8000ef4:	4b16      	ldr	r3, [pc, #88]	@ (8000f50 <task1_handler+0x170>)
 8000ef6:	6818      	ldr	r0, [r3, #0]
 8000ef8:	2300      	movs	r3, #0
 8000efa:	f04f 32ff 	mov.w	r2, #4294967295
 8000efe:	4913      	ldr	r1, [pc, #76]	@ (8000f4c <task1_handler+0x16c>)
 8000f00:	f003 f966 	bl	80041d0 <xQueueGenericSend>

            xSemaphoreGive(gpioMutex);  // Release the GPIO mutex
 8000f04:	4b0b      	ldr	r3, [pc, #44]	@ (8000f34 <task1_handler+0x154>)
 8000f06:	6818      	ldr	r0, [r3, #0]
 8000f08:	2300      	movs	r3, #0
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	f003 f95f 	bl	80041d0 <xQueueGenericSend>

            // Restore the original task priority after releasing the resource
            vTaskPrioritySet(NULL, originalTask1Priority);
 8000f12:	4b07      	ldr	r3, [pc, #28]	@ (8000f30 <task1_handler+0x150>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4619      	mov	r1, r3
 8000f18:	2000      	movs	r0, #0
 8000f1a:	f003 ffa5 	bl	8004e68 <vTaskPrioritySet>
        }
        vTaskDelay(pdMS_TO_TICKS(100));  // Wait for 100ms before next measurement
 8000f1e:	2064      	movs	r0, #100	@ 0x64
 8000f20:	f003 ff52 	bl	8004dc8 <vTaskDelay>
        update_task_priorities();
 8000f24:	e760      	b.n	8000de8 <task1_handler+0x8>
 8000f26:	bf00      	nop
 8000f28:	b020c49c 	.word	0xb020c49c
 8000f2c:	3fa16872 	.word	0x3fa16872
 8000f30:	20000164 	.word	0x20000164
 8000f34:	20000098 	.word	0x20000098
 8000f38:	40020000 	.word	0x40020000
 8000f3c:	200000f0 	.word	0x200000f0
 8000f40:	20000138 	.word	0x20000138
 8000f44:	2000013c 	.word	0x2000013c
 8000f48:	20000140 	.word	0x20000140
 8000f4c:	20000144 	.word	0x20000144
 8000f50:	20000158 	.word	0x20000158

08000f54 <task2_handler>:
    }
}

static void task2_handler(void* parameters) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
    uint16_t receivedDistance;

    while (1) {
        // Update task priorities based on deadlines (DMS)
        update_task_priorities();
 8000f5c:	f7ff fef6 	bl	8000d4c <update_task_priorities>

        // Save the original task priority
        originalTask2Priority = uxTaskPriorityGet(NULL);
 8000f60:	2000      	movs	r0, #0
 8000f62:	f003 ff67 	bl	8004e34 <uxTaskPriorityGet>
 8000f66:	4603      	mov	r3, r0
 8000f68:	4a23      	ldr	r2, [pc, #140]	@ (8000ff8 <task2_handler+0xa4>)
 8000f6a:	6013      	str	r3, [r2, #0]

        // Take the I2C mutex and raise the priority to the ceiling priority
        if (xSemaphoreTake(i2cMutex, portMAX_DELAY) == pdTRUE) {
 8000f6c:	4b23      	ldr	r3, [pc, #140]	@ (8000ffc <task2_handler+0xa8>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f04f 31ff 	mov.w	r1, #4294967295
 8000f74:	4618      	mov	r0, r3
 8000f76:	f003 fb0f 	bl	8004598 <xQueueSemaphoreTake>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d136      	bne.n	8000fee <task2_handler+0x9a>
            vTaskPrioritySet(NULL, I2C_CEILING_PRIORITY);  // Raise to ceiling priority
 8000f80:	2102      	movs	r1, #2
 8000f82:	2000      	movs	r0, #0
 8000f84:	f003 ff70 	bl	8004e68 <vTaskPrioritySet>

            // Receive distance value from the queue
            if (xQueueReceive(distanceQueue, &receivedDistance, portMAX_DELAY) == pdPASS) {
 8000f88:	4b1d      	ldr	r3, [pc, #116]	@ (8001000 <task2_handler+0xac>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f107 010e 	add.w	r1, r7, #14
 8000f90:	f04f 32ff 	mov.w	r2, #4294967295
 8000f94:	4618      	mov	r0, r3
 8000f96:	f003 fa1d 	bl	80043d4 <xQueueReceive>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d119      	bne.n	8000fd4 <task2_handler+0x80>
                // Display the distance
                SSD1306_GotoXY(0, 0);
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	f000 fb3e 	bl	8001624 <SSD1306_GotoXY>
                SSD1306_Puts("Distance:", &Font_11x18, 1);
 8000fa8:	2201      	movs	r2, #1
 8000faa:	4916      	ldr	r1, [pc, #88]	@ (8001004 <task2_handler+0xb0>)
 8000fac:	4816      	ldr	r0, [pc, #88]	@ (8001008 <task2_handler+0xb4>)
 8000fae:	f000 fbcd 	bl	800174c <SSD1306_Puts>
                sprintf(strCopy, "%d    ", receivedDistance);
 8000fb2:	89fb      	ldrh	r3, [r7, #14]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	4915      	ldr	r1, [pc, #84]	@ (800100c <task2_handler+0xb8>)
 8000fb8:	4815      	ldr	r0, [pc, #84]	@ (8001010 <task2_handler+0xbc>)
 8000fba:	f005 feaf 	bl	8006d1c <siprintf>
                SSD1306_GotoXY(0, 30);
 8000fbe:	211e      	movs	r1, #30
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	f000 fb2f 	bl	8001624 <SSD1306_GotoXY>
                SSD1306_Puts(strCopy, &Font_16x26, 1);
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	4912      	ldr	r1, [pc, #72]	@ (8001014 <task2_handler+0xc0>)
 8000fca:	4811      	ldr	r0, [pc, #68]	@ (8001010 <task2_handler+0xbc>)
 8000fcc:	f000 fbbe 	bl	800174c <SSD1306_Puts>
                SSD1306_UpdateScreen();
 8000fd0:	f000 fa82 	bl	80014d8 <SSD1306_UpdateScreen>
            }

            xSemaphoreGive(i2cMutex);  // Release the I2C mutex
 8000fd4:	4b09      	ldr	r3, [pc, #36]	@ (8000ffc <task2_handler+0xa8>)
 8000fd6:	6818      	ldr	r0, [r3, #0]
 8000fd8:	2300      	movs	r3, #0
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2100      	movs	r1, #0
 8000fde:	f003 f8f7 	bl	80041d0 <xQueueGenericSend>

            // Restore the original task priority after releasing the resource
            vTaskPrioritySet(NULL, originalTask2Priority);
 8000fe2:	4b05      	ldr	r3, [pc, #20]	@ (8000ff8 <task2_handler+0xa4>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	2000      	movs	r0, #0
 8000fea:	f003 ff3d 	bl	8004e68 <vTaskPrioritySet>
        }
        vTaskDelay(pdMS_TO_TICKS(100));  // Delay to reduce display update rate
 8000fee:	2064      	movs	r0, #100	@ 0x64
 8000ff0:	f003 feea 	bl	8004dc8 <vTaskDelay>
        update_task_priorities();
 8000ff4:	e7b2      	b.n	8000f5c <task2_handler+0x8>
 8000ff6:	bf00      	nop
 8000ff8:	20000168 	.word	0x20000168
 8000ffc:	20000094 	.word	0x20000094
 8001000:	20000158 	.word	0x20000158
 8001004:	20000000 	.word	0x20000000
 8001008:	08007684 	.word	0x08007684
 800100c:	08007690 	.word	0x08007690
 8001010:	20000148 	.word	0x20000148
 8001014:	20000008 	.word	0x20000008

08001018 <SystemClock_Config>:
}

/* USER CODE END 4 */

/* System Initialization Functions (Unchanged) */
void SystemClock_Config(void) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b094      	sub	sp, #80	@ 0x50
 800101c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800101e:	f107 0320 	add.w	r3, r7, #32
 8001022:	2230      	movs	r2, #48	@ 0x30
 8001024:	2100      	movs	r1, #0
 8001026:	4618      	mov	r0, r3
 8001028:	f005 fe98 	bl	8006d5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800102c:	f107 030c 	add.w	r3, r7, #12
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE();
 800103c:	2300      	movs	r3, #0
 800103e:	60bb      	str	r3, [r7, #8]
 8001040:	4b28      	ldr	r3, [pc, #160]	@ (80010e4 <SystemClock_Config+0xcc>)
 8001042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001044:	4a27      	ldr	r2, [pc, #156]	@ (80010e4 <SystemClock_Config+0xcc>)
 8001046:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800104a:	6413      	str	r3, [r2, #64]	@ 0x40
 800104c:	4b25      	ldr	r3, [pc, #148]	@ (80010e4 <SystemClock_Config+0xcc>)
 800104e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001050:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001054:	60bb      	str	r3, [r7, #8]
 8001056:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001058:	2300      	movs	r3, #0
 800105a:	607b      	str	r3, [r7, #4]
 800105c:	4b22      	ldr	r3, [pc, #136]	@ (80010e8 <SystemClock_Config+0xd0>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001064:	4a20      	ldr	r2, [pc, #128]	@ (80010e8 <SystemClock_Config+0xd0>)
 8001066:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800106a:	6013      	str	r3, [r2, #0]
 800106c:	4b1e      	ldr	r3, [pc, #120]	@ (80010e8 <SystemClock_Config+0xd0>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001078:	2301      	movs	r3, #1
 800107a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800107c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001080:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001082:	2302      	movs	r3, #2
 8001084:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001086:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800108a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800108c:	2319      	movs	r3, #25
 800108e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001090:	2390      	movs	r3, #144	@ 0x90
 8001092:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001094:	2302      	movs	r3, #2
 8001096:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001098:	2304      	movs	r3, #4
 800109a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800109c:	f107 0320 	add.w	r3, r7, #32
 80010a0:	4618      	mov	r0, r3
 80010a2:	f001 fe15 	bl	8002cd0 <HAL_RCC_OscConfig>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <SystemClock_Config+0x98>
    Error_Handler();
 80010ac:	f000 f94a 	bl	8001344 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010b0:	230f      	movs	r3, #15
 80010b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b4:	2302      	movs	r3, #2
 80010b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80010c6:	f107 030c 	add.w	r3, r7, #12
 80010ca:	2102      	movs	r1, #2
 80010cc:	4618      	mov	r0, r3
 80010ce:	f002 f877 	bl	80031c0 <HAL_RCC_ClockConfig>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <SystemClock_Config+0xc4>
    Error_Handler();
 80010d8:	f000 f934 	bl	8001344 <Error_Handler>
  }
}
 80010dc:	bf00      	nop
 80010de:	3750      	adds	r7, #80	@ 0x50
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40007000 	.word	0x40007000

080010ec <MX_I2C1_Init>:

/* Initialize peripherals like I2C, Timer, GPIO, etc. */
static void MX_I2C1_Init(void) {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 80010f0:	4b12      	ldr	r3, [pc, #72]	@ (800113c <MX_I2C1_Init+0x50>)
 80010f2:	4a13      	ldr	r2, [pc, #76]	@ (8001140 <MX_I2C1_Init+0x54>)
 80010f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010f6:	4b11      	ldr	r3, [pc, #68]	@ (800113c <MX_I2C1_Init+0x50>)
 80010f8:	4a12      	ldr	r2, [pc, #72]	@ (8001144 <MX_I2C1_Init+0x58>)
 80010fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010fc:	4b0f      	ldr	r3, [pc, #60]	@ (800113c <MX_I2C1_Init+0x50>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001102:	4b0e      	ldr	r3, [pc, #56]	@ (800113c <MX_I2C1_Init+0x50>)
 8001104:	2200      	movs	r2, #0
 8001106:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001108:	4b0c      	ldr	r3, [pc, #48]	@ (800113c <MX_I2C1_Init+0x50>)
 800110a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800110e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001110:	4b0a      	ldr	r3, [pc, #40]	@ (800113c <MX_I2C1_Init+0x50>)
 8001112:	2200      	movs	r2, #0
 8001114:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001116:	4b09      	ldr	r3, [pc, #36]	@ (800113c <MX_I2C1_Init+0x50>)
 8001118:	2200      	movs	r2, #0
 800111a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800111c:	4b07      	ldr	r3, [pc, #28]	@ (800113c <MX_I2C1_Init+0x50>)
 800111e:	2200      	movs	r2, #0
 8001120:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001122:	4b06      	ldr	r3, [pc, #24]	@ (800113c <MX_I2C1_Init+0x50>)
 8001124:	2200      	movs	r2, #0
 8001126:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001128:	4804      	ldr	r0, [pc, #16]	@ (800113c <MX_I2C1_Init+0x50>)
 800112a:	f001 f805 	bl	8002138 <HAL_I2C_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_I2C1_Init+0x4c>
    Error_Handler();
 8001134:	f000 f906 	bl	8001344 <Error_Handler>
  }
}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}
 800113c:	2000009c 	.word	0x2000009c
 8001140:	40005400 	.word	0x40005400
 8001144:	000186a0 	.word	0x000186a0

08001148 <MX_TIM1_Init>:

static void MX_TIM1_Init(void) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800114e:	f107 0308 	add.w	r3, r7, #8
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800115c:	463b      	mov	r3, r7
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8001164:	4b1b      	ldr	r3, [pc, #108]	@ (80011d4 <MX_TIM1_Init+0x8c>)
 8001166:	4a1c      	ldr	r2, [pc, #112]	@ (80011d8 <MX_TIM1_Init+0x90>)
 8001168:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800116a:	4b1a      	ldr	r3, [pc, #104]	@ (80011d4 <MX_TIM1_Init+0x8c>)
 800116c:	2200      	movs	r2, #0
 800116e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001170:	4b18      	ldr	r3, [pc, #96]	@ (80011d4 <MX_TIM1_Init+0x8c>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFF;
 8001176:	4b17      	ldr	r3, [pc, #92]	@ (80011d4 <MX_TIM1_Init+0x8c>)
 8001178:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800117c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800117e:	4b15      	ldr	r3, [pc, #84]	@ (80011d4 <MX_TIM1_Init+0x8c>)
 8001180:	2200      	movs	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001184:	4b13      	ldr	r3, [pc, #76]	@ (80011d4 <MX_TIM1_Init+0x8c>)
 8001186:	2200      	movs	r2, #0
 8001188:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 800118a:	4812      	ldr	r0, [pc, #72]	@ (80011d4 <MX_TIM1_Init+0x8c>)
 800118c:	f002 fa16 	bl	80035bc <HAL_TIM_Base_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM1_Init+0x52>
    Error_Handler();
 8001196:	f000 f8d5 	bl	8001344 <Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800119a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800119e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80011a0:	f107 0308 	add.w	r3, r7, #8
 80011a4:	4619      	mov	r1, r3
 80011a6:	480b      	ldr	r0, [pc, #44]	@ (80011d4 <MX_TIM1_Init+0x8c>)
 80011a8:	f002 fbaa 	bl	8003900 <HAL_TIM_ConfigClockSource>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM1_Init+0x6e>
    Error_Handler();
 80011b2:	f000 f8c7 	bl	8001344 <Error_Handler>
  }

  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 80011b6:	463b      	mov	r3, r7
 80011b8:	4619      	mov	r1, r3
 80011ba:	4806      	ldr	r0, [pc, #24]	@ (80011d4 <MX_TIM1_Init+0x8c>)
 80011bc:	f002 fdc0 	bl	8003d40 <HAL_TIMEx_MasterConfigSynchronization>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_TIM1_Init+0x82>
    Error_Handler();
 80011c6:	f000 f8bd 	bl	8001344 <Error_Handler>
  }
}
 80011ca:	bf00      	nop
 80011cc:	3718      	adds	r7, #24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	200000f0 	.word	0x200000f0
 80011d8:	40010000 	.word	0x40010000

080011dc <MX_GPIO_Init>:

static void MX_GPIO_Init(void) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	603b      	str	r3, [r7, #0]
 80011e6:	4b11      	ldr	r3, [pc, #68]	@ (800122c <MX_GPIO_Init+0x50>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ea:	4a10      	ldr	r2, [pc, #64]	@ (800122c <MX_GPIO_Init+0x50>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f2:	4b0e      	ldr	r3, [pc, #56]	@ (800122c <MX_GPIO_Init+0x50>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	603b      	str	r3, [r7, #0]
 80011fc:	683b      	ldr	r3, [r7, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fe:	1d3b      	adds	r3, r7, #4
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]

  GPIO_InitStruct.Pin = TRIG_PIN|ECHO_PIN;
 800120c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001210:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001212:	2300      	movs	r3, #0
 8001214:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	4619      	mov	r1, r3
 800121e:	4804      	ldr	r0, [pc, #16]	@ (8001230 <MX_GPIO_Init+0x54>)
 8001220:	f000 fdd4 	bl	8001dcc <HAL_GPIO_Init>
}
 8001224:	bf00      	nop
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40023800 	.word	0x40023800
 8001230:	40020000 	.word	0x40020000

08001234 <create_semaphores>:

void create_semaphores(void) {
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
    gpioMutex = xSemaphoreCreateMutex();
 8001238:	2001      	movs	r0, #1
 800123a:	f002 ffb1 	bl	80041a0 <xQueueCreateMutex>
 800123e:	4603      	mov	r3, r0
 8001240:	4a09      	ldr	r2, [pc, #36]	@ (8001268 <create_semaphores+0x34>)
 8001242:	6013      	str	r3, [r2, #0]
    i2cMutex = xSemaphoreCreateMutex();
 8001244:	2001      	movs	r0, #1
 8001246:	f002 ffab 	bl	80041a0 <xQueueCreateMutex>
 800124a:	4603      	mov	r3, r0
 800124c:	4a07      	ldr	r2, [pc, #28]	@ (800126c <create_semaphores+0x38>)
 800124e:	6013      	str	r3, [r2, #0]
    if (gpioMutex == NULL || i2cMutex == NULL) {
 8001250:	4b05      	ldr	r3, [pc, #20]	@ (8001268 <create_semaphores+0x34>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d003      	beq.n	8001260 <create_semaphores+0x2c>
 8001258:	4b04      	ldr	r3, [pc, #16]	@ (800126c <create_semaphores+0x38>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d101      	bne.n	8001264 <create_semaphores+0x30>
        Error_Handler();  // Handle error if semaphore creation fails
 8001260:	f000 f870 	bl	8001344 <Error_Handler>
    }
}
 8001264:	bf00      	nop
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000098 	.word	0x20000098
 800126c:	20000094 	.word	0x20000094

08001270 <main>:

/* Main function to initialize system and start tasks */
int main(void) {
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af02      	add	r7, sp, #8
    HAL_Init();
 8001276:	f000 fc99 	bl	8001bac <HAL_Init>
    SystemClock_Config();
 800127a:	f7ff fecd 	bl	8001018 <SystemClock_Config>
    MX_GPIO_Init();
 800127e:	f7ff ffad 	bl	80011dc <MX_GPIO_Init>
    MX_I2C1_Init();
 8001282:	f7ff ff33 	bl	80010ec <MX_I2C1_Init>
    MX_TIM1_Init();
 8001286:	f7ff ff5f 	bl	8001148 <MX_TIM1_Init>
    SSD1306_Init();
 800128a:	f000 f861 	bl	8001350 <SSD1306_Init>

    // Create distance queue
    distanceQueue = xQueueCreate(DISTANCE_QUEUE_SIZE, sizeof(uint16_t));
 800128e:	2200      	movs	r2, #0
 8001290:	2102      	movs	r1, #2
 8001292:	2001      	movs	r0, #1
 8001294:	f002 fef8 	bl	8004088 <xQueueGenericCreate>
 8001298:	4603      	mov	r3, r0
 800129a:	4a23      	ldr	r2, [pc, #140]	@ (8001328 <main+0xb8>)
 800129c:	6013      	str	r3, [r2, #0]
    if (distanceQueue == NULL) {
 800129e:	4b22      	ldr	r3, [pc, #136]	@ (8001328 <main+0xb8>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d101      	bne.n	80012aa <main+0x3a>
        Error_Handler();  // Handle error if queue creation fails
 80012a6:	f000 f84d 	bl	8001344 <Error_Handler>
    }

    // Create semaphores
    create_semaphores();
 80012aa:	f7ff ffc3 	bl	8001234 <create_semaphores>

    // Create tasks
    BaseType_t status;

    status = xTaskCreate(task1_handler, "Task 1", TASK_STACK_SIZE, NULL, 2, &task1_handle);
 80012ae:	4b1f      	ldr	r3, [pc, #124]	@ (800132c <main+0xbc>)
 80012b0:	9301      	str	r3, [sp, #4]
 80012b2:	2302      	movs	r3, #2
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	2300      	movs	r3, #0
 80012b8:	2280      	movs	r2, #128	@ 0x80
 80012ba:	491d      	ldr	r1, [pc, #116]	@ (8001330 <main+0xc0>)
 80012bc:	481d      	ldr	r0, [pc, #116]	@ (8001334 <main+0xc4>)
 80012be:	f003 fc17 	bl	8004af0 <xTaskCreate>
 80012c2:	60f8      	str	r0, [r7, #12]
    configASSERT(status == pdPASS);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d00b      	beq.n	80012e2 <main+0x72>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80012ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80012ce:	f383 8811 	msr	BASEPRI, r3
 80012d2:	f3bf 8f6f 	isb	sy
 80012d6:	f3bf 8f4f 	dsb	sy
 80012da:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80012dc:	bf00      	nop
 80012de:	bf00      	nop
 80012e0:	e7fd      	b.n	80012de <main+0x6e>

    status = xTaskCreate(task2_handler, "Task 2", TASK_STACK_SIZE, NULL, 1, &task2_handle);
 80012e2:	4b15      	ldr	r3, [pc, #84]	@ (8001338 <main+0xc8>)
 80012e4:	9301      	str	r3, [sp, #4]
 80012e6:	2301      	movs	r3, #1
 80012e8:	9300      	str	r3, [sp, #0]
 80012ea:	2300      	movs	r3, #0
 80012ec:	2280      	movs	r2, #128	@ 0x80
 80012ee:	4913      	ldr	r1, [pc, #76]	@ (800133c <main+0xcc>)
 80012f0:	4813      	ldr	r0, [pc, #76]	@ (8001340 <main+0xd0>)
 80012f2:	f003 fbfd 	bl	8004af0 <xTaskCreate>
 80012f6:	60f8      	str	r0, [r7, #12]
    configASSERT(status == pdPASS);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d00b      	beq.n	8001316 <main+0xa6>
        __asm volatile
 80012fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001302:	f383 8811 	msr	BASEPRI, r3
 8001306:	f3bf 8f6f 	isb	sy
 800130a:	f3bf 8f4f 	dsb	sy
 800130e:	607b      	str	r3, [r7, #4]
    }
 8001310:	bf00      	nop
 8001312:	bf00      	nop
 8001314:	e7fd      	b.n	8001312 <main+0xa2>

    // Start the FreeRTOS scheduler
    vTaskStartScheduler();
 8001316:	f003 fe7b 	bl	8005010 <vTaskStartScheduler>

    // If we get here, there was an error
    Error_Handler();
 800131a:	f000 f813 	bl	8001344 <Error_Handler>
 800131e:	2300      	movs	r3, #0
}
 8001320:	4618      	mov	r0, r3
 8001322:	3710      	adds	r7, #16
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20000158 	.word	0x20000158
 800132c:	2000015c 	.word	0x2000015c
 8001330:	08007698 	.word	0x08007698
 8001334:	08000de1 	.word	0x08000de1
 8001338:	20000160 	.word	0x20000160
 800133c:	080076a0 	.word	0x080076a0
 8001340:	08000f55 	.word	0x08000f55

08001344 <Error_Handler>:
void Error_Handler(void) {
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001348:	b672      	cpsid	i
}
 800134a:	bf00      	nop
    // Optionally, add code to signal an error, e.g., turn on an LED, or send an error message
    __disable_irq();  // Disable interrupts
    while (1) {
 800134c:	bf00      	nop
 800134e:	e7fd      	b.n	800134c <Error_Handler+0x8>

08001350 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001356:	f000 fa1f 	bl	8001798 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800135a:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800135e:	2201      	movs	r2, #1
 8001360:	2178      	movs	r1, #120	@ 0x78
 8001362:	485b      	ldr	r0, [pc, #364]	@ (80014d0 <SSD1306_Init+0x180>)
 8001364:	f001 f92a 	bl	80025bc <HAL_I2C_IsDeviceReady>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800136e:	2300      	movs	r3, #0
 8001370:	e0a9      	b.n	80014c6 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8001372:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001376:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001378:	e002      	b.n	8001380 <SSD1306_Init+0x30>
		p--;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	3b01      	subs	r3, #1
 800137e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d1f9      	bne.n	800137a <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001386:	22ae      	movs	r2, #174	@ 0xae
 8001388:	2100      	movs	r1, #0
 800138a:	2078      	movs	r0, #120	@ 0x78
 800138c:	f000 fa80 	bl	8001890 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001390:	2220      	movs	r2, #32
 8001392:	2100      	movs	r1, #0
 8001394:	2078      	movs	r0, #120	@ 0x78
 8001396:	f000 fa7b 	bl	8001890 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800139a:	2210      	movs	r2, #16
 800139c:	2100      	movs	r1, #0
 800139e:	2078      	movs	r0, #120	@ 0x78
 80013a0:	f000 fa76 	bl	8001890 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80013a4:	22b0      	movs	r2, #176	@ 0xb0
 80013a6:	2100      	movs	r1, #0
 80013a8:	2078      	movs	r0, #120	@ 0x78
 80013aa:	f000 fa71 	bl	8001890 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80013ae:	22c8      	movs	r2, #200	@ 0xc8
 80013b0:	2100      	movs	r1, #0
 80013b2:	2078      	movs	r0, #120	@ 0x78
 80013b4:	f000 fa6c 	bl	8001890 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80013b8:	2200      	movs	r2, #0
 80013ba:	2100      	movs	r1, #0
 80013bc:	2078      	movs	r0, #120	@ 0x78
 80013be:	f000 fa67 	bl	8001890 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80013c2:	2210      	movs	r2, #16
 80013c4:	2100      	movs	r1, #0
 80013c6:	2078      	movs	r0, #120	@ 0x78
 80013c8:	f000 fa62 	bl	8001890 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80013cc:	2240      	movs	r2, #64	@ 0x40
 80013ce:	2100      	movs	r1, #0
 80013d0:	2078      	movs	r0, #120	@ 0x78
 80013d2:	f000 fa5d 	bl	8001890 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80013d6:	2281      	movs	r2, #129	@ 0x81
 80013d8:	2100      	movs	r1, #0
 80013da:	2078      	movs	r0, #120	@ 0x78
 80013dc:	f000 fa58 	bl	8001890 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80013e0:	22ff      	movs	r2, #255	@ 0xff
 80013e2:	2100      	movs	r1, #0
 80013e4:	2078      	movs	r0, #120	@ 0x78
 80013e6:	f000 fa53 	bl	8001890 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80013ea:	22a1      	movs	r2, #161	@ 0xa1
 80013ec:	2100      	movs	r1, #0
 80013ee:	2078      	movs	r0, #120	@ 0x78
 80013f0:	f000 fa4e 	bl	8001890 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80013f4:	22a6      	movs	r2, #166	@ 0xa6
 80013f6:	2100      	movs	r1, #0
 80013f8:	2078      	movs	r0, #120	@ 0x78
 80013fa:	f000 fa49 	bl	8001890 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80013fe:	22a8      	movs	r2, #168	@ 0xa8
 8001400:	2100      	movs	r1, #0
 8001402:	2078      	movs	r0, #120	@ 0x78
 8001404:	f000 fa44 	bl	8001890 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001408:	223f      	movs	r2, #63	@ 0x3f
 800140a:	2100      	movs	r1, #0
 800140c:	2078      	movs	r0, #120	@ 0x78
 800140e:	f000 fa3f 	bl	8001890 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001412:	22a4      	movs	r2, #164	@ 0xa4
 8001414:	2100      	movs	r1, #0
 8001416:	2078      	movs	r0, #120	@ 0x78
 8001418:	f000 fa3a 	bl	8001890 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800141c:	22d3      	movs	r2, #211	@ 0xd3
 800141e:	2100      	movs	r1, #0
 8001420:	2078      	movs	r0, #120	@ 0x78
 8001422:	f000 fa35 	bl	8001890 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001426:	2200      	movs	r2, #0
 8001428:	2100      	movs	r1, #0
 800142a:	2078      	movs	r0, #120	@ 0x78
 800142c:	f000 fa30 	bl	8001890 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001430:	22d5      	movs	r2, #213	@ 0xd5
 8001432:	2100      	movs	r1, #0
 8001434:	2078      	movs	r0, #120	@ 0x78
 8001436:	f000 fa2b 	bl	8001890 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800143a:	22f0      	movs	r2, #240	@ 0xf0
 800143c:	2100      	movs	r1, #0
 800143e:	2078      	movs	r0, #120	@ 0x78
 8001440:	f000 fa26 	bl	8001890 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001444:	22d9      	movs	r2, #217	@ 0xd9
 8001446:	2100      	movs	r1, #0
 8001448:	2078      	movs	r0, #120	@ 0x78
 800144a:	f000 fa21 	bl	8001890 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800144e:	2222      	movs	r2, #34	@ 0x22
 8001450:	2100      	movs	r1, #0
 8001452:	2078      	movs	r0, #120	@ 0x78
 8001454:	f000 fa1c 	bl	8001890 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001458:	22da      	movs	r2, #218	@ 0xda
 800145a:	2100      	movs	r1, #0
 800145c:	2078      	movs	r0, #120	@ 0x78
 800145e:	f000 fa17 	bl	8001890 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001462:	2212      	movs	r2, #18
 8001464:	2100      	movs	r1, #0
 8001466:	2078      	movs	r0, #120	@ 0x78
 8001468:	f000 fa12 	bl	8001890 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800146c:	22db      	movs	r2, #219	@ 0xdb
 800146e:	2100      	movs	r1, #0
 8001470:	2078      	movs	r0, #120	@ 0x78
 8001472:	f000 fa0d 	bl	8001890 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001476:	2220      	movs	r2, #32
 8001478:	2100      	movs	r1, #0
 800147a:	2078      	movs	r0, #120	@ 0x78
 800147c:	f000 fa08 	bl	8001890 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001480:	228d      	movs	r2, #141	@ 0x8d
 8001482:	2100      	movs	r1, #0
 8001484:	2078      	movs	r0, #120	@ 0x78
 8001486:	f000 fa03 	bl	8001890 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800148a:	2214      	movs	r2, #20
 800148c:	2100      	movs	r1, #0
 800148e:	2078      	movs	r0, #120	@ 0x78
 8001490:	f000 f9fe 	bl	8001890 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001494:	22af      	movs	r2, #175	@ 0xaf
 8001496:	2100      	movs	r1, #0
 8001498:	2078      	movs	r0, #120	@ 0x78
 800149a:	f000 f9f9 	bl	8001890 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800149e:	222e      	movs	r2, #46	@ 0x2e
 80014a0:	2100      	movs	r1, #0
 80014a2:	2078      	movs	r0, #120	@ 0x78
 80014a4:	f000 f9f4 	bl	8001890 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80014a8:	2000      	movs	r0, #0
 80014aa:	f000 f843 	bl	8001534 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80014ae:	f000 f813 	bl	80014d8 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80014b2:	4b08      	ldr	r3, [pc, #32]	@ (80014d4 <SSD1306_Init+0x184>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80014b8:	4b06      	ldr	r3, [pc, #24]	@ (80014d4 <SSD1306_Init+0x184>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80014be:	4b05      	ldr	r3, [pc, #20]	@ (80014d4 <SSD1306_Init+0x184>)
 80014c0:	2201      	movs	r2, #1
 80014c2:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80014c4:	2301      	movs	r3, #1
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	2000009c 	.word	0x2000009c
 80014d4:	2000056c 	.word	0x2000056c

080014d8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80014de:	2300      	movs	r3, #0
 80014e0:	71fb      	strb	r3, [r7, #7]
 80014e2:	e01d      	b.n	8001520 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	3b50      	subs	r3, #80	@ 0x50
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	461a      	mov	r2, r3
 80014ec:	2100      	movs	r1, #0
 80014ee:	2078      	movs	r0, #120	@ 0x78
 80014f0:	f000 f9ce 	bl	8001890 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80014f4:	2200      	movs	r2, #0
 80014f6:	2100      	movs	r1, #0
 80014f8:	2078      	movs	r0, #120	@ 0x78
 80014fa:	f000 f9c9 	bl	8001890 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80014fe:	2210      	movs	r2, #16
 8001500:	2100      	movs	r1, #0
 8001502:	2078      	movs	r0, #120	@ 0x78
 8001504:	f000 f9c4 	bl	8001890 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	01db      	lsls	r3, r3, #7
 800150c:	4a08      	ldr	r2, [pc, #32]	@ (8001530 <SSD1306_UpdateScreen+0x58>)
 800150e:	441a      	add	r2, r3
 8001510:	2380      	movs	r3, #128	@ 0x80
 8001512:	2140      	movs	r1, #64	@ 0x40
 8001514:	2078      	movs	r0, #120	@ 0x78
 8001516:	f000 f955 	bl	80017c4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	3301      	adds	r3, #1
 800151e:	71fb      	strb	r3, [r7, #7]
 8001520:	79fb      	ldrb	r3, [r7, #7]
 8001522:	2b07      	cmp	r3, #7
 8001524:	d9de      	bls.n	80014e4 <SSD1306_UpdateScreen+0xc>
	}
}
 8001526:	bf00      	nop
 8001528:	bf00      	nop
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	2000016c 	.word	0x2000016c

08001534 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d101      	bne.n	8001548 <SSD1306_Fill+0x14>
 8001544:	2300      	movs	r3, #0
 8001546:	e000      	b.n	800154a <SSD1306_Fill+0x16>
 8001548:	23ff      	movs	r3, #255	@ 0xff
 800154a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800154e:	4619      	mov	r1, r3
 8001550:	4803      	ldr	r0, [pc, #12]	@ (8001560 <SSD1306_Fill+0x2c>)
 8001552:	f005 fc03 	bl	8006d5c <memset>
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	2000016c 	.word	0x2000016c

08001564 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	80fb      	strh	r3, [r7, #6]
 800156e:	460b      	mov	r3, r1
 8001570:	80bb      	strh	r3, [r7, #4]
 8001572:	4613      	mov	r3, r2
 8001574:	70fb      	strb	r3, [r7, #3]
	if (
 8001576:	88fb      	ldrh	r3, [r7, #6]
 8001578:	2b7f      	cmp	r3, #127	@ 0x7f
 800157a:	d848      	bhi.n	800160e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800157c:	88bb      	ldrh	r3, [r7, #4]
 800157e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001580:	d845      	bhi.n	800160e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001582:	4b26      	ldr	r3, [pc, #152]	@ (800161c <SSD1306_DrawPixel+0xb8>)
 8001584:	791b      	ldrb	r3, [r3, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d006      	beq.n	8001598 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800158a:	78fb      	ldrb	r3, [r7, #3]
 800158c:	2b00      	cmp	r3, #0
 800158e:	bf0c      	ite	eq
 8001590:	2301      	moveq	r3, #1
 8001592:	2300      	movne	r3, #0
 8001594:	b2db      	uxtb	r3, r3
 8001596:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001598:	78fb      	ldrb	r3, [r7, #3]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d11a      	bne.n	80015d4 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800159e:	88fa      	ldrh	r2, [r7, #6]
 80015a0:	88bb      	ldrh	r3, [r7, #4]
 80015a2:	08db      	lsrs	r3, r3, #3
 80015a4:	b298      	uxth	r0, r3
 80015a6:	4603      	mov	r3, r0
 80015a8:	01db      	lsls	r3, r3, #7
 80015aa:	4413      	add	r3, r2
 80015ac:	4a1c      	ldr	r2, [pc, #112]	@ (8001620 <SSD1306_DrawPixel+0xbc>)
 80015ae:	5cd3      	ldrb	r3, [r2, r3]
 80015b0:	b25a      	sxtb	r2, r3
 80015b2:	88bb      	ldrh	r3, [r7, #4]
 80015b4:	f003 0307 	and.w	r3, r3, #7
 80015b8:	2101      	movs	r1, #1
 80015ba:	fa01 f303 	lsl.w	r3, r1, r3
 80015be:	b25b      	sxtb	r3, r3
 80015c0:	4313      	orrs	r3, r2
 80015c2:	b259      	sxtb	r1, r3
 80015c4:	88fa      	ldrh	r2, [r7, #6]
 80015c6:	4603      	mov	r3, r0
 80015c8:	01db      	lsls	r3, r3, #7
 80015ca:	4413      	add	r3, r2
 80015cc:	b2c9      	uxtb	r1, r1
 80015ce:	4a14      	ldr	r2, [pc, #80]	@ (8001620 <SSD1306_DrawPixel+0xbc>)
 80015d0:	54d1      	strb	r1, [r2, r3]
 80015d2:	e01d      	b.n	8001610 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80015d4:	88fa      	ldrh	r2, [r7, #6]
 80015d6:	88bb      	ldrh	r3, [r7, #4]
 80015d8:	08db      	lsrs	r3, r3, #3
 80015da:	b298      	uxth	r0, r3
 80015dc:	4603      	mov	r3, r0
 80015de:	01db      	lsls	r3, r3, #7
 80015e0:	4413      	add	r3, r2
 80015e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001620 <SSD1306_DrawPixel+0xbc>)
 80015e4:	5cd3      	ldrb	r3, [r2, r3]
 80015e6:	b25a      	sxtb	r2, r3
 80015e8:	88bb      	ldrh	r3, [r7, #4]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	2101      	movs	r1, #1
 80015f0:	fa01 f303 	lsl.w	r3, r1, r3
 80015f4:	b25b      	sxtb	r3, r3
 80015f6:	43db      	mvns	r3, r3
 80015f8:	b25b      	sxtb	r3, r3
 80015fa:	4013      	ands	r3, r2
 80015fc:	b259      	sxtb	r1, r3
 80015fe:	88fa      	ldrh	r2, [r7, #6]
 8001600:	4603      	mov	r3, r0
 8001602:	01db      	lsls	r3, r3, #7
 8001604:	4413      	add	r3, r2
 8001606:	b2c9      	uxtb	r1, r1
 8001608:	4a05      	ldr	r2, [pc, #20]	@ (8001620 <SSD1306_DrawPixel+0xbc>)
 800160a:	54d1      	strb	r1, [r2, r3]
 800160c:	e000      	b.n	8001610 <SSD1306_DrawPixel+0xac>
		return;
 800160e:	bf00      	nop
	}
}
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	2000056c 	.word	0x2000056c
 8001620:	2000016c 	.word	0x2000016c

08001624 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	460a      	mov	r2, r1
 800162e:	80fb      	strh	r3, [r7, #6]
 8001630:	4613      	mov	r3, r2
 8001632:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001634:	4a05      	ldr	r2, [pc, #20]	@ (800164c <SSD1306_GotoXY+0x28>)
 8001636:	88fb      	ldrh	r3, [r7, #6]
 8001638:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800163a:	4a04      	ldr	r2, [pc, #16]	@ (800164c <SSD1306_GotoXY+0x28>)
 800163c:	88bb      	ldrh	r3, [r7, #4]
 800163e:	8053      	strh	r3, [r2, #2]
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	2000056c 	.word	0x2000056c

08001650 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	4603      	mov	r3, r0
 8001658:	6039      	str	r1, [r7, #0]
 800165a:	71fb      	strb	r3, [r7, #7]
 800165c:	4613      	mov	r3, r2
 800165e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001660:	4b39      	ldr	r3, [pc, #228]	@ (8001748 <SSD1306_Putc+0xf8>)
 8001662:	881b      	ldrh	r3, [r3, #0]
 8001664:	461a      	mov	r2, r3
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	4413      	add	r3, r2
	if (
 800166c:	2b7f      	cmp	r3, #127	@ 0x7f
 800166e:	dc07      	bgt.n	8001680 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001670:	4b35      	ldr	r3, [pc, #212]	@ (8001748 <SSD1306_Putc+0xf8>)
 8001672:	885b      	ldrh	r3, [r3, #2]
 8001674:	461a      	mov	r2, r3
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	785b      	ldrb	r3, [r3, #1]
 800167a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800167c:	2b3f      	cmp	r3, #63	@ 0x3f
 800167e:	dd01      	ble.n	8001684 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001680:	2300      	movs	r3, #0
 8001682:	e05d      	b.n	8001740 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	e04b      	b.n	8001722 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685a      	ldr	r2, [r3, #4]
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	3b20      	subs	r3, #32
 8001692:	6839      	ldr	r1, [r7, #0]
 8001694:	7849      	ldrb	r1, [r1, #1]
 8001696:	fb01 f303 	mul.w	r3, r1, r3
 800169a:	4619      	mov	r1, r3
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	440b      	add	r3, r1
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	4413      	add	r3, r2
 80016a4:	881b      	ldrh	r3, [r3, #0]
 80016a6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80016a8:	2300      	movs	r3, #0
 80016aa:	613b      	str	r3, [r7, #16]
 80016ac:	e030      	b.n	8001710 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d010      	beq.n	80016e0 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80016be:	4b22      	ldr	r3, [pc, #136]	@ (8001748 <SSD1306_Putc+0xf8>)
 80016c0:	881a      	ldrh	r2, [r3, #0]
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	4413      	add	r3, r2
 80016c8:	b298      	uxth	r0, r3
 80016ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001748 <SSD1306_Putc+0xf8>)
 80016cc:	885a      	ldrh	r2, [r3, #2]
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	4413      	add	r3, r2
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	79ba      	ldrb	r2, [r7, #6]
 80016d8:	4619      	mov	r1, r3
 80016da:	f7ff ff43 	bl	8001564 <SSD1306_DrawPixel>
 80016de:	e014      	b.n	800170a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80016e0:	4b19      	ldr	r3, [pc, #100]	@ (8001748 <SSD1306_Putc+0xf8>)
 80016e2:	881a      	ldrh	r2, [r3, #0]
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	4413      	add	r3, r2
 80016ea:	b298      	uxth	r0, r3
 80016ec:	4b16      	ldr	r3, [pc, #88]	@ (8001748 <SSD1306_Putc+0xf8>)
 80016ee:	885a      	ldrh	r2, [r3, #2]
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	4413      	add	r3, r2
 80016f6:	b299      	uxth	r1, r3
 80016f8:	79bb      	ldrb	r3, [r7, #6]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	bf0c      	ite	eq
 80016fe:	2301      	moveq	r3, #1
 8001700:	2300      	movne	r3, #0
 8001702:	b2db      	uxtb	r3, r3
 8001704:	461a      	mov	r2, r3
 8001706:	f7ff ff2d 	bl	8001564 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	3301      	adds	r3, #1
 800170e:	613b      	str	r3, [r7, #16]
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	461a      	mov	r2, r3
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	4293      	cmp	r3, r2
 800171a:	d3c8      	bcc.n	80016ae <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	3301      	adds	r3, #1
 8001720:	617b      	str	r3, [r7, #20]
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	785b      	ldrb	r3, [r3, #1]
 8001726:	461a      	mov	r2, r3
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	4293      	cmp	r3, r2
 800172c:	d3ad      	bcc.n	800168a <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800172e:	4b06      	ldr	r3, [pc, #24]	@ (8001748 <SSD1306_Putc+0xf8>)
 8001730:	881b      	ldrh	r3, [r3, #0]
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	7812      	ldrb	r2, [r2, #0]
 8001736:	4413      	add	r3, r2
 8001738:	b29a      	uxth	r2, r3
 800173a:	4b03      	ldr	r3, [pc, #12]	@ (8001748 <SSD1306_Putc+0xf8>)
 800173c:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 800173e:	79fb      	ldrb	r3, [r7, #7]
}
 8001740:	4618      	mov	r0, r3
 8001742:	3718      	adds	r7, #24
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	2000056c 	.word	0x2000056c

0800174c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	4613      	mov	r3, r2
 8001758:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800175a:	e012      	b.n	8001782 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	79fa      	ldrb	r2, [r7, #7]
 8001762:	68b9      	ldr	r1, [r7, #8]
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ff73 	bl	8001650 <SSD1306_Putc>
 800176a:	4603      	mov	r3, r0
 800176c:	461a      	mov	r2, r3
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	429a      	cmp	r2, r3
 8001774:	d002      	beq.n	800177c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	e008      	b.n	800178e <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	3301      	adds	r3, #1
 8001780:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1e8      	bne.n	800175c <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	781b      	ldrb	r3, [r3, #0]
}
 800178e:	4618      	mov	r0, r3
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800179e:	4b08      	ldr	r3, [pc, #32]	@ (80017c0 <ssd1306_I2C_Init+0x28>)
 80017a0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80017a2:	e002      	b.n	80017aa <ssd1306_I2C_Init+0x12>
		p--;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3b01      	subs	r3, #1
 80017a8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d1f9      	bne.n	80017a4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80017b0:	bf00      	nop
 80017b2:	bf00      	nop
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	0003d090 	.word	0x0003d090

080017c4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80017c4:	b590      	push	{r4, r7, lr}
 80017c6:	b0c7      	sub	sp, #284	@ 0x11c
 80017c8:	af02      	add	r7, sp, #8
 80017ca:	4604      	mov	r4, r0
 80017cc:	4608      	mov	r0, r1
 80017ce:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80017d2:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80017d6:	600a      	str	r2, [r1, #0]
 80017d8:	4619      	mov	r1, r3
 80017da:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80017de:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80017e2:	4622      	mov	r2, r4
 80017e4:	701a      	strb	r2, [r3, #0]
 80017e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80017ea:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80017ee:	4602      	mov	r2, r0
 80017f0:	701a      	strb	r2, [r3, #0]
 80017f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80017f6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80017fa:	460a      	mov	r2, r1
 80017fc:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80017fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001802:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001806:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800180a:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 800180e:	7812      	ldrb	r2, [r2, #0]
 8001810:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001812:	2300      	movs	r3, #0
 8001814:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001818:	e015      	b.n	8001846 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800181a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800181e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001822:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001826:	6812      	ldr	r2, [r2, #0]
 8001828:	441a      	add	r2, r3
 800182a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800182e:	3301      	adds	r3, #1
 8001830:	7811      	ldrb	r1, [r2, #0]
 8001832:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001836:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800183a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800183c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001840:	3301      	adds	r3, #1
 8001842:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001846:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800184a:	b29b      	uxth	r3, r3
 800184c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001850:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001854:	8812      	ldrh	r2, [r2, #0]
 8001856:	429a      	cmp	r2, r3
 8001858:	d8df      	bhi.n	800181a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800185a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800185e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	b299      	uxth	r1, r3
 8001866:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800186a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800186e:	881b      	ldrh	r3, [r3, #0]
 8001870:	3301      	adds	r3, #1
 8001872:	b29b      	uxth	r3, r3
 8001874:	f107 020c 	add.w	r2, r7, #12
 8001878:	200a      	movs	r0, #10
 800187a:	9000      	str	r0, [sp, #0]
 800187c:	4803      	ldr	r0, [pc, #12]	@ (800188c <ssd1306_I2C_WriteMulti+0xc8>)
 800187e:	f000 fd9f 	bl	80023c0 <HAL_I2C_Master_Transmit>
}
 8001882:	bf00      	nop
 8001884:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001888:	46bd      	mov	sp, r7
 800188a:	bd90      	pop	{r4, r7, pc}
 800188c:	2000009c 	.word	0x2000009c

08001890 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af02      	add	r7, sp, #8
 8001896:	4603      	mov	r3, r0
 8001898:	71fb      	strb	r3, [r7, #7]
 800189a:	460b      	mov	r3, r1
 800189c:	71bb      	strb	r3, [r7, #6]
 800189e:	4613      	mov	r3, r2
 80018a0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80018a2:	79bb      	ldrb	r3, [r7, #6]
 80018a4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80018a6:	797b      	ldrb	r3, [r7, #5]
 80018a8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	b299      	uxth	r1, r3
 80018ae:	f107 020c 	add.w	r2, r7, #12
 80018b2:	230a      	movs	r3, #10
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	2302      	movs	r3, #2
 80018b8:	4803      	ldr	r0, [pc, #12]	@ (80018c8 <ssd1306_I2C_Write+0x38>)
 80018ba:	f000 fd81 	bl	80023c0 <HAL_I2C_Master_Transmit>
}
 80018be:	bf00      	nop
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	2000009c 	.word	0x2000009c

080018cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	607b      	str	r3, [r7, #4]
 80018d6:	4b10      	ldr	r3, [pc, #64]	@ (8001918 <HAL_MspInit+0x4c>)
 80018d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018da:	4a0f      	ldr	r2, [pc, #60]	@ (8001918 <HAL_MspInit+0x4c>)
 80018dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80018e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001918 <HAL_MspInit+0x4c>)
 80018e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018ea:	607b      	str	r3, [r7, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	603b      	str	r3, [r7, #0]
 80018f2:	4b09      	ldr	r3, [pc, #36]	@ (8001918 <HAL_MspInit+0x4c>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f6:	4a08      	ldr	r2, [pc, #32]	@ (8001918 <HAL_MspInit+0x4c>)
 80018f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80018fe:	4b06      	ldr	r3, [pc, #24]	@ (8001918 <HAL_MspInit+0x4c>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001902:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001906:	603b      	str	r3, [r7, #0]
 8001908:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	40023800 	.word	0x40023800

0800191c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08a      	sub	sp, #40	@ 0x28
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a19      	ldr	r2, [pc, #100]	@ (80019a0 <HAL_I2C_MspInit+0x84>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d12c      	bne.n	8001998 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	4b18      	ldr	r3, [pc, #96]	@ (80019a4 <HAL_I2C_MspInit+0x88>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001946:	4a17      	ldr	r2, [pc, #92]	@ (80019a4 <HAL_I2C_MspInit+0x88>)
 8001948:	f043 0302 	orr.w	r3, r3, #2
 800194c:	6313      	str	r3, [r2, #48]	@ 0x30
 800194e:	4b15      	ldr	r3, [pc, #84]	@ (80019a4 <HAL_I2C_MspInit+0x88>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800195a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800195e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001960:	2312      	movs	r3, #18
 8001962:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001968:	2303      	movs	r3, #3
 800196a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800196c:	2304      	movs	r3, #4
 800196e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001970:	f107 0314 	add.w	r3, r7, #20
 8001974:	4619      	mov	r1, r3
 8001976:	480c      	ldr	r0, [pc, #48]	@ (80019a8 <HAL_I2C_MspInit+0x8c>)
 8001978:	f000 fa28 	bl	8001dcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800197c:	2300      	movs	r3, #0
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	4b08      	ldr	r3, [pc, #32]	@ (80019a4 <HAL_I2C_MspInit+0x88>)
 8001982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001984:	4a07      	ldr	r2, [pc, #28]	@ (80019a4 <HAL_I2C_MspInit+0x88>)
 8001986:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800198a:	6413      	str	r3, [r2, #64]	@ 0x40
 800198c:	4b05      	ldr	r3, [pc, #20]	@ (80019a4 <HAL_I2C_MspInit+0x88>)
 800198e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001990:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001998:	bf00      	nop
 800199a:	3728      	adds	r7, #40	@ 0x28
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40005400 	.word	0x40005400
 80019a4:	40023800 	.word	0x40023800
 80019a8:	40020400 	.word	0x40020400

080019ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a0b      	ldr	r2, [pc, #44]	@ (80019e8 <HAL_TIM_Base_MspInit+0x3c>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d10d      	bne.n	80019da <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	4b0a      	ldr	r3, [pc, #40]	@ (80019ec <HAL_TIM_Base_MspInit+0x40>)
 80019c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c6:	4a09      	ldr	r2, [pc, #36]	@ (80019ec <HAL_TIM_Base_MspInit+0x40>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80019ce:	4b07      	ldr	r3, [pc, #28]	@ (80019ec <HAL_TIM_Base_MspInit+0x40>)
 80019d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80019da:	bf00      	nop
 80019dc:	3714      	adds	r7, #20
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	40010000 	.word	0x40010000
 80019ec:	40023800 	.word	0x40023800

080019f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08e      	sub	sp, #56	@ 0x38
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80019f8:	2300      	movs	r3, #0
 80019fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80019fc:	2300      	movs	r3, #0
 80019fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001a00:	2300      	movs	r3, #0
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	4b34      	ldr	r3, [pc, #208]	@ (8001ad8 <HAL_InitTick+0xe8>)
 8001a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a08:	4a33      	ldr	r2, [pc, #204]	@ (8001ad8 <HAL_InitTick+0xe8>)
 8001a0a:	f043 0301 	orr.w	r3, r3, #1
 8001a0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a10:	4b31      	ldr	r3, [pc, #196]	@ (8001ad8 <HAL_InitTick+0xe8>)
 8001a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a1c:	f107 0210 	add.w	r2, r7, #16
 8001a20:	f107 0314 	add.w	r3, r7, #20
 8001a24:	4611      	mov	r1, r2
 8001a26:	4618      	mov	r0, r3
 8001a28:	f001 fd96 	bl	8003558 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001a2c:	6a3b      	ldr	r3, [r7, #32]
 8001a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d103      	bne.n	8001a3e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001a36:	f001 fd7b 	bl	8003530 <HAL_RCC_GetPCLK1Freq>
 8001a3a:	6378      	str	r0, [r7, #52]	@ 0x34
 8001a3c:	e004      	b.n	8001a48 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001a3e:	f001 fd77 	bl	8003530 <HAL_RCC_GetPCLK1Freq>
 8001a42:	4603      	mov	r3, r0
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a4a:	4a24      	ldr	r2, [pc, #144]	@ (8001adc <HAL_InitTick+0xec>)
 8001a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a50:	0c9b      	lsrs	r3, r3, #18
 8001a52:	3b01      	subs	r3, #1
 8001a54:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001a56:	4b22      	ldr	r3, [pc, #136]	@ (8001ae0 <HAL_InitTick+0xf0>)
 8001a58:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a5c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001a5e:	4b20      	ldr	r3, [pc, #128]	@ (8001ae0 <HAL_InitTick+0xf0>)
 8001a60:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a64:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001a66:	4a1e      	ldr	r2, [pc, #120]	@ (8001ae0 <HAL_InitTick+0xf0>)
 8001a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a6a:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001a6c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ae0 <HAL_InitTick+0xf0>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a72:	4b1b      	ldr	r3, [pc, #108]	@ (8001ae0 <HAL_InitTick+0xf0>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a78:	4b19      	ldr	r3, [pc, #100]	@ (8001ae0 <HAL_InitTick+0xf0>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001a7e:	4818      	ldr	r0, [pc, #96]	@ (8001ae0 <HAL_InitTick+0xf0>)
 8001a80:	f001 fd9c 	bl	80035bc <HAL_TIM_Base_Init>
 8001a84:	4603      	mov	r3, r0
 8001a86:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001a8a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d11b      	bne.n	8001aca <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001a92:	4813      	ldr	r0, [pc, #76]	@ (8001ae0 <HAL_InitTick+0xf0>)
 8001a94:	f001 fde2 	bl	800365c <HAL_TIM_Base_Start_IT>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001a9e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d111      	bne.n	8001aca <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001aa6:	201c      	movs	r0, #28
 8001aa8:	f000 f982 	bl	8001db0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b0f      	cmp	r3, #15
 8001ab0:	d808      	bhi.n	8001ac4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	6879      	ldr	r1, [r7, #4]
 8001ab6:	201c      	movs	r0, #28
 8001ab8:	f000 f95e 	bl	8001d78 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001abc:	4a09      	ldr	r2, [pc, #36]	@ (8001ae4 <HAL_InitTick+0xf4>)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6013      	str	r3, [r2, #0]
 8001ac2:	e002      	b.n	8001aca <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001aca:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3738      	adds	r7, #56	@ 0x38
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	431bde83 	.word	0x431bde83
 8001ae0:	20000574 	.word	0x20000574
 8001ae4:	2000001c 	.word	0x2000001c

08001ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001aec:	bf00      	nop
 8001aee:	e7fd      	b.n	8001aec <NMI_Handler+0x4>

08001af0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001af4:	bf00      	nop
 8001af6:	e7fd      	b.n	8001af4 <HardFault_Handler+0x4>

08001af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001afc:	bf00      	nop
 8001afe:	e7fd      	b.n	8001afc <MemManage_Handler+0x4>

08001b00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b04:	bf00      	nop
 8001b06:	e7fd      	b.n	8001b04 <BusFault_Handler+0x4>

08001b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b0c:	bf00      	nop
 8001b0e:	e7fd      	b.n	8001b0c <UsageFault_Handler+0x4>

08001b10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
	...

08001b20 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b24:	4802      	ldr	r0, [pc, #8]	@ (8001b30 <TIM2_IRQHandler+0x10>)
 8001b26:	f001 fdfb 	bl	8003720 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000574 	.word	0x20000574

08001b34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b38:	4b06      	ldr	r3, [pc, #24]	@ (8001b54 <SystemInit+0x20>)
 8001b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b3e:	4a05      	ldr	r2, [pc, #20]	@ (8001b54 <SystemInit+0x20>)
 8001b40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b90 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b5c:	f7ff ffea 	bl	8001b34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b60:	480c      	ldr	r0, [pc, #48]	@ (8001b94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b62:	490d      	ldr	r1, [pc, #52]	@ (8001b98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b64:	4a0d      	ldr	r2, [pc, #52]	@ (8001b9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b68:	e002      	b.n	8001b70 <LoopCopyDataInit>

08001b6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b6e:	3304      	adds	r3, #4

08001b70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b74:	d3f9      	bcc.n	8001b6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b76:	4a0a      	ldr	r2, [pc, #40]	@ (8001ba0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b78:	4c0a      	ldr	r4, [pc, #40]	@ (8001ba4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b7c:	e001      	b.n	8001b82 <LoopFillZerobss>

08001b7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b80:	3204      	adds	r2, #4

08001b82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b84:	d3fb      	bcc.n	8001b7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b86:	f005 f8f1 	bl	8006d6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b8a:	f7ff fb71 	bl	8001270 <main>
  bx  lr    
 8001b8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b90:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001b94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b98:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001b9c:	080097c4 	.word	0x080097c4
  ldr r2, =_sbss
 8001ba0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001ba4:	2000f8b0 	.word	0x2000f8b0

08001ba8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ba8:	e7fe      	b.n	8001ba8 <ADC_IRQHandler>
	...

08001bac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	@ (8001bec <HAL_Init+0x40>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a0d      	ldr	r2, [pc, #52]	@ (8001bec <HAL_Init+0x40>)
 8001bb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001bec <HAL_Init+0x40>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a0a      	ldr	r2, [pc, #40]	@ (8001bec <HAL_Init+0x40>)
 8001bc2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bc8:	4b08      	ldr	r3, [pc, #32]	@ (8001bec <HAL_Init+0x40>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a07      	ldr	r2, [pc, #28]	@ (8001bec <HAL_Init+0x40>)
 8001bce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd4:	2003      	movs	r0, #3
 8001bd6:	f000 f8c4 	bl	8001d62 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bda:	200f      	movs	r0, #15
 8001bdc:	f7ff ff08 	bl	80019f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001be0:	f7ff fe74 	bl	80018cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40023c00 	.word	0x40023c00

08001bf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf4:	4b03      	ldr	r3, [pc, #12]	@ (8001c04 <HAL_GetTick+0x14>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	200005bc 	.word	0x200005bc

08001c08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c18:	4b0c      	ldr	r3, [pc, #48]	@ (8001c4c <__NVIC_SetPriorityGrouping+0x44>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c1e:	68ba      	ldr	r2, [r7, #8]
 8001c20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c24:	4013      	ands	r3, r2
 8001c26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c3a:	4a04      	ldr	r2, [pc, #16]	@ (8001c4c <__NVIC_SetPriorityGrouping+0x44>)
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	60d3      	str	r3, [r2, #12]
}
 8001c40:	bf00      	nop
 8001c42:	3714      	adds	r7, #20
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	e000ed00 	.word	0xe000ed00

08001c50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c54:	4b04      	ldr	r3, [pc, #16]	@ (8001c68 <__NVIC_GetPriorityGrouping+0x18>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	0a1b      	lsrs	r3, r3, #8
 8001c5a:	f003 0307 	and.w	r3, r3, #7
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	e000ed00 	.word	0xe000ed00

08001c6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	db0b      	blt.n	8001c96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c7e:	79fb      	ldrb	r3, [r7, #7]
 8001c80:	f003 021f 	and.w	r2, r3, #31
 8001c84:	4907      	ldr	r1, [pc, #28]	@ (8001ca4 <__NVIC_EnableIRQ+0x38>)
 8001c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8a:	095b      	lsrs	r3, r3, #5
 8001c8c:	2001      	movs	r0, #1
 8001c8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	e000e100 	.word	0xe000e100

08001ca8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	6039      	str	r1, [r7, #0]
 8001cb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	db0a      	blt.n	8001cd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	b2da      	uxtb	r2, r3
 8001cc0:	490c      	ldr	r1, [pc, #48]	@ (8001cf4 <__NVIC_SetPriority+0x4c>)
 8001cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc6:	0112      	lsls	r2, r2, #4
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	440b      	add	r3, r1
 8001ccc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cd0:	e00a      	b.n	8001ce8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	4908      	ldr	r1, [pc, #32]	@ (8001cf8 <__NVIC_SetPriority+0x50>)
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	f003 030f 	and.w	r3, r3, #15
 8001cde:	3b04      	subs	r3, #4
 8001ce0:	0112      	lsls	r2, r2, #4
 8001ce2:	b2d2      	uxtb	r2, r2
 8001ce4:	440b      	add	r3, r1
 8001ce6:	761a      	strb	r2, [r3, #24]
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	e000e100 	.word	0xe000e100
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b089      	sub	sp, #36	@ 0x24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	f1c3 0307 	rsb	r3, r3, #7
 8001d16:	2b04      	cmp	r3, #4
 8001d18:	bf28      	it	cs
 8001d1a:	2304      	movcs	r3, #4
 8001d1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	3304      	adds	r3, #4
 8001d22:	2b06      	cmp	r3, #6
 8001d24:	d902      	bls.n	8001d2c <NVIC_EncodePriority+0x30>
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	3b03      	subs	r3, #3
 8001d2a:	e000      	b.n	8001d2e <NVIC_EncodePriority+0x32>
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d30:	f04f 32ff 	mov.w	r2, #4294967295
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	43da      	mvns	r2, r3
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	401a      	ands	r2, r3
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d44:	f04f 31ff 	mov.w	r1, #4294967295
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4e:	43d9      	mvns	r1, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d54:	4313      	orrs	r3, r2
         );
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3724      	adds	r7, #36	@ 0x24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b082      	sub	sp, #8
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f7ff ff4c 	bl	8001c08 <__NVIC_SetPriorityGrouping>
}
 8001d70:	bf00      	nop
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
 8001d84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d8a:	f7ff ff61 	bl	8001c50 <__NVIC_GetPriorityGrouping>
 8001d8e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	68b9      	ldr	r1, [r7, #8]
 8001d94:	6978      	ldr	r0, [r7, #20]
 8001d96:	f7ff ffb1 	bl	8001cfc <NVIC_EncodePriority>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001da0:	4611      	mov	r1, r2
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff ff80 	bl	8001ca8 <__NVIC_SetPriority>
}
 8001da8:	bf00      	nop
 8001daa:	3718      	adds	r7, #24
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff ff54 	bl	8001c6c <__NVIC_EnableIRQ>
}
 8001dc4:	bf00      	nop
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b089      	sub	sp, #36	@ 0x24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dde:	2300      	movs	r3, #0
 8001de0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001de2:	2300      	movs	r3, #0
 8001de4:	61fb      	str	r3, [r7, #28]
 8001de6:	e159      	b.n	800209c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001de8:	2201      	movs	r2, #1
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	f040 8148 	bne.w	8002096 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f003 0303 	and.w	r3, r3, #3
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d005      	beq.n	8001e1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d130      	bne.n	8001e80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	2203      	movs	r2, #3
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	4013      	ands	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	68da      	ldr	r2, [r3, #12]
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e54:	2201      	movs	r2, #1
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4013      	ands	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	091b      	lsrs	r3, r3, #4
 8001e6a:	f003 0201 	and.w	r2, r3, #1
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f003 0303 	and.w	r3, r3, #3
 8001e88:	2b03      	cmp	r3, #3
 8001e8a:	d017      	beq.n	8001ebc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	2203      	movs	r2, #3
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f003 0303 	and.w	r3, r3, #3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d123      	bne.n	8001f10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	08da      	lsrs	r2, r3, #3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	3208      	adds	r2, #8
 8001ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	220f      	movs	r2, #15
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	691a      	ldr	r2, [r3, #16]
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	08da      	lsrs	r2, r3, #3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	3208      	adds	r2, #8
 8001f0a:	69b9      	ldr	r1, [r7, #24]
 8001f0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	2203      	movs	r2, #3
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	43db      	mvns	r3, r3
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4013      	ands	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 0203 	and.w	r2, r3, #3
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	f000 80a2 	beq.w	8002096 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	4b57      	ldr	r3, [pc, #348]	@ (80020b4 <HAL_GPIO_Init+0x2e8>)
 8001f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f5a:	4a56      	ldr	r2, [pc, #344]	@ (80020b4 <HAL_GPIO_Init+0x2e8>)
 8001f5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f60:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f62:	4b54      	ldr	r3, [pc, #336]	@ (80020b4 <HAL_GPIO_Init+0x2e8>)
 8001f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f6e:	4a52      	ldr	r2, [pc, #328]	@ (80020b8 <HAL_GPIO_Init+0x2ec>)
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	089b      	lsrs	r3, r3, #2
 8001f74:	3302      	adds	r3, #2
 8001f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	f003 0303 	and.w	r3, r3, #3
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	220f      	movs	r2, #15
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a49      	ldr	r2, [pc, #292]	@ (80020bc <HAL_GPIO_Init+0x2f0>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d019      	beq.n	8001fce <HAL_GPIO_Init+0x202>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a48      	ldr	r2, [pc, #288]	@ (80020c0 <HAL_GPIO_Init+0x2f4>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d013      	beq.n	8001fca <HAL_GPIO_Init+0x1fe>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a47      	ldr	r2, [pc, #284]	@ (80020c4 <HAL_GPIO_Init+0x2f8>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d00d      	beq.n	8001fc6 <HAL_GPIO_Init+0x1fa>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a46      	ldr	r2, [pc, #280]	@ (80020c8 <HAL_GPIO_Init+0x2fc>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d007      	beq.n	8001fc2 <HAL_GPIO_Init+0x1f6>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a45      	ldr	r2, [pc, #276]	@ (80020cc <HAL_GPIO_Init+0x300>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d101      	bne.n	8001fbe <HAL_GPIO_Init+0x1f2>
 8001fba:	2304      	movs	r3, #4
 8001fbc:	e008      	b.n	8001fd0 <HAL_GPIO_Init+0x204>
 8001fbe:	2307      	movs	r3, #7
 8001fc0:	e006      	b.n	8001fd0 <HAL_GPIO_Init+0x204>
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e004      	b.n	8001fd0 <HAL_GPIO_Init+0x204>
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	e002      	b.n	8001fd0 <HAL_GPIO_Init+0x204>
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e000      	b.n	8001fd0 <HAL_GPIO_Init+0x204>
 8001fce:	2300      	movs	r3, #0
 8001fd0:	69fa      	ldr	r2, [r7, #28]
 8001fd2:	f002 0203 	and.w	r2, r2, #3
 8001fd6:	0092      	lsls	r2, r2, #2
 8001fd8:	4093      	lsls	r3, r2
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fe0:	4935      	ldr	r1, [pc, #212]	@ (80020b8 <HAL_GPIO_Init+0x2ec>)
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	089b      	lsrs	r3, r3, #2
 8001fe6:	3302      	adds	r3, #2
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fee:	4b38      	ldr	r3, [pc, #224]	@ (80020d0 <HAL_GPIO_Init+0x304>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	4313      	orrs	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002012:	4a2f      	ldr	r2, [pc, #188]	@ (80020d0 <HAL_GPIO_Init+0x304>)
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002018:	4b2d      	ldr	r3, [pc, #180]	@ (80020d0 <HAL_GPIO_Init+0x304>)
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	43db      	mvns	r3, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4013      	ands	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d003      	beq.n	800203c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	4313      	orrs	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800203c:	4a24      	ldr	r2, [pc, #144]	@ (80020d0 <HAL_GPIO_Init+0x304>)
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002042:	4b23      	ldr	r3, [pc, #140]	@ (80020d0 <HAL_GPIO_Init+0x304>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	43db      	mvns	r3, r3
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	4013      	ands	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d003      	beq.n	8002066 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	4313      	orrs	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002066:	4a1a      	ldr	r2, [pc, #104]	@ (80020d0 <HAL_GPIO_Init+0x304>)
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800206c:	4b18      	ldr	r3, [pc, #96]	@ (80020d0 <HAL_GPIO_Init+0x304>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	43db      	mvns	r3, r3
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	4013      	ands	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d003      	beq.n	8002090 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	4313      	orrs	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002090:	4a0f      	ldr	r2, [pc, #60]	@ (80020d0 <HAL_GPIO_Init+0x304>)
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	3301      	adds	r3, #1
 800209a:	61fb      	str	r3, [r7, #28]
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	2b0f      	cmp	r3, #15
 80020a0:	f67f aea2 	bls.w	8001de8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020a4:	bf00      	nop
 80020a6:	bf00      	nop
 80020a8:	3724      	adds	r7, #36	@ 0x24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	40023800 	.word	0x40023800
 80020b8:	40013800 	.word	0x40013800
 80020bc:	40020000 	.word	0x40020000
 80020c0:	40020400 	.word	0x40020400
 80020c4:	40020800 	.word	0x40020800
 80020c8:	40020c00 	.word	0x40020c00
 80020cc:	40021000 	.word	0x40021000
 80020d0:	40013c00 	.word	0x40013c00

080020d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	460b      	mov	r3, r1
 80020de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	691a      	ldr	r2, [r3, #16]
 80020e4:	887b      	ldrh	r3, [r7, #2]
 80020e6:	4013      	ands	r3, r2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d002      	beq.n	80020f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020ec:	2301      	movs	r3, #1
 80020ee:	73fb      	strb	r3, [r7, #15]
 80020f0:	e001      	b.n	80020f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020f2:	2300      	movs	r3, #0
 80020f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3714      	adds	r7, #20
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	460b      	mov	r3, r1
 800210e:	807b      	strh	r3, [r7, #2]
 8002110:	4613      	mov	r3, r2
 8002112:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002114:	787b      	ldrb	r3, [r7, #1]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d003      	beq.n	8002122 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800211a:	887a      	ldrh	r2, [r7, #2]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002120:	e003      	b.n	800212a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002122:	887b      	ldrh	r3, [r7, #2]
 8002124:	041a      	lsls	r2, r3, #16
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	619a      	str	r2, [r3, #24]
}
 800212a:	bf00      	nop
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
	...

08002138 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e12b      	b.n	80023a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	d106      	bne.n	8002164 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f7ff fbdc 	bl	800191c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2224      	movs	r2, #36	@ 0x24
 8002168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 0201 	bic.w	r2, r2, #1
 800217a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800218a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800219a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800219c:	f001 f9c8 	bl	8003530 <HAL_RCC_GetPCLK1Freq>
 80021a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	4a81      	ldr	r2, [pc, #516]	@ (80023ac <HAL_I2C_Init+0x274>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d807      	bhi.n	80021bc <HAL_I2C_Init+0x84>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	4a80      	ldr	r2, [pc, #512]	@ (80023b0 <HAL_I2C_Init+0x278>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	bf94      	ite	ls
 80021b4:	2301      	movls	r3, #1
 80021b6:	2300      	movhi	r3, #0
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	e006      	b.n	80021ca <HAL_I2C_Init+0x92>
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	4a7d      	ldr	r2, [pc, #500]	@ (80023b4 <HAL_I2C_Init+0x27c>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	bf94      	ite	ls
 80021c4:	2301      	movls	r3, #1
 80021c6:	2300      	movhi	r3, #0
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e0e7      	b.n	80023a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	4a78      	ldr	r2, [pc, #480]	@ (80023b8 <HAL_I2C_Init+0x280>)
 80021d6:	fba2 2303 	umull	r2, r3, r2, r3
 80021da:	0c9b      	lsrs	r3, r3, #18
 80021dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	68ba      	ldr	r2, [r7, #8]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	4a6a      	ldr	r2, [pc, #424]	@ (80023ac <HAL_I2C_Init+0x274>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d802      	bhi.n	800220c <HAL_I2C_Init+0xd4>
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	3301      	adds	r3, #1
 800220a:	e009      	b.n	8002220 <HAL_I2C_Init+0xe8>
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002212:	fb02 f303 	mul.w	r3, r2, r3
 8002216:	4a69      	ldr	r2, [pc, #420]	@ (80023bc <HAL_I2C_Init+0x284>)
 8002218:	fba2 2303 	umull	r2, r3, r2, r3
 800221c:	099b      	lsrs	r3, r3, #6
 800221e:	3301      	adds	r3, #1
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	6812      	ldr	r2, [r2, #0]
 8002224:	430b      	orrs	r3, r1
 8002226:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002232:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	495c      	ldr	r1, [pc, #368]	@ (80023ac <HAL_I2C_Init+0x274>)
 800223c:	428b      	cmp	r3, r1
 800223e:	d819      	bhi.n	8002274 <HAL_I2C_Init+0x13c>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	1e59      	subs	r1, r3, #1
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	fbb1 f3f3 	udiv	r3, r1, r3
 800224e:	1c59      	adds	r1, r3, #1
 8002250:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002254:	400b      	ands	r3, r1
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00a      	beq.n	8002270 <HAL_I2C_Init+0x138>
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	1e59      	subs	r1, r3, #1
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	fbb1 f3f3 	udiv	r3, r1, r3
 8002268:	3301      	adds	r3, #1
 800226a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800226e:	e051      	b.n	8002314 <HAL_I2C_Init+0x1dc>
 8002270:	2304      	movs	r3, #4
 8002272:	e04f      	b.n	8002314 <HAL_I2C_Init+0x1dc>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d111      	bne.n	80022a0 <HAL_I2C_Init+0x168>
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	1e58      	subs	r0, r3, #1
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6859      	ldr	r1, [r3, #4]
 8002284:	460b      	mov	r3, r1
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	440b      	add	r3, r1
 800228a:	fbb0 f3f3 	udiv	r3, r0, r3
 800228e:	3301      	adds	r3, #1
 8002290:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002294:	2b00      	cmp	r3, #0
 8002296:	bf0c      	ite	eq
 8002298:	2301      	moveq	r3, #1
 800229a:	2300      	movne	r3, #0
 800229c:	b2db      	uxtb	r3, r3
 800229e:	e012      	b.n	80022c6 <HAL_I2C_Init+0x18e>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	1e58      	subs	r0, r3, #1
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6859      	ldr	r1, [r3, #4]
 80022a8:	460b      	mov	r3, r1
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	440b      	add	r3, r1
 80022ae:	0099      	lsls	r1, r3, #2
 80022b0:	440b      	add	r3, r1
 80022b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80022b6:	3301      	adds	r3, #1
 80022b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022bc:	2b00      	cmp	r3, #0
 80022be:	bf0c      	ite	eq
 80022c0:	2301      	moveq	r3, #1
 80022c2:	2300      	movne	r3, #0
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <HAL_I2C_Init+0x196>
 80022ca:	2301      	movs	r3, #1
 80022cc:	e022      	b.n	8002314 <HAL_I2C_Init+0x1dc>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d10e      	bne.n	80022f4 <HAL_I2C_Init+0x1bc>
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	1e58      	subs	r0, r3, #1
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6859      	ldr	r1, [r3, #4]
 80022de:	460b      	mov	r3, r1
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	440b      	add	r3, r1
 80022e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80022e8:	3301      	adds	r3, #1
 80022ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022f2:	e00f      	b.n	8002314 <HAL_I2C_Init+0x1dc>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	1e58      	subs	r0, r3, #1
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6859      	ldr	r1, [r3, #4]
 80022fc:	460b      	mov	r3, r1
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	440b      	add	r3, r1
 8002302:	0099      	lsls	r1, r3, #2
 8002304:	440b      	add	r3, r1
 8002306:	fbb0 f3f3 	udiv	r3, r0, r3
 800230a:	3301      	adds	r3, #1
 800230c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002310:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002314:	6879      	ldr	r1, [r7, #4]
 8002316:	6809      	ldr	r1, [r1, #0]
 8002318:	4313      	orrs	r3, r2
 800231a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	69da      	ldr	r2, [r3, #28]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	431a      	orrs	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	430a      	orrs	r2, r1
 8002336:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002342:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	6911      	ldr	r1, [r2, #16]
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	68d2      	ldr	r2, [r2, #12]
 800234e:	4311      	orrs	r1, r2
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	6812      	ldr	r2, [r2, #0]
 8002354:	430b      	orrs	r3, r1
 8002356:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	695a      	ldr	r2, [r3, #20]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	431a      	orrs	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	430a      	orrs	r2, r1
 8002372:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f042 0201 	orr.w	r2, r2, #1
 8002382:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2220      	movs	r2, #32
 800238e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	000186a0 	.word	0x000186a0
 80023b0:	001e847f 	.word	0x001e847f
 80023b4:	003d08ff 	.word	0x003d08ff
 80023b8:	431bde83 	.word	0x431bde83
 80023bc:	10624dd3 	.word	0x10624dd3

080023c0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b088      	sub	sp, #32
 80023c4:	af02      	add	r7, sp, #8
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	607a      	str	r2, [r7, #4]
 80023ca:	461a      	mov	r2, r3
 80023cc:	460b      	mov	r3, r1
 80023ce:	817b      	strh	r3, [r7, #10]
 80023d0:	4613      	mov	r3, r2
 80023d2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023d4:	f7ff fc0c 	bl	8001bf0 <HAL_GetTick>
 80023d8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b20      	cmp	r3, #32
 80023e4:	f040 80e0 	bne.w	80025a8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	2319      	movs	r3, #25
 80023ee:	2201      	movs	r2, #1
 80023f0:	4970      	ldr	r1, [pc, #448]	@ (80025b4 <HAL_I2C_Master_Transmit+0x1f4>)
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f000 fa92 	bl	800291c <I2C_WaitOnFlagUntilTimeout>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80023fe:	2302      	movs	r3, #2
 8002400:	e0d3      	b.n	80025aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002408:	2b01      	cmp	r3, #1
 800240a:	d101      	bne.n	8002410 <HAL_I2C_Master_Transmit+0x50>
 800240c:	2302      	movs	r3, #2
 800240e:	e0cc      	b.n	80025aa <HAL_I2C_Master_Transmit+0x1ea>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b01      	cmp	r3, #1
 8002424:	d007      	beq.n	8002436 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f042 0201 	orr.w	r2, r2, #1
 8002434:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002444:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2221      	movs	r2, #33	@ 0x21
 800244a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2210      	movs	r2, #16
 8002452:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	893a      	ldrh	r2, [r7, #8]
 8002466:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800246c:	b29a      	uxth	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	4a50      	ldr	r2, [pc, #320]	@ (80025b8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002476:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002478:	8979      	ldrh	r1, [r7, #10]
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	6a3a      	ldr	r2, [r7, #32]
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f000 f9ca 	bl	8002818 <I2C_MasterRequestWrite>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e08d      	b.n	80025aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800248e:	2300      	movs	r3, #0
 8002490:	613b      	str	r3, [r7, #16]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	695b      	ldr	r3, [r3, #20]
 8002498:	613b      	str	r3, [r7, #16]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	613b      	str	r3, [r7, #16]
 80024a2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80024a4:	e066      	b.n	8002574 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024a6:	697a      	ldr	r2, [r7, #20]
 80024a8:	6a39      	ldr	r1, [r7, #32]
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	f000 fb50 	bl	8002b50 <I2C_WaitOnTXEFlagUntilTimeout>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d00d      	beq.n	80024d2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	d107      	bne.n	80024ce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e06b      	b.n	80025aa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d6:	781a      	ldrb	r2, [r3, #0]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e2:	1c5a      	adds	r2, r3, #1
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	3b01      	subs	r3, #1
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024fa:	3b01      	subs	r3, #1
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	695b      	ldr	r3, [r3, #20]
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b04      	cmp	r3, #4
 800250e:	d11b      	bne.n	8002548 <HAL_I2C_Master_Transmit+0x188>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002514:	2b00      	cmp	r3, #0
 8002516:	d017      	beq.n	8002548 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251c:	781a      	ldrb	r2, [r3, #0]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002528:	1c5a      	adds	r2, r3, #1
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002532:	b29b      	uxth	r3, r3
 8002534:	3b01      	subs	r3, #1
 8002536:	b29a      	uxth	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002540:	3b01      	subs	r3, #1
 8002542:	b29a      	uxth	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002548:	697a      	ldr	r2, [r7, #20]
 800254a:	6a39      	ldr	r1, [r7, #32]
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	f000 fb47 	bl	8002be0 <I2C_WaitOnBTFFlagUntilTimeout>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00d      	beq.n	8002574 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255c:	2b04      	cmp	r3, #4
 800255e:	d107      	bne.n	8002570 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800256e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e01a      	b.n	80025aa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002578:	2b00      	cmp	r3, #0
 800257a:	d194      	bne.n	80024a6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800258a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2220      	movs	r2, #32
 8002590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80025a4:	2300      	movs	r3, #0
 80025a6:	e000      	b.n	80025aa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80025a8:	2302      	movs	r3, #2
  }
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3718      	adds	r7, #24
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	00100002 	.word	0x00100002
 80025b8:	ffff0000 	.word	0xffff0000

080025bc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b08a      	sub	sp, #40	@ 0x28
 80025c0:	af02      	add	r7, sp, #8
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	607a      	str	r2, [r7, #4]
 80025c6:	603b      	str	r3, [r7, #0]
 80025c8:	460b      	mov	r3, r1
 80025ca:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80025cc:	f7ff fb10 	bl	8001bf0 <HAL_GetTick>
 80025d0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80025d2:	2300      	movs	r3, #0
 80025d4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b20      	cmp	r3, #32
 80025e0:	f040 8111 	bne.w	8002806 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	2319      	movs	r3, #25
 80025ea:	2201      	movs	r2, #1
 80025ec:	4988      	ldr	r1, [pc, #544]	@ (8002810 <HAL_I2C_IsDeviceReady+0x254>)
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 f994 	bl	800291c <I2C_WaitOnFlagUntilTimeout>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80025fa:	2302      	movs	r3, #2
 80025fc:	e104      	b.n	8002808 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002604:	2b01      	cmp	r3, #1
 8002606:	d101      	bne.n	800260c <HAL_I2C_IsDeviceReady+0x50>
 8002608:	2302      	movs	r3, #2
 800260a:	e0fd      	b.n	8002808 <HAL_I2C_IsDeviceReady+0x24c>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b01      	cmp	r3, #1
 8002620:	d007      	beq.n	8002632 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f042 0201 	orr.w	r2, r2, #1
 8002630:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002640:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2224      	movs	r2, #36	@ 0x24
 8002646:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2200      	movs	r2, #0
 800264e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	4a70      	ldr	r2, [pc, #448]	@ (8002814 <HAL_I2C_IsDeviceReady+0x258>)
 8002654:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002664:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	9300      	str	r3, [sp, #0]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	2200      	movs	r2, #0
 800266e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f000 f952 	bl	800291c <I2C_WaitOnFlagUntilTimeout>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00d      	beq.n	800269a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002688:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800268c:	d103      	bne.n	8002696 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002694:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e0b6      	b.n	8002808 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800269a:	897b      	ldrh	r3, [r7, #10]
 800269c:	b2db      	uxtb	r3, r3
 800269e:	461a      	mov	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80026a8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80026aa:	f7ff faa1 	bl	8001bf0 <HAL_GetTick>
 80026ae:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	bf0c      	ite	eq
 80026be:	2301      	moveq	r3, #1
 80026c0:	2300      	movne	r3, #0
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	695b      	ldr	r3, [r3, #20]
 80026cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026d4:	bf0c      	ite	eq
 80026d6:	2301      	moveq	r3, #1
 80026d8:	2300      	movne	r3, #0
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80026de:	e025      	b.n	800272c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80026e0:	f7ff fa86 	bl	8001bf0 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d302      	bcc.n	80026f6 <HAL_I2C_IsDeviceReady+0x13a>
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d103      	bne.n	80026fe <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	22a0      	movs	r2, #160	@ 0xa0
 80026fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	695b      	ldr	r3, [r3, #20]
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b02      	cmp	r3, #2
 800270a:	bf0c      	ite	eq
 800270c:	2301      	moveq	r3, #1
 800270e:	2300      	movne	r3, #0
 8002710:	b2db      	uxtb	r3, r3
 8002712:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800271e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002722:	bf0c      	ite	eq
 8002724:	2301      	moveq	r3, #1
 8002726:	2300      	movne	r3, #0
 8002728:	b2db      	uxtb	r3, r3
 800272a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002732:	b2db      	uxtb	r3, r3
 8002734:	2ba0      	cmp	r3, #160	@ 0xa0
 8002736:	d005      	beq.n	8002744 <HAL_I2C_IsDeviceReady+0x188>
 8002738:	7dfb      	ldrb	r3, [r7, #23]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d102      	bne.n	8002744 <HAL_I2C_IsDeviceReady+0x188>
 800273e:	7dbb      	ldrb	r3, [r7, #22]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d0cd      	beq.n	80026e0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2220      	movs	r2, #32
 8002748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b02      	cmp	r3, #2
 8002758:	d129      	bne.n	80027ae <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002768:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800276a:	2300      	movs	r3, #0
 800276c:	613b      	str	r3, [r7, #16]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	695b      	ldr	r3, [r3, #20]
 8002774:	613b      	str	r3, [r7, #16]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	613b      	str	r3, [r7, #16]
 800277e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	2319      	movs	r3, #25
 8002786:	2201      	movs	r2, #1
 8002788:	4921      	ldr	r1, [pc, #132]	@ (8002810 <HAL_I2C_IsDeviceReady+0x254>)
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	f000 f8c6 	bl	800291c <I2C_WaitOnFlagUntilTimeout>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e036      	b.n	8002808 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2220      	movs	r2, #32
 800279e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80027aa:	2300      	movs	r3, #0
 80027ac:	e02c      	b.n	8002808 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027bc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80027c6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	9300      	str	r3, [sp, #0]
 80027cc:	2319      	movs	r3, #25
 80027ce:	2201      	movs	r2, #1
 80027d0:	490f      	ldr	r1, [pc, #60]	@ (8002810 <HAL_I2C_IsDeviceReady+0x254>)
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f000 f8a2 	bl	800291c <I2C_WaitOnFlagUntilTimeout>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e012      	b.n	8002808 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	3301      	adds	r3, #1
 80027e6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	f4ff af32 	bcc.w	8002656 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2220      	movs	r2, #32
 80027f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e000      	b.n	8002808 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002806:	2302      	movs	r3, #2
  }
}
 8002808:	4618      	mov	r0, r3
 800280a:	3720      	adds	r7, #32
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	00100002 	.word	0x00100002
 8002814:	ffff0000 	.word	0xffff0000

08002818 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b088      	sub	sp, #32
 800281c:	af02      	add	r7, sp, #8
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	607a      	str	r2, [r7, #4]
 8002822:	603b      	str	r3, [r7, #0]
 8002824:	460b      	mov	r3, r1
 8002826:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800282c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	2b08      	cmp	r3, #8
 8002832:	d006      	beq.n	8002842 <I2C_MasterRequestWrite+0x2a>
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d003      	beq.n	8002842 <I2C_MasterRequestWrite+0x2a>
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002840:	d108      	bne.n	8002854 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	e00b      	b.n	800286c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002858:	2b12      	cmp	r3, #18
 800285a:	d107      	bne.n	800286c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800286a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002878:	68f8      	ldr	r0, [r7, #12]
 800287a:	f000 f84f 	bl	800291c <I2C_WaitOnFlagUntilTimeout>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00d      	beq.n	80028a0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800288e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002892:	d103      	bne.n	800289c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800289a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e035      	b.n	800290c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80028a8:	d108      	bne.n	80028bc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028aa:	897b      	ldrh	r3, [r7, #10]
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	461a      	mov	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80028b8:	611a      	str	r2, [r3, #16]
 80028ba:	e01b      	b.n	80028f4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80028bc:	897b      	ldrh	r3, [r7, #10]
 80028be:	11db      	asrs	r3, r3, #7
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	f003 0306 	and.w	r3, r3, #6
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	f063 030f 	orn	r3, r3, #15
 80028cc:	b2da      	uxtb	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	490e      	ldr	r1, [pc, #56]	@ (8002914 <I2C_MasterRequestWrite+0xfc>)
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f000 f898 	bl	8002a10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e010      	b.n	800290c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80028ea:	897b      	ldrh	r3, [r7, #10]
 80028ec:	b2da      	uxtb	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	4907      	ldr	r1, [pc, #28]	@ (8002918 <I2C_MasterRequestWrite+0x100>)
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f000 f888 	bl	8002a10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e000      	b.n	800290c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3718      	adds	r7, #24
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	00010008 	.word	0x00010008
 8002918:	00010002 	.word	0x00010002

0800291c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	603b      	str	r3, [r7, #0]
 8002928:	4613      	mov	r3, r2
 800292a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800292c:	e048      	b.n	80029c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002934:	d044      	beq.n	80029c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002936:	f7ff f95b 	bl	8001bf0 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	429a      	cmp	r2, r3
 8002944:	d302      	bcc.n	800294c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d139      	bne.n	80029c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	0c1b      	lsrs	r3, r3, #16
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b01      	cmp	r3, #1
 8002954:	d10d      	bne.n	8002972 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	695b      	ldr	r3, [r3, #20]
 800295c:	43da      	mvns	r2, r3
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	4013      	ands	r3, r2
 8002962:	b29b      	uxth	r3, r3
 8002964:	2b00      	cmp	r3, #0
 8002966:	bf0c      	ite	eq
 8002968:	2301      	moveq	r3, #1
 800296a:	2300      	movne	r3, #0
 800296c:	b2db      	uxtb	r3, r3
 800296e:	461a      	mov	r2, r3
 8002970:	e00c      	b.n	800298c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	43da      	mvns	r2, r3
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	4013      	ands	r3, r2
 800297e:	b29b      	uxth	r3, r3
 8002980:	2b00      	cmp	r3, #0
 8002982:	bf0c      	ite	eq
 8002984:	2301      	moveq	r3, #1
 8002986:	2300      	movne	r3, #0
 8002988:	b2db      	uxtb	r3, r3
 800298a:	461a      	mov	r2, r3
 800298c:	79fb      	ldrb	r3, [r7, #7]
 800298e:	429a      	cmp	r2, r3
 8002990:	d116      	bne.n	80029c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2220      	movs	r2, #32
 800299c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ac:	f043 0220 	orr.w	r2, r3, #32
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e023      	b.n	8002a08 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	0c1b      	lsrs	r3, r3, #16
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d10d      	bne.n	80029e6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	695b      	ldr	r3, [r3, #20]
 80029d0:	43da      	mvns	r2, r3
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	4013      	ands	r3, r2
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	2b00      	cmp	r3, #0
 80029da:	bf0c      	ite	eq
 80029dc:	2301      	moveq	r3, #1
 80029de:	2300      	movne	r3, #0
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	461a      	mov	r2, r3
 80029e4:	e00c      	b.n	8002a00 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	43da      	mvns	r2, r3
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	4013      	ands	r3, r2
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	bf0c      	ite	eq
 80029f8:	2301      	moveq	r3, #1
 80029fa:	2300      	movne	r3, #0
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	461a      	mov	r2, r3
 8002a00:	79fb      	ldrb	r3, [r7, #7]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d093      	beq.n	800292e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3710      	adds	r7, #16
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
 8002a1c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a1e:	e071      	b.n	8002b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a2e:	d123      	bne.n	8002a78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a3e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a48:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2220      	movs	r2, #32
 8002a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a64:	f043 0204 	orr.w	r2, r3, #4
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e067      	b.n	8002b48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a7e:	d041      	beq.n	8002b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a80:	f7ff f8b6 	bl	8001bf0 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d302      	bcc.n	8002a96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d136      	bne.n	8002b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	0c1b      	lsrs	r3, r3, #16
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d10c      	bne.n	8002aba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	43da      	mvns	r2, r3
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	bf14      	ite	ne
 8002ab2:	2301      	movne	r3, #1
 8002ab4:	2300      	moveq	r3, #0
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	e00b      	b.n	8002ad2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	43da      	mvns	r2, r3
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	bf14      	ite	ne
 8002acc:	2301      	movne	r3, #1
 8002ace:	2300      	moveq	r3, #0
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d016      	beq.n	8002b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2220      	movs	r2, #32
 8002ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af0:	f043 0220 	orr.w	r2, r3, #32
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e021      	b.n	8002b48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	0c1b      	lsrs	r3, r3, #16
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d10c      	bne.n	8002b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	43da      	mvns	r2, r3
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	bf14      	ite	ne
 8002b20:	2301      	movne	r3, #1
 8002b22:	2300      	moveq	r3, #0
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	e00b      	b.n	8002b40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	43da      	mvns	r2, r3
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	4013      	ands	r3, r2
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	bf14      	ite	ne
 8002b3a:	2301      	movne	r3, #1
 8002b3c:	2300      	moveq	r3, #0
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f47f af6d 	bne.w	8002a20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3710      	adds	r7, #16
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b5c:	e034      	b.n	8002bc8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	f000 f886 	bl	8002c70 <I2C_IsAcknowledgeFailed>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e034      	b.n	8002bd8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b74:	d028      	beq.n	8002bc8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b76:	f7ff f83b 	bl	8001bf0 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	68ba      	ldr	r2, [r7, #8]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d302      	bcc.n	8002b8c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d11d      	bne.n	8002bc8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b96:	2b80      	cmp	r3, #128	@ 0x80
 8002b98:	d016      	beq.n	8002bc8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb4:	f043 0220 	orr.w	r2, r3, #32
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e007      	b.n	8002bd8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bd2:	2b80      	cmp	r3, #128	@ 0x80
 8002bd4:	d1c3      	bne.n	8002b5e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bec:	e034      	b.n	8002c58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f000 f83e 	bl	8002c70 <I2C_IsAcknowledgeFailed>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e034      	b.n	8002c68 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c04:	d028      	beq.n	8002c58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c06:	f7fe fff3 	bl	8001bf0 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	68ba      	ldr	r2, [r7, #8]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d302      	bcc.n	8002c1c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d11d      	bne.n	8002c58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	f003 0304 	and.w	r3, r3, #4
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	d016      	beq.n	8002c58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2220      	movs	r2, #32
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c44:	f043 0220 	orr.w	r2, r3, #32
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e007      	b.n	8002c68 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	f003 0304 	and.w	r3, r3, #4
 8002c62:	2b04      	cmp	r3, #4
 8002c64:	d1c3      	bne.n	8002bee <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c86:	d11b      	bne.n	8002cc0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c90:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2220      	movs	r2, #32
 8002c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cac:	f043 0204 	orr.w	r2, r3, #4
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e000      	b.n	8002cc2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
	...

08002cd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e267      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d075      	beq.n	8002dda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cee:	4b88      	ldr	r3, [pc, #544]	@ (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f003 030c 	and.w	r3, r3, #12
 8002cf6:	2b04      	cmp	r3, #4
 8002cf8:	d00c      	beq.n	8002d14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cfa:	4b85      	ldr	r3, [pc, #532]	@ (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d02:	2b08      	cmp	r3, #8
 8002d04:	d112      	bne.n	8002d2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d06:	4b82      	ldr	r3, [pc, #520]	@ (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d12:	d10b      	bne.n	8002d2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d14:	4b7e      	ldr	r3, [pc, #504]	@ (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d05b      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x108>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d157      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e242      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d34:	d106      	bne.n	8002d44 <HAL_RCC_OscConfig+0x74>
 8002d36:	4b76      	ldr	r3, [pc, #472]	@ (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a75      	ldr	r2, [pc, #468]	@ (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002d3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d40:	6013      	str	r3, [r2, #0]
 8002d42:	e01d      	b.n	8002d80 <HAL_RCC_OscConfig+0xb0>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d4c:	d10c      	bne.n	8002d68 <HAL_RCC_OscConfig+0x98>
 8002d4e:	4b70      	ldr	r3, [pc, #448]	@ (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a6f      	ldr	r2, [pc, #444]	@ (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002d54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d58:	6013      	str	r3, [r2, #0]
 8002d5a:	4b6d      	ldr	r3, [pc, #436]	@ (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a6c      	ldr	r2, [pc, #432]	@ (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002d60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d64:	6013      	str	r3, [r2, #0]
 8002d66:	e00b      	b.n	8002d80 <HAL_RCC_OscConfig+0xb0>
 8002d68:	4b69      	ldr	r3, [pc, #420]	@ (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a68      	ldr	r2, [pc, #416]	@ (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002d6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d72:	6013      	str	r3, [r2, #0]
 8002d74:	4b66      	ldr	r3, [pc, #408]	@ (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a65      	ldr	r2, [pc, #404]	@ (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002d7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d013      	beq.n	8002db0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d88:	f7fe ff32 	bl	8001bf0 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d90:	f7fe ff2e 	bl	8001bf0 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b64      	cmp	r3, #100	@ 0x64
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e207      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002da2:	4b5b      	ldr	r3, [pc, #364]	@ (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d0f0      	beq.n	8002d90 <HAL_RCC_OscConfig+0xc0>
 8002dae:	e014      	b.n	8002dda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db0:	f7fe ff1e 	bl	8001bf0 <HAL_GetTick>
 8002db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002db8:	f7fe ff1a 	bl	8001bf0 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b64      	cmp	r3, #100	@ 0x64
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e1f3      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dca:	4b51      	ldr	r3, [pc, #324]	@ (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1f0      	bne.n	8002db8 <HAL_RCC_OscConfig+0xe8>
 8002dd6:	e000      	b.n	8002dda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d063      	beq.n	8002eae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002de6:	4b4a      	ldr	r3, [pc, #296]	@ (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f003 030c 	and.w	r3, r3, #12
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00b      	beq.n	8002e0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002df2:	4b47      	ldr	r3, [pc, #284]	@ (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dfa:	2b08      	cmp	r3, #8
 8002dfc:	d11c      	bne.n	8002e38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dfe:	4b44      	ldr	r3, [pc, #272]	@ (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d116      	bne.n	8002e38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e0a:	4b41      	ldr	r3, [pc, #260]	@ (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d005      	beq.n	8002e22 <HAL_RCC_OscConfig+0x152>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d001      	beq.n	8002e22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e1c7      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e22:	4b3b      	ldr	r3, [pc, #236]	@ (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	4937      	ldr	r1, [pc, #220]	@ (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e36:	e03a      	b.n	8002eae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d020      	beq.n	8002e82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e40:	4b34      	ldr	r3, [pc, #208]	@ (8002f14 <HAL_RCC_OscConfig+0x244>)
 8002e42:	2201      	movs	r2, #1
 8002e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e46:	f7fe fed3 	bl	8001bf0 <HAL_GetTick>
 8002e4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e4c:	e008      	b.n	8002e60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e4e:	f7fe fecf 	bl	8001bf0 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e1a8      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e60:	4b2b      	ldr	r3, [pc, #172]	@ (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d0f0      	beq.n	8002e4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e6c:	4b28      	ldr	r3, [pc, #160]	@ (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	4925      	ldr	r1, [pc, #148]	@ (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	600b      	str	r3, [r1, #0]
 8002e80:	e015      	b.n	8002eae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e82:	4b24      	ldr	r3, [pc, #144]	@ (8002f14 <HAL_RCC_OscConfig+0x244>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e88:	f7fe feb2 	bl	8001bf0 <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e90:	f7fe feae 	bl	8001bf0 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e187      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ea2:	4b1b      	ldr	r3, [pc, #108]	@ (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1f0      	bne.n	8002e90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0308 	and.w	r3, r3, #8
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d036      	beq.n	8002f28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d016      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ec2:	4b15      	ldr	r3, [pc, #84]	@ (8002f18 <HAL_RCC_OscConfig+0x248>)
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec8:	f7fe fe92 	bl	8001bf0 <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ed0:	f7fe fe8e 	bl	8001bf0 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e167      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ee2:	4b0b      	ldr	r3, [pc, #44]	@ (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002ee4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d0f0      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x200>
 8002eee:	e01b      	b.n	8002f28 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ef0:	4b09      	ldr	r3, [pc, #36]	@ (8002f18 <HAL_RCC_OscConfig+0x248>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ef6:	f7fe fe7b 	bl	8001bf0 <HAL_GetTick>
 8002efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002efc:	e00e      	b.n	8002f1c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002efe:	f7fe fe77 	bl	8001bf0 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d907      	bls.n	8002f1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e150      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
 8002f10:	40023800 	.word	0x40023800
 8002f14:	42470000 	.word	0x42470000
 8002f18:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f1c:	4b88      	ldr	r3, [pc, #544]	@ (8003140 <HAL_RCC_OscConfig+0x470>)
 8002f1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1ea      	bne.n	8002efe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0304 	and.w	r3, r3, #4
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f000 8097 	beq.w	8003064 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f36:	2300      	movs	r3, #0
 8002f38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f3a:	4b81      	ldr	r3, [pc, #516]	@ (8003140 <HAL_RCC_OscConfig+0x470>)
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10f      	bne.n	8002f66 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f46:	2300      	movs	r3, #0
 8002f48:	60bb      	str	r3, [r7, #8]
 8002f4a:	4b7d      	ldr	r3, [pc, #500]	@ (8003140 <HAL_RCC_OscConfig+0x470>)
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4e:	4a7c      	ldr	r2, [pc, #496]	@ (8003140 <HAL_RCC_OscConfig+0x470>)
 8002f50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f54:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f56:	4b7a      	ldr	r3, [pc, #488]	@ (8003140 <HAL_RCC_OscConfig+0x470>)
 8002f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f5e:	60bb      	str	r3, [r7, #8]
 8002f60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f62:	2301      	movs	r3, #1
 8002f64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f66:	4b77      	ldr	r3, [pc, #476]	@ (8003144 <HAL_RCC_OscConfig+0x474>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d118      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f72:	4b74      	ldr	r3, [pc, #464]	@ (8003144 <HAL_RCC_OscConfig+0x474>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a73      	ldr	r2, [pc, #460]	@ (8003144 <HAL_RCC_OscConfig+0x474>)
 8002f78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f7e:	f7fe fe37 	bl	8001bf0 <HAL_GetTick>
 8002f82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f84:	e008      	b.n	8002f98 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f86:	f7fe fe33 	bl	8001bf0 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e10c      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f98:	4b6a      	ldr	r3, [pc, #424]	@ (8003144 <HAL_RCC_OscConfig+0x474>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d0f0      	beq.n	8002f86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d106      	bne.n	8002fba <HAL_RCC_OscConfig+0x2ea>
 8002fac:	4b64      	ldr	r3, [pc, #400]	@ (8003140 <HAL_RCC_OscConfig+0x470>)
 8002fae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fb0:	4a63      	ldr	r2, [pc, #396]	@ (8003140 <HAL_RCC_OscConfig+0x470>)
 8002fb2:	f043 0301 	orr.w	r3, r3, #1
 8002fb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fb8:	e01c      	b.n	8002ff4 <HAL_RCC_OscConfig+0x324>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	2b05      	cmp	r3, #5
 8002fc0:	d10c      	bne.n	8002fdc <HAL_RCC_OscConfig+0x30c>
 8002fc2:	4b5f      	ldr	r3, [pc, #380]	@ (8003140 <HAL_RCC_OscConfig+0x470>)
 8002fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fc6:	4a5e      	ldr	r2, [pc, #376]	@ (8003140 <HAL_RCC_OscConfig+0x470>)
 8002fc8:	f043 0304 	orr.w	r3, r3, #4
 8002fcc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fce:	4b5c      	ldr	r3, [pc, #368]	@ (8003140 <HAL_RCC_OscConfig+0x470>)
 8002fd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fd2:	4a5b      	ldr	r2, [pc, #364]	@ (8003140 <HAL_RCC_OscConfig+0x470>)
 8002fd4:	f043 0301 	orr.w	r3, r3, #1
 8002fd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fda:	e00b      	b.n	8002ff4 <HAL_RCC_OscConfig+0x324>
 8002fdc:	4b58      	ldr	r3, [pc, #352]	@ (8003140 <HAL_RCC_OscConfig+0x470>)
 8002fde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fe0:	4a57      	ldr	r2, [pc, #348]	@ (8003140 <HAL_RCC_OscConfig+0x470>)
 8002fe2:	f023 0301 	bic.w	r3, r3, #1
 8002fe6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fe8:	4b55      	ldr	r3, [pc, #340]	@ (8003140 <HAL_RCC_OscConfig+0x470>)
 8002fea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fec:	4a54      	ldr	r2, [pc, #336]	@ (8003140 <HAL_RCC_OscConfig+0x470>)
 8002fee:	f023 0304 	bic.w	r3, r3, #4
 8002ff2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d015      	beq.n	8003028 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ffc:	f7fe fdf8 	bl	8001bf0 <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003002:	e00a      	b.n	800301a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003004:	f7fe fdf4 	bl	8001bf0 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003012:	4293      	cmp	r3, r2
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e0cb      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800301a:	4b49      	ldr	r3, [pc, #292]	@ (8003140 <HAL_RCC_OscConfig+0x470>)
 800301c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d0ee      	beq.n	8003004 <HAL_RCC_OscConfig+0x334>
 8003026:	e014      	b.n	8003052 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003028:	f7fe fde2 	bl	8001bf0 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800302e:	e00a      	b.n	8003046 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003030:	f7fe fdde 	bl	8001bf0 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800303e:	4293      	cmp	r3, r2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e0b5      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003046:	4b3e      	ldr	r3, [pc, #248]	@ (8003140 <HAL_RCC_OscConfig+0x470>)
 8003048:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1ee      	bne.n	8003030 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003052:	7dfb      	ldrb	r3, [r7, #23]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d105      	bne.n	8003064 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003058:	4b39      	ldr	r3, [pc, #228]	@ (8003140 <HAL_RCC_OscConfig+0x470>)
 800305a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305c:	4a38      	ldr	r2, [pc, #224]	@ (8003140 <HAL_RCC_OscConfig+0x470>)
 800305e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003062:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 80a1 	beq.w	80031b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800306e:	4b34      	ldr	r3, [pc, #208]	@ (8003140 <HAL_RCC_OscConfig+0x470>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f003 030c 	and.w	r3, r3, #12
 8003076:	2b08      	cmp	r3, #8
 8003078:	d05c      	beq.n	8003134 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	2b02      	cmp	r3, #2
 8003080:	d141      	bne.n	8003106 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003082:	4b31      	ldr	r3, [pc, #196]	@ (8003148 <HAL_RCC_OscConfig+0x478>)
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003088:	f7fe fdb2 	bl	8001bf0 <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003090:	f7fe fdae 	bl	8001bf0 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e087      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030a2:	4b27      	ldr	r3, [pc, #156]	@ (8003140 <HAL_RCC_OscConfig+0x470>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1f0      	bne.n	8003090 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	69da      	ldr	r2, [r3, #28]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	431a      	orrs	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030bc:	019b      	lsls	r3, r3, #6
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030c4:	085b      	lsrs	r3, r3, #1
 80030c6:	3b01      	subs	r3, #1
 80030c8:	041b      	lsls	r3, r3, #16
 80030ca:	431a      	orrs	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d0:	061b      	lsls	r3, r3, #24
 80030d2:	491b      	ldr	r1, [pc, #108]	@ (8003140 <HAL_RCC_OscConfig+0x470>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003148 <HAL_RCC_OscConfig+0x478>)
 80030da:	2201      	movs	r2, #1
 80030dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030de:	f7fe fd87 	bl	8001bf0 <HAL_GetTick>
 80030e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030e4:	e008      	b.n	80030f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030e6:	f7fe fd83 	bl	8001bf0 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e05c      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030f8:	4b11      	ldr	r3, [pc, #68]	@ (8003140 <HAL_RCC_OscConfig+0x470>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d0f0      	beq.n	80030e6 <HAL_RCC_OscConfig+0x416>
 8003104:	e054      	b.n	80031b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003106:	4b10      	ldr	r3, [pc, #64]	@ (8003148 <HAL_RCC_OscConfig+0x478>)
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800310c:	f7fe fd70 	bl	8001bf0 <HAL_GetTick>
 8003110:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003112:	e008      	b.n	8003126 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003114:	f7fe fd6c 	bl	8001bf0 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e045      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003126:	4b06      	ldr	r3, [pc, #24]	@ (8003140 <HAL_RCC_OscConfig+0x470>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1f0      	bne.n	8003114 <HAL_RCC_OscConfig+0x444>
 8003132:	e03d      	b.n	80031b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d107      	bne.n	800314c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e038      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
 8003140:	40023800 	.word	0x40023800
 8003144:	40007000 	.word	0x40007000
 8003148:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800314c:	4b1b      	ldr	r3, [pc, #108]	@ (80031bc <HAL_RCC_OscConfig+0x4ec>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d028      	beq.n	80031ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003164:	429a      	cmp	r2, r3
 8003166:	d121      	bne.n	80031ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003172:	429a      	cmp	r2, r3
 8003174:	d11a      	bne.n	80031ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800317c:	4013      	ands	r3, r2
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003182:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003184:	4293      	cmp	r3, r2
 8003186:	d111      	bne.n	80031ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003192:	085b      	lsrs	r3, r3, #1
 8003194:	3b01      	subs	r3, #1
 8003196:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003198:	429a      	cmp	r2, r3
 800319a:	d107      	bne.n	80031ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d001      	beq.n	80031b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e000      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3718      	adds	r7, #24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	40023800 	.word	0x40023800

080031c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d101      	bne.n	80031d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e0cc      	b.n	800336e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031d4:	4b68      	ldr	r3, [pc, #416]	@ (8003378 <HAL_RCC_ClockConfig+0x1b8>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	683a      	ldr	r2, [r7, #0]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d90c      	bls.n	80031fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031e2:	4b65      	ldr	r3, [pc, #404]	@ (8003378 <HAL_RCC_ClockConfig+0x1b8>)
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	b2d2      	uxtb	r2, r2
 80031e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ea:	4b63      	ldr	r3, [pc, #396]	@ (8003378 <HAL_RCC_ClockConfig+0x1b8>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0307 	and.w	r3, r3, #7
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d001      	beq.n	80031fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e0b8      	b.n	800336e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0302 	and.w	r3, r3, #2
 8003204:	2b00      	cmp	r3, #0
 8003206:	d020      	beq.n	800324a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	2b00      	cmp	r3, #0
 8003212:	d005      	beq.n	8003220 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003214:	4b59      	ldr	r3, [pc, #356]	@ (800337c <HAL_RCC_ClockConfig+0x1bc>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	4a58      	ldr	r2, [pc, #352]	@ (800337c <HAL_RCC_ClockConfig+0x1bc>)
 800321a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800321e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0308 	and.w	r3, r3, #8
 8003228:	2b00      	cmp	r3, #0
 800322a:	d005      	beq.n	8003238 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800322c:	4b53      	ldr	r3, [pc, #332]	@ (800337c <HAL_RCC_ClockConfig+0x1bc>)
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	4a52      	ldr	r2, [pc, #328]	@ (800337c <HAL_RCC_ClockConfig+0x1bc>)
 8003232:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003236:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003238:	4b50      	ldr	r3, [pc, #320]	@ (800337c <HAL_RCC_ClockConfig+0x1bc>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	494d      	ldr	r1, [pc, #308]	@ (800337c <HAL_RCC_ClockConfig+0x1bc>)
 8003246:	4313      	orrs	r3, r2
 8003248:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	2b00      	cmp	r3, #0
 8003254:	d044      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d107      	bne.n	800326e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800325e:	4b47      	ldr	r3, [pc, #284]	@ (800337c <HAL_RCC_ClockConfig+0x1bc>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d119      	bne.n	800329e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e07f      	b.n	800336e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	2b02      	cmp	r3, #2
 8003274:	d003      	beq.n	800327e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800327a:	2b03      	cmp	r3, #3
 800327c:	d107      	bne.n	800328e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800327e:	4b3f      	ldr	r3, [pc, #252]	@ (800337c <HAL_RCC_ClockConfig+0x1bc>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d109      	bne.n	800329e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e06f      	b.n	800336e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800328e:	4b3b      	ldr	r3, [pc, #236]	@ (800337c <HAL_RCC_ClockConfig+0x1bc>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e067      	b.n	800336e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800329e:	4b37      	ldr	r3, [pc, #220]	@ (800337c <HAL_RCC_ClockConfig+0x1bc>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f023 0203 	bic.w	r2, r3, #3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	4934      	ldr	r1, [pc, #208]	@ (800337c <HAL_RCC_ClockConfig+0x1bc>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032b0:	f7fe fc9e 	bl	8001bf0 <HAL_GetTick>
 80032b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032b6:	e00a      	b.n	80032ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032b8:	f7fe fc9a 	bl	8001bf0 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e04f      	b.n	800336e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ce:	4b2b      	ldr	r3, [pc, #172]	@ (800337c <HAL_RCC_ClockConfig+0x1bc>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f003 020c 	and.w	r2, r3, #12
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	429a      	cmp	r2, r3
 80032de:	d1eb      	bne.n	80032b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032e0:	4b25      	ldr	r3, [pc, #148]	@ (8003378 <HAL_RCC_ClockConfig+0x1b8>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d20c      	bcs.n	8003308 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ee:	4b22      	ldr	r3, [pc, #136]	@ (8003378 <HAL_RCC_ClockConfig+0x1b8>)
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	b2d2      	uxtb	r2, r2
 80032f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032f6:	4b20      	ldr	r3, [pc, #128]	@ (8003378 <HAL_RCC_ClockConfig+0x1b8>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0307 	and.w	r3, r3, #7
 80032fe:	683a      	ldr	r2, [r7, #0]
 8003300:	429a      	cmp	r2, r3
 8003302:	d001      	beq.n	8003308 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e032      	b.n	800336e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0304 	and.w	r3, r3, #4
 8003310:	2b00      	cmp	r3, #0
 8003312:	d008      	beq.n	8003326 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003314:	4b19      	ldr	r3, [pc, #100]	@ (800337c <HAL_RCC_ClockConfig+0x1bc>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	4916      	ldr	r1, [pc, #88]	@ (800337c <HAL_RCC_ClockConfig+0x1bc>)
 8003322:	4313      	orrs	r3, r2
 8003324:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0308 	and.w	r3, r3, #8
 800332e:	2b00      	cmp	r3, #0
 8003330:	d009      	beq.n	8003346 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003332:	4b12      	ldr	r3, [pc, #72]	@ (800337c <HAL_RCC_ClockConfig+0x1bc>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	490e      	ldr	r1, [pc, #56]	@ (800337c <HAL_RCC_ClockConfig+0x1bc>)
 8003342:	4313      	orrs	r3, r2
 8003344:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003346:	f000 f821 	bl	800338c <HAL_RCC_GetSysClockFreq>
 800334a:	4602      	mov	r2, r0
 800334c:	4b0b      	ldr	r3, [pc, #44]	@ (800337c <HAL_RCC_ClockConfig+0x1bc>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	091b      	lsrs	r3, r3, #4
 8003352:	f003 030f 	and.w	r3, r3, #15
 8003356:	490a      	ldr	r1, [pc, #40]	@ (8003380 <HAL_RCC_ClockConfig+0x1c0>)
 8003358:	5ccb      	ldrb	r3, [r1, r3]
 800335a:	fa22 f303 	lsr.w	r3, r2, r3
 800335e:	4a09      	ldr	r2, [pc, #36]	@ (8003384 <HAL_RCC_ClockConfig+0x1c4>)
 8003360:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003362:	4b09      	ldr	r3, [pc, #36]	@ (8003388 <HAL_RCC_ClockConfig+0x1c8>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4618      	mov	r0, r3
 8003368:	f7fe fb42 	bl	80019f0 <HAL_InitTick>

  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	40023c00 	.word	0x40023c00
 800337c:	40023800 	.word	0x40023800
 8003380:	08009768 	.word	0x08009768
 8003384:	20000018 	.word	0x20000018
 8003388:	2000001c 	.word	0x2000001c

0800338c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800338c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003390:	b090      	sub	sp, #64	@ 0x40
 8003392:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003394:	2300      	movs	r3, #0
 8003396:	637b      	str	r3, [r7, #52]	@ 0x34
 8003398:	2300      	movs	r3, #0
 800339a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800339c:	2300      	movs	r3, #0
 800339e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80033a0:	2300      	movs	r3, #0
 80033a2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033a4:	4b59      	ldr	r3, [pc, #356]	@ (800350c <HAL_RCC_GetSysClockFreq+0x180>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f003 030c 	and.w	r3, r3, #12
 80033ac:	2b08      	cmp	r3, #8
 80033ae:	d00d      	beq.n	80033cc <HAL_RCC_GetSysClockFreq+0x40>
 80033b0:	2b08      	cmp	r3, #8
 80033b2:	f200 80a1 	bhi.w	80034f8 <HAL_RCC_GetSysClockFreq+0x16c>
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d002      	beq.n	80033c0 <HAL_RCC_GetSysClockFreq+0x34>
 80033ba:	2b04      	cmp	r3, #4
 80033bc:	d003      	beq.n	80033c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80033be:	e09b      	b.n	80034f8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033c0:	4b53      	ldr	r3, [pc, #332]	@ (8003510 <HAL_RCC_GetSysClockFreq+0x184>)
 80033c2:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80033c4:	e09b      	b.n	80034fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033c6:	4b53      	ldr	r3, [pc, #332]	@ (8003514 <HAL_RCC_GetSysClockFreq+0x188>)
 80033c8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80033ca:	e098      	b.n	80034fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033cc:	4b4f      	ldr	r3, [pc, #316]	@ (800350c <HAL_RCC_GetSysClockFreq+0x180>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033d4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033d6:	4b4d      	ldr	r3, [pc, #308]	@ (800350c <HAL_RCC_GetSysClockFreq+0x180>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d028      	beq.n	8003434 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033e2:	4b4a      	ldr	r3, [pc, #296]	@ (800350c <HAL_RCC_GetSysClockFreq+0x180>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	099b      	lsrs	r3, r3, #6
 80033e8:	2200      	movs	r2, #0
 80033ea:	623b      	str	r3, [r7, #32]
 80033ec:	627a      	str	r2, [r7, #36]	@ 0x24
 80033ee:	6a3b      	ldr	r3, [r7, #32]
 80033f0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80033f4:	2100      	movs	r1, #0
 80033f6:	4b47      	ldr	r3, [pc, #284]	@ (8003514 <HAL_RCC_GetSysClockFreq+0x188>)
 80033f8:	fb03 f201 	mul.w	r2, r3, r1
 80033fc:	2300      	movs	r3, #0
 80033fe:	fb00 f303 	mul.w	r3, r0, r3
 8003402:	4413      	add	r3, r2
 8003404:	4a43      	ldr	r2, [pc, #268]	@ (8003514 <HAL_RCC_GetSysClockFreq+0x188>)
 8003406:	fba0 1202 	umull	r1, r2, r0, r2
 800340a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800340c:	460a      	mov	r2, r1
 800340e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003410:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003412:	4413      	add	r3, r2
 8003414:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003418:	2200      	movs	r2, #0
 800341a:	61bb      	str	r3, [r7, #24]
 800341c:	61fa      	str	r2, [r7, #28]
 800341e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003422:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003426:	f7fd fb19 	bl	8000a5c <__aeabi_uldivmod>
 800342a:	4602      	mov	r2, r0
 800342c:	460b      	mov	r3, r1
 800342e:	4613      	mov	r3, r2
 8003430:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003432:	e053      	b.n	80034dc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003434:	4b35      	ldr	r3, [pc, #212]	@ (800350c <HAL_RCC_GetSysClockFreq+0x180>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	099b      	lsrs	r3, r3, #6
 800343a:	2200      	movs	r2, #0
 800343c:	613b      	str	r3, [r7, #16]
 800343e:	617a      	str	r2, [r7, #20]
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003446:	f04f 0b00 	mov.w	fp, #0
 800344a:	4652      	mov	r2, sl
 800344c:	465b      	mov	r3, fp
 800344e:	f04f 0000 	mov.w	r0, #0
 8003452:	f04f 0100 	mov.w	r1, #0
 8003456:	0159      	lsls	r1, r3, #5
 8003458:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800345c:	0150      	lsls	r0, r2, #5
 800345e:	4602      	mov	r2, r0
 8003460:	460b      	mov	r3, r1
 8003462:	ebb2 080a 	subs.w	r8, r2, sl
 8003466:	eb63 090b 	sbc.w	r9, r3, fp
 800346a:	f04f 0200 	mov.w	r2, #0
 800346e:	f04f 0300 	mov.w	r3, #0
 8003472:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003476:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800347a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800347e:	ebb2 0408 	subs.w	r4, r2, r8
 8003482:	eb63 0509 	sbc.w	r5, r3, r9
 8003486:	f04f 0200 	mov.w	r2, #0
 800348a:	f04f 0300 	mov.w	r3, #0
 800348e:	00eb      	lsls	r3, r5, #3
 8003490:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003494:	00e2      	lsls	r2, r4, #3
 8003496:	4614      	mov	r4, r2
 8003498:	461d      	mov	r5, r3
 800349a:	eb14 030a 	adds.w	r3, r4, sl
 800349e:	603b      	str	r3, [r7, #0]
 80034a0:	eb45 030b 	adc.w	r3, r5, fp
 80034a4:	607b      	str	r3, [r7, #4]
 80034a6:	f04f 0200 	mov.w	r2, #0
 80034aa:	f04f 0300 	mov.w	r3, #0
 80034ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034b2:	4629      	mov	r1, r5
 80034b4:	028b      	lsls	r3, r1, #10
 80034b6:	4621      	mov	r1, r4
 80034b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034bc:	4621      	mov	r1, r4
 80034be:	028a      	lsls	r2, r1, #10
 80034c0:	4610      	mov	r0, r2
 80034c2:	4619      	mov	r1, r3
 80034c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034c6:	2200      	movs	r2, #0
 80034c8:	60bb      	str	r3, [r7, #8]
 80034ca:	60fa      	str	r2, [r7, #12]
 80034cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034d0:	f7fd fac4 	bl	8000a5c <__aeabi_uldivmod>
 80034d4:	4602      	mov	r2, r0
 80034d6:	460b      	mov	r3, r1
 80034d8:	4613      	mov	r3, r2
 80034da:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034dc:	4b0b      	ldr	r3, [pc, #44]	@ (800350c <HAL_RCC_GetSysClockFreq+0x180>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	0c1b      	lsrs	r3, r3, #16
 80034e2:	f003 0303 	and.w	r3, r3, #3
 80034e6:	3301      	adds	r3, #1
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80034ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80034ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80034f6:	e002      	b.n	80034fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034f8:	4b05      	ldr	r3, [pc, #20]	@ (8003510 <HAL_RCC_GetSysClockFreq+0x184>)
 80034fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80034fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003500:	4618      	mov	r0, r3
 8003502:	3740      	adds	r7, #64	@ 0x40
 8003504:	46bd      	mov	sp, r7
 8003506:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800350a:	bf00      	nop
 800350c:	40023800 	.word	0x40023800
 8003510:	00f42400 	.word	0x00f42400
 8003514:	017d7840 	.word	0x017d7840

08003518 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800351c:	4b03      	ldr	r3, [pc, #12]	@ (800352c <HAL_RCC_GetHCLKFreq+0x14>)
 800351e:	681b      	ldr	r3, [r3, #0]
}
 8003520:	4618      	mov	r0, r3
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	20000018 	.word	0x20000018

08003530 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003534:	f7ff fff0 	bl	8003518 <HAL_RCC_GetHCLKFreq>
 8003538:	4602      	mov	r2, r0
 800353a:	4b05      	ldr	r3, [pc, #20]	@ (8003550 <HAL_RCC_GetPCLK1Freq+0x20>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	0a9b      	lsrs	r3, r3, #10
 8003540:	f003 0307 	and.w	r3, r3, #7
 8003544:	4903      	ldr	r1, [pc, #12]	@ (8003554 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003546:	5ccb      	ldrb	r3, [r1, r3]
 8003548:	fa22 f303 	lsr.w	r3, r2, r3
}
 800354c:	4618      	mov	r0, r3
 800354e:	bd80      	pop	{r7, pc}
 8003550:	40023800 	.word	0x40023800
 8003554:	08009778 	.word	0x08009778

08003558 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	220f      	movs	r2, #15
 8003566:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003568:	4b12      	ldr	r3, [pc, #72]	@ (80035b4 <HAL_RCC_GetClockConfig+0x5c>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f003 0203 	and.w	r2, r3, #3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003574:	4b0f      	ldr	r3, [pc, #60]	@ (80035b4 <HAL_RCC_GetClockConfig+0x5c>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003580:	4b0c      	ldr	r3, [pc, #48]	@ (80035b4 <HAL_RCC_GetClockConfig+0x5c>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800358c:	4b09      	ldr	r3, [pc, #36]	@ (80035b4 <HAL_RCC_GetClockConfig+0x5c>)
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	08db      	lsrs	r3, r3, #3
 8003592:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800359a:	4b07      	ldr	r3, [pc, #28]	@ (80035b8 <HAL_RCC_GetClockConfig+0x60>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0207 	and.w	r2, r3, #7
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	601a      	str	r2, [r3, #0]
}
 80035a6:	bf00      	nop
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	40023800 	.word	0x40023800
 80035b8:	40023c00 	.word	0x40023c00

080035bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e041      	b.n	8003652 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d106      	bne.n	80035e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7fe f9e2 	bl	80019ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2202      	movs	r2, #2
 80035ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	3304      	adds	r3, #4
 80035f8:	4619      	mov	r1, r3
 80035fa:	4610      	mov	r0, r2
 80035fc:	f000 fa7a 	bl	8003af4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3708      	adds	r7, #8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
	...

0800365c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2b01      	cmp	r3, #1
 800366e:	d001      	beq.n	8003674 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e044      	b.n	80036fe <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2202      	movs	r2, #2
 8003678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68da      	ldr	r2, [r3, #12]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f042 0201 	orr.w	r2, r2, #1
 800368a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a1e      	ldr	r2, [pc, #120]	@ (800370c <HAL_TIM_Base_Start_IT+0xb0>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d018      	beq.n	80036c8 <HAL_TIM_Base_Start_IT+0x6c>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800369e:	d013      	beq.n	80036c8 <HAL_TIM_Base_Start_IT+0x6c>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a1a      	ldr	r2, [pc, #104]	@ (8003710 <HAL_TIM_Base_Start_IT+0xb4>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d00e      	beq.n	80036c8 <HAL_TIM_Base_Start_IT+0x6c>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a19      	ldr	r2, [pc, #100]	@ (8003714 <HAL_TIM_Base_Start_IT+0xb8>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d009      	beq.n	80036c8 <HAL_TIM_Base_Start_IT+0x6c>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a17      	ldr	r2, [pc, #92]	@ (8003718 <HAL_TIM_Base_Start_IT+0xbc>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d004      	beq.n	80036c8 <HAL_TIM_Base_Start_IT+0x6c>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a16      	ldr	r2, [pc, #88]	@ (800371c <HAL_TIM_Base_Start_IT+0xc0>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d111      	bne.n	80036ec <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f003 0307 	and.w	r3, r3, #7
 80036d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2b06      	cmp	r3, #6
 80036d8:	d010      	beq.n	80036fc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f042 0201 	orr.w	r2, r2, #1
 80036e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ea:	e007      	b.n	80036fc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f042 0201 	orr.w	r2, r2, #1
 80036fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3714      	adds	r7, #20
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	40010000 	.word	0x40010000
 8003710:	40000400 	.word	0x40000400
 8003714:	40000800 	.word	0x40000800
 8003718:	40000c00 	.word	0x40000c00
 800371c:	40014000 	.word	0x40014000

08003720 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d020      	beq.n	8003784 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d01b      	beq.n	8003784 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f06f 0202 	mvn.w	r2, #2
 8003754:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	f003 0303 	and.w	r3, r3, #3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f9a3 	bl	8003ab6 <HAL_TIM_IC_CaptureCallback>
 8003770:	e005      	b.n	800377e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f995 	bl	8003aa2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 f9a6 	bl	8003aca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	f003 0304 	and.w	r3, r3, #4
 800378a:	2b00      	cmp	r3, #0
 800378c:	d020      	beq.n	80037d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f003 0304 	and.w	r3, r3, #4
 8003794:	2b00      	cmp	r3, #0
 8003796:	d01b      	beq.n	80037d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f06f 0204 	mvn.w	r2, #4
 80037a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2202      	movs	r2, #2
 80037a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d003      	beq.n	80037be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f97d 	bl	8003ab6 <HAL_TIM_IC_CaptureCallback>
 80037bc:	e005      	b.n	80037ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f96f 	bl	8003aa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 f980 	bl	8003aca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	f003 0308 	and.w	r3, r3, #8
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d020      	beq.n	800381c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f003 0308 	and.w	r3, r3, #8
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d01b      	beq.n	800381c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f06f 0208 	mvn.w	r2, #8
 80037ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2204      	movs	r2, #4
 80037f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	69db      	ldr	r3, [r3, #28]
 80037fa:	f003 0303 	and.w	r3, r3, #3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d003      	beq.n	800380a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f957 	bl	8003ab6 <HAL_TIM_IC_CaptureCallback>
 8003808:	e005      	b.n	8003816 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f949 	bl	8003aa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 f95a 	bl	8003aca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	f003 0310 	and.w	r3, r3, #16
 8003822:	2b00      	cmp	r3, #0
 8003824:	d020      	beq.n	8003868 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f003 0310 	and.w	r3, r3, #16
 800382c:	2b00      	cmp	r3, #0
 800382e:	d01b      	beq.n	8003868 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f06f 0210 	mvn.w	r2, #16
 8003838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2208      	movs	r2, #8
 800383e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	69db      	ldr	r3, [r3, #28]
 8003846:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f931 	bl	8003ab6 <HAL_TIM_IC_CaptureCallback>
 8003854:	e005      	b.n	8003862 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 f923 	bl	8003aa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 f934 	bl	8003aca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00c      	beq.n	800388c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	2b00      	cmp	r3, #0
 800387a:	d007      	beq.n	800388c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f06f 0201 	mvn.w	r2, #1
 8003884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 f901 	bl	8003a8e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00c      	beq.n	80038b0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800389c:	2b00      	cmp	r3, #0
 800389e:	d007      	beq.n	80038b0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80038a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 fac0 	bl	8003e30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00c      	beq.n	80038d4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d007      	beq.n	80038d4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80038cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 f905 	bl	8003ade <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	f003 0320 	and.w	r3, r3, #32
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00c      	beq.n	80038f8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f003 0320 	and.w	r3, r3, #32
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d007      	beq.n	80038f8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f06f 0220 	mvn.w	r2, #32
 80038f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 fa92 	bl	8003e1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038f8:	bf00      	nop
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800390a:	2300      	movs	r3, #0
 800390c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003914:	2b01      	cmp	r3, #1
 8003916:	d101      	bne.n	800391c <HAL_TIM_ConfigClockSource+0x1c>
 8003918:	2302      	movs	r3, #2
 800391a:	e0b4      	b.n	8003a86 <HAL_TIM_ConfigClockSource+0x186>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2202      	movs	r2, #2
 8003928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800393a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003942:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68ba      	ldr	r2, [r7, #8]
 800394a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003954:	d03e      	beq.n	80039d4 <HAL_TIM_ConfigClockSource+0xd4>
 8003956:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800395a:	f200 8087 	bhi.w	8003a6c <HAL_TIM_ConfigClockSource+0x16c>
 800395e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003962:	f000 8086 	beq.w	8003a72 <HAL_TIM_ConfigClockSource+0x172>
 8003966:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800396a:	d87f      	bhi.n	8003a6c <HAL_TIM_ConfigClockSource+0x16c>
 800396c:	2b70      	cmp	r3, #112	@ 0x70
 800396e:	d01a      	beq.n	80039a6 <HAL_TIM_ConfigClockSource+0xa6>
 8003970:	2b70      	cmp	r3, #112	@ 0x70
 8003972:	d87b      	bhi.n	8003a6c <HAL_TIM_ConfigClockSource+0x16c>
 8003974:	2b60      	cmp	r3, #96	@ 0x60
 8003976:	d050      	beq.n	8003a1a <HAL_TIM_ConfigClockSource+0x11a>
 8003978:	2b60      	cmp	r3, #96	@ 0x60
 800397a:	d877      	bhi.n	8003a6c <HAL_TIM_ConfigClockSource+0x16c>
 800397c:	2b50      	cmp	r3, #80	@ 0x50
 800397e:	d03c      	beq.n	80039fa <HAL_TIM_ConfigClockSource+0xfa>
 8003980:	2b50      	cmp	r3, #80	@ 0x50
 8003982:	d873      	bhi.n	8003a6c <HAL_TIM_ConfigClockSource+0x16c>
 8003984:	2b40      	cmp	r3, #64	@ 0x40
 8003986:	d058      	beq.n	8003a3a <HAL_TIM_ConfigClockSource+0x13a>
 8003988:	2b40      	cmp	r3, #64	@ 0x40
 800398a:	d86f      	bhi.n	8003a6c <HAL_TIM_ConfigClockSource+0x16c>
 800398c:	2b30      	cmp	r3, #48	@ 0x30
 800398e:	d064      	beq.n	8003a5a <HAL_TIM_ConfigClockSource+0x15a>
 8003990:	2b30      	cmp	r3, #48	@ 0x30
 8003992:	d86b      	bhi.n	8003a6c <HAL_TIM_ConfigClockSource+0x16c>
 8003994:	2b20      	cmp	r3, #32
 8003996:	d060      	beq.n	8003a5a <HAL_TIM_ConfigClockSource+0x15a>
 8003998:	2b20      	cmp	r3, #32
 800399a:	d867      	bhi.n	8003a6c <HAL_TIM_ConfigClockSource+0x16c>
 800399c:	2b00      	cmp	r3, #0
 800399e:	d05c      	beq.n	8003a5a <HAL_TIM_ConfigClockSource+0x15a>
 80039a0:	2b10      	cmp	r3, #16
 80039a2:	d05a      	beq.n	8003a5a <HAL_TIM_ConfigClockSource+0x15a>
 80039a4:	e062      	b.n	8003a6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039b6:	f000 f9a3 	bl	8003d00 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80039c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68ba      	ldr	r2, [r7, #8]
 80039d0:	609a      	str	r2, [r3, #8]
      break;
 80039d2:	e04f      	b.n	8003a74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039e4:	f000 f98c 	bl	8003d00 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	689a      	ldr	r2, [r3, #8]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80039f6:	609a      	str	r2, [r3, #8]
      break;
 80039f8:	e03c      	b.n	8003a74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a06:	461a      	mov	r2, r3
 8003a08:	f000 f900 	bl	8003c0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2150      	movs	r1, #80	@ 0x50
 8003a12:	4618      	mov	r0, r3
 8003a14:	f000 f959 	bl	8003cca <TIM_ITRx_SetConfig>
      break;
 8003a18:	e02c      	b.n	8003a74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a26:	461a      	mov	r2, r3
 8003a28:	f000 f91f 	bl	8003c6a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2160      	movs	r1, #96	@ 0x60
 8003a32:	4618      	mov	r0, r3
 8003a34:	f000 f949 	bl	8003cca <TIM_ITRx_SetConfig>
      break;
 8003a38:	e01c      	b.n	8003a74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a46:	461a      	mov	r2, r3
 8003a48:	f000 f8e0 	bl	8003c0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2140      	movs	r1, #64	@ 0x40
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 f939 	bl	8003cca <TIM_ITRx_SetConfig>
      break;
 8003a58:	e00c      	b.n	8003a74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4619      	mov	r1, r3
 8003a64:	4610      	mov	r0, r2
 8003a66:	f000 f930 	bl	8003cca <TIM_ITRx_SetConfig>
      break;
 8003a6a:	e003      	b.n	8003a74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a70:	e000      	b.n	8003a74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a8e:	b480      	push	{r7}
 8003a90:	b083      	sub	sp, #12
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003a96:	bf00      	nop
 8003a98:	370c      	adds	r7, #12
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr

08003aa2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	b083      	sub	sp, #12
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003aaa:	bf00      	nop
 8003aac:	370c      	adds	r7, #12
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr

08003ab6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	b083      	sub	sp, #12
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003abe:	bf00      	nop
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr

08003aca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003aca:	b480      	push	{r7}
 8003acc:	b083      	sub	sp, #12
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ad2:	bf00      	nop
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr

08003ade <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ade:	b480      	push	{r7}
 8003ae0:	b083      	sub	sp, #12
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ae6:	bf00      	nop
 8003ae8:	370c      	adds	r7, #12
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
	...

08003af4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b085      	sub	sp, #20
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a3a      	ldr	r2, [pc, #232]	@ (8003bf0 <TIM_Base_SetConfig+0xfc>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d00f      	beq.n	8003b2c <TIM_Base_SetConfig+0x38>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b12:	d00b      	beq.n	8003b2c <TIM_Base_SetConfig+0x38>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a37      	ldr	r2, [pc, #220]	@ (8003bf4 <TIM_Base_SetConfig+0x100>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d007      	beq.n	8003b2c <TIM_Base_SetConfig+0x38>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a36      	ldr	r2, [pc, #216]	@ (8003bf8 <TIM_Base_SetConfig+0x104>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d003      	beq.n	8003b2c <TIM_Base_SetConfig+0x38>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a35      	ldr	r2, [pc, #212]	@ (8003bfc <TIM_Base_SetConfig+0x108>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d108      	bne.n	8003b3e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a2b      	ldr	r2, [pc, #172]	@ (8003bf0 <TIM_Base_SetConfig+0xfc>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d01b      	beq.n	8003b7e <TIM_Base_SetConfig+0x8a>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b4c:	d017      	beq.n	8003b7e <TIM_Base_SetConfig+0x8a>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a28      	ldr	r2, [pc, #160]	@ (8003bf4 <TIM_Base_SetConfig+0x100>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d013      	beq.n	8003b7e <TIM_Base_SetConfig+0x8a>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a27      	ldr	r2, [pc, #156]	@ (8003bf8 <TIM_Base_SetConfig+0x104>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d00f      	beq.n	8003b7e <TIM_Base_SetConfig+0x8a>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a26      	ldr	r2, [pc, #152]	@ (8003bfc <TIM_Base_SetConfig+0x108>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d00b      	beq.n	8003b7e <TIM_Base_SetConfig+0x8a>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a25      	ldr	r2, [pc, #148]	@ (8003c00 <TIM_Base_SetConfig+0x10c>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d007      	beq.n	8003b7e <TIM_Base_SetConfig+0x8a>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a24      	ldr	r2, [pc, #144]	@ (8003c04 <TIM_Base_SetConfig+0x110>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d003      	beq.n	8003b7e <TIM_Base_SetConfig+0x8a>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a23      	ldr	r2, [pc, #140]	@ (8003c08 <TIM_Base_SetConfig+0x114>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d108      	bne.n	8003b90 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	689a      	ldr	r2, [r3, #8]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a0e      	ldr	r2, [pc, #56]	@ (8003bf0 <TIM_Base_SetConfig+0xfc>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d103      	bne.n	8003bc4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	691a      	ldr	r2, [r3, #16]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d105      	bne.n	8003be2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	f023 0201 	bic.w	r2, r3, #1
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	611a      	str	r2, [r3, #16]
  }
}
 8003be2:	bf00      	nop
 8003be4:	3714      	adds	r7, #20
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	40010000 	.word	0x40010000
 8003bf4:	40000400 	.word	0x40000400
 8003bf8:	40000800 	.word	0x40000800
 8003bfc:	40000c00 	.word	0x40000c00
 8003c00:	40014000 	.word	0x40014000
 8003c04:	40014400 	.word	0x40014400
 8003c08:	40014800 	.word	0x40014800

08003c0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b087      	sub	sp, #28
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6a1b      	ldr	r3, [r3, #32]
 8003c1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	f023 0201 	bic.w	r2, r3, #1
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	011b      	lsls	r3, r3, #4
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	f023 030a 	bic.w	r3, r3, #10
 8003c48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	621a      	str	r2, [r3, #32]
}
 8003c5e:	bf00      	nop
 8003c60:	371c      	adds	r7, #28
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr

08003c6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c6a:	b480      	push	{r7}
 8003c6c:	b087      	sub	sp, #28
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	60f8      	str	r0, [r7, #12]
 8003c72:	60b9      	str	r1, [r7, #8]
 8003c74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	f023 0210 	bic.w	r2, r3, #16
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003c94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	031b      	lsls	r3, r3, #12
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003ca6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	011b      	lsls	r3, r3, #4
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	621a      	str	r2, [r3, #32]
}
 8003cbe:	bf00      	nop
 8003cc0:	371c      	adds	r7, #28
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr

08003cca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b085      	sub	sp, #20
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
 8003cd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ce0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ce2:	683a      	ldr	r2, [r7, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	f043 0307 	orr.w	r3, r3, #7
 8003cec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	609a      	str	r2, [r3, #8]
}
 8003cf4:	bf00      	nop
 8003cf6:	3714      	adds	r7, #20
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b087      	sub	sp, #28
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
 8003d0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	021a      	lsls	r2, r3, #8
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	431a      	orrs	r2, r3
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	697a      	ldr	r2, [r7, #20]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	697a      	ldr	r2, [r7, #20]
 8003d32:	609a      	str	r2, [r3, #8]
}
 8003d34:	bf00      	nop
 8003d36:	371c      	adds	r7, #28
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d101      	bne.n	8003d58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d54:	2302      	movs	r3, #2
 8003d56:	e050      	b.n	8003dfa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2202      	movs	r2, #2
 8003d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a1c      	ldr	r2, [pc, #112]	@ (8003e08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d018      	beq.n	8003dce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003da4:	d013      	beq.n	8003dce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a18      	ldr	r2, [pc, #96]	@ (8003e0c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d00e      	beq.n	8003dce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a16      	ldr	r2, [pc, #88]	@ (8003e10 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d009      	beq.n	8003dce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a15      	ldr	r2, [pc, #84]	@ (8003e14 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d004      	beq.n	8003dce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a13      	ldr	r2, [pc, #76]	@ (8003e18 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d10c      	bne.n	8003de8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003dd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	68ba      	ldr	r2, [r7, #8]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68ba      	ldr	r2, [r7, #8]
 8003de6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3714      	adds	r7, #20
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	40010000 	.word	0x40010000
 8003e0c:	40000400 	.word	0x40000400
 8003e10:	40000800 	.word	0x40000800
 8003e14:	40000c00 	.word	0x40000c00
 8003e18:	40014000 	.word	0x40014000

08003e1c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f103 0208 	add.w	r2, r3, #8
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f04f 32ff 	mov.w	r2, #4294967295
 8003e5c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f103 0208 	add.w	r2, r3, #8
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f103 0208 	add.w	r2, r3, #8
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003e92:	bf00      	nop
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr

08003e9e <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	b085      	sub	sp, #20
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
 8003ea6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb4:	d103      	bne.n	8003ebe <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	60fb      	str	r3, [r7, #12]
 8003ebc:	e00c      	b.n	8003ed8 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	3308      	adds	r3, #8
 8003ec2:	60fb      	str	r3, [r7, #12]
 8003ec4:	e002      	b.n	8003ecc <vListInsert+0x2e>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	60fb      	str	r3, [r7, #12]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68ba      	ldr	r2, [r7, #8]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d2f6      	bcs.n	8003ec6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	685a      	ldr	r2, [r3, #4]
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	683a      	ldr	r2, [r7, #0]
 8003ee6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	683a      	ldr	r2, [r7, #0]
 8003ef2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	1c5a      	adds	r2, r3, #1
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	601a      	str	r2, [r3, #0]
}
 8003f04:	bf00      	nop
 8003f06:	3714      	adds	r7, #20
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	691b      	ldr	r3, [r3, #16]
 8003f1c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	6892      	ldr	r2, [r2, #8]
 8003f26:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	6852      	ldr	r2, [r2, #4]
 8003f30:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d103      	bne.n	8003f44 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689a      	ldr	r2, [r3, #8]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	1e5a      	subs	r2, r3, #1
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3714      	adds	r7, #20
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d10b      	bne.n	8003f94 <xQueueGenericReset+0x30>
        __asm volatile
 8003f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f80:	f383 8811 	msr	BASEPRI, r3
 8003f84:	f3bf 8f6f 	isb	sy
 8003f88:	f3bf 8f4f 	dsb	sy
 8003f8c:	60fb      	str	r3, [r7, #12]
    }
 8003f8e:	bf00      	nop
 8003f90:	bf00      	nop
 8003f92:	e7fd      	b.n	8003f90 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d05d      	beq.n	8004056 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d059      	beq.n	8004056 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003faa:	2100      	movs	r1, #0
 8003fac:	fba3 2302 	umull	r2, r3, r3, r2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d000      	beq.n	8003fb6 <xQueueGenericReset+0x52>
 8003fb4:	2101      	movs	r1, #1
 8003fb6:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d14c      	bne.n	8004056 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8003fbc:	f002 fbf6 	bl	80067ac <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fc8:	6939      	ldr	r1, [r7, #16]
 8003fca:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003fcc:	fb01 f303 	mul.w	r3, r1, r3
 8003fd0:	441a      	add	r2, r3
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fec:	3b01      	subs	r3, #1
 8003fee:	6939      	ldr	r1, [r7, #16]
 8003ff0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003ff2:	fb01 f303 	mul.w	r3, r1, r3
 8003ff6:	441a      	add	r2, r3
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	22ff      	movs	r2, #255	@ 0xff
 8004000:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	22ff      	movs	r2, #255	@ 0xff
 8004008:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d114      	bne.n	800403c <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d01a      	beq.n	8004050 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	3310      	adds	r3, #16
 800401e:	4618      	mov	r0, r3
 8004020:	f001 fb42 	bl	80056a8 <xTaskRemoveFromEventList>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d012      	beq.n	8004050 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800402a:	4b16      	ldr	r3, [pc, #88]	@ (8004084 <xQueueGenericReset+0x120>)
 800402c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004030:	601a      	str	r2, [r3, #0]
 8004032:	f3bf 8f4f 	dsb	sy
 8004036:	f3bf 8f6f 	isb	sy
 800403a:	e009      	b.n	8004050 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	3310      	adds	r3, #16
 8004040:	4618      	mov	r0, r3
 8004042:	f7ff feff 	bl	8003e44 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	3324      	adds	r3, #36	@ 0x24
 800404a:	4618      	mov	r0, r3
 800404c:	f7ff fefa 	bl	8003e44 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8004050:	f002 fbde 	bl	8006810 <vPortExitCritical>
 8004054:	e001      	b.n	800405a <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8004056:	2300      	movs	r3, #0
 8004058:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10b      	bne.n	8004078 <xQueueGenericReset+0x114>
        __asm volatile
 8004060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004064:	f383 8811 	msr	BASEPRI, r3
 8004068:	f3bf 8f6f 	isb	sy
 800406c:	f3bf 8f4f 	dsb	sy
 8004070:	60bb      	str	r3, [r7, #8]
    }
 8004072:	bf00      	nop
 8004074:	bf00      	nop
 8004076:	e7fd      	b.n	8004074 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8004078:	697b      	ldr	r3, [r7, #20]
}
 800407a:	4618      	mov	r0, r3
 800407c:	3718      	adds	r7, #24
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	e000ed04 	.word	0xe000ed04

08004088 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004088:	b580      	push	{r7, lr}
 800408a:	b08a      	sub	sp, #40	@ 0x28
 800408c:	af02      	add	r7, sp, #8
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	4613      	mov	r3, r2
 8004094:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8004096:	2300      	movs	r3, #0
 8004098:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d02e      	beq.n	80040fe <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80040a0:	2100      	movs	r1, #0
 80040a2:	68ba      	ldr	r2, [r7, #8]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	fba3 2302 	umull	r2, r3, r3, r2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d000      	beq.n	80040b0 <xQueueGenericCreate+0x28>
 80040ae:	2101      	movs	r1, #1
 80040b0:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d123      	bne.n	80040fe <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	68ba      	ldr	r2, [r7, #8]
 80040ba:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80040be:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 80040c2:	d81c      	bhi.n	80040fe <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	68ba      	ldr	r2, [r7, #8]
 80040c8:	fb02 f303 	mul.w	r3, r2, r3
 80040cc:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	3350      	adds	r3, #80	@ 0x50
 80040d2:	4618      	mov	r0, r3
 80040d4:	f002 fc52 	bl	800697c <pvPortMalloc>
 80040d8:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d01d      	beq.n	800411c <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	3350      	adds	r3, #80	@ 0x50
 80040e8:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80040ea:	79fa      	ldrb	r2, [r7, #7]
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	4613      	mov	r3, r2
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	68b9      	ldr	r1, [r7, #8]
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f000 f815 	bl	8004126 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80040fc:	e00e      	b.n	800411c <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d10b      	bne.n	800411c <xQueueGenericCreate+0x94>
        __asm volatile
 8004104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004108:	f383 8811 	msr	BASEPRI, r3
 800410c:	f3bf 8f6f 	isb	sy
 8004110:	f3bf 8f4f 	dsb	sy
 8004114:	613b      	str	r3, [r7, #16]
    }
 8004116:	bf00      	nop
 8004118:	bf00      	nop
 800411a:	e7fd      	b.n	8004118 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800411c:	69fb      	ldr	r3, [r7, #28]
    }
 800411e:	4618      	mov	r0, r3
 8004120:	3720      	adds	r7, #32
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b084      	sub	sp, #16
 800412a:	af00      	add	r7, sp, #0
 800412c:	60f8      	str	r0, [r7, #12]
 800412e:	60b9      	str	r1, [r7, #8]
 8004130:	607a      	str	r2, [r7, #4]
 8004132:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d103      	bne.n	8004142 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	601a      	str	r2, [r3, #0]
 8004140:	e002      	b.n	8004148 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	68ba      	ldr	r2, [r7, #8]
 8004152:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004154:	2101      	movs	r1, #1
 8004156:	69b8      	ldr	r0, [r7, #24]
 8004158:	f7ff ff04 	bl	8003f64 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	78fa      	ldrb	r2, [r7, #3]
 8004160:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8004164:	bf00      	nop
 8004166:	3710      	adds	r7, #16
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00e      	beq.n	8004198 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800418c:	2300      	movs	r3, #0
 800418e:	2200      	movs	r2, #0
 8004190:	2100      	movs	r1, #0
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 f81c 	bl	80041d0 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8004198:	bf00      	nop
 800419a:	3708      	adds	r7, #8
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b086      	sub	sp, #24
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	4603      	mov	r3, r0
 80041a8:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80041aa:	2301      	movs	r3, #1
 80041ac:	617b      	str	r3, [r7, #20]
 80041ae:	2300      	movs	r3, #0
 80041b0:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80041b2:	79fb      	ldrb	r3, [r7, #7]
 80041b4:	461a      	mov	r2, r3
 80041b6:	6939      	ldr	r1, [r7, #16]
 80041b8:	6978      	ldr	r0, [r7, #20]
 80041ba:	f7ff ff65 	bl	8004088 <xQueueGenericCreate>
 80041be:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80041c0:	68f8      	ldr	r0, [r7, #12]
 80041c2:	f7ff ffd3 	bl	800416c <prvInitialiseMutex>

        return xNewQueue;
 80041c6:	68fb      	ldr	r3, [r7, #12]
    }
 80041c8:	4618      	mov	r0, r3
 80041ca:	3718      	adds	r7, #24
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b08e      	sub	sp, #56	@ 0x38
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
 80041dc:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80041de:	2300      	movs	r3, #0
 80041e0:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 80041e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10b      	bne.n	8004204 <xQueueGenericSend+0x34>
        __asm volatile
 80041ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041f0:	f383 8811 	msr	BASEPRI, r3
 80041f4:	f3bf 8f6f 	isb	sy
 80041f8:	f3bf 8f4f 	dsb	sy
 80041fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 80041fe:	bf00      	nop
 8004200:	bf00      	nop
 8004202:	e7fd      	b.n	8004200 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d103      	bne.n	8004212 <xQueueGenericSend+0x42>
 800420a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800420c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800420e:	2b00      	cmp	r3, #0
 8004210:	d101      	bne.n	8004216 <xQueueGenericSend+0x46>
 8004212:	2301      	movs	r3, #1
 8004214:	e000      	b.n	8004218 <xQueueGenericSend+0x48>
 8004216:	2300      	movs	r3, #0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d10b      	bne.n	8004234 <xQueueGenericSend+0x64>
        __asm volatile
 800421c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004220:	f383 8811 	msr	BASEPRI, r3
 8004224:	f3bf 8f6f 	isb	sy
 8004228:	f3bf 8f4f 	dsb	sy
 800422c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 800422e:	bf00      	nop
 8004230:	bf00      	nop
 8004232:	e7fd      	b.n	8004230 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	2b02      	cmp	r3, #2
 8004238:	d103      	bne.n	8004242 <xQueueGenericSend+0x72>
 800423a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800423c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800423e:	2b01      	cmp	r3, #1
 8004240:	d101      	bne.n	8004246 <xQueueGenericSend+0x76>
 8004242:	2301      	movs	r3, #1
 8004244:	e000      	b.n	8004248 <xQueueGenericSend+0x78>
 8004246:	2300      	movs	r3, #0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d10b      	bne.n	8004264 <xQueueGenericSend+0x94>
        __asm volatile
 800424c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004250:	f383 8811 	msr	BASEPRI, r3
 8004254:	f3bf 8f6f 	isb	sy
 8004258:	f3bf 8f4f 	dsb	sy
 800425c:	623b      	str	r3, [r7, #32]
    }
 800425e:	bf00      	nop
 8004260:	bf00      	nop
 8004262:	e7fd      	b.n	8004260 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004264:	f001 fc34 	bl	8005ad0 <xTaskGetSchedulerState>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d102      	bne.n	8004274 <xQueueGenericSend+0xa4>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d101      	bne.n	8004278 <xQueueGenericSend+0xa8>
 8004274:	2301      	movs	r3, #1
 8004276:	e000      	b.n	800427a <xQueueGenericSend+0xaa>
 8004278:	2300      	movs	r3, #0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10b      	bne.n	8004296 <xQueueGenericSend+0xc6>
        __asm volatile
 800427e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004282:	f383 8811 	msr	BASEPRI, r3
 8004286:	f3bf 8f6f 	isb	sy
 800428a:	f3bf 8f4f 	dsb	sy
 800428e:	61fb      	str	r3, [r7, #28]
    }
 8004290:	bf00      	nop
 8004292:	bf00      	nop
 8004294:	e7fd      	b.n	8004292 <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004296:	f002 fa89 	bl	80067ac <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800429a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800429c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800429e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d302      	bcc.n	80042ac <xQueueGenericSend+0xdc>
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d129      	bne.n	8004300 <xQueueGenericSend+0x130>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80042ac:	683a      	ldr	r2, [r7, #0]
 80042ae:	68b9      	ldr	r1, [r7, #8]
 80042b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80042b2:	f000 fa89 	bl	80047c8 <prvCopyDataToQueue>
 80042b6:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d010      	beq.n	80042e2 <xQueueGenericSend+0x112>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c2:	3324      	adds	r3, #36	@ 0x24
 80042c4:	4618      	mov	r0, r3
 80042c6:	f001 f9ef 	bl	80056a8 <xTaskRemoveFromEventList>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d013      	beq.n	80042f8 <xQueueGenericSend+0x128>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 80042d0:	4b3f      	ldr	r3, [pc, #252]	@ (80043d0 <xQueueGenericSend+0x200>)
 80042d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042d6:	601a      	str	r2, [r3, #0]
 80042d8:	f3bf 8f4f 	dsb	sy
 80042dc:	f3bf 8f6f 	isb	sy
 80042e0:	e00a      	b.n	80042f8 <xQueueGenericSend+0x128>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 80042e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d007      	beq.n	80042f8 <xQueueGenericSend+0x128>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 80042e8:	4b39      	ldr	r3, [pc, #228]	@ (80043d0 <xQueueGenericSend+0x200>)
 80042ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042ee:	601a      	str	r2, [r3, #0]
 80042f0:	f3bf 8f4f 	dsb	sy
 80042f4:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80042f8:	f002 fa8a 	bl	8006810 <vPortExitCritical>
                return pdPASS;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e063      	b.n	80043c8 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d103      	bne.n	800430e <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004306:	f002 fa83 	bl	8006810 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800430a:	2300      	movs	r3, #0
 800430c:	e05c      	b.n	80043c8 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 800430e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004310:	2b00      	cmp	r3, #0
 8004312:	d106      	bne.n	8004322 <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004314:	f107 0314 	add.w	r3, r7, #20
 8004318:	4618      	mov	r0, r3
 800431a:	f001 fa9d 	bl	8005858 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800431e:	2301      	movs	r3, #1
 8004320:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004322:	f002 fa75 	bl	8006810 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004326:	f000 fec5 	bl	80050b4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800432a:	f002 fa3f 	bl	80067ac <vPortEnterCritical>
 800432e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004330:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004334:	b25b      	sxtb	r3, r3
 8004336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800433a:	d103      	bne.n	8004344 <xQueueGenericSend+0x174>
 800433c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800433e:	2200      	movs	r2, #0
 8004340:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004346:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800434a:	b25b      	sxtb	r3, r3
 800434c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004350:	d103      	bne.n	800435a <xQueueGenericSend+0x18a>
 8004352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004354:	2200      	movs	r2, #0
 8004356:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800435a:	f002 fa59 	bl	8006810 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800435e:	1d3a      	adds	r2, r7, #4
 8004360:	f107 0314 	add.w	r3, r7, #20
 8004364:	4611      	mov	r1, r2
 8004366:	4618      	mov	r0, r3
 8004368:	f001 fa8c 	bl	8005884 <xTaskCheckForTimeOut>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d124      	bne.n	80043bc <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004372:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004374:	f000 fb20 	bl	80049b8 <prvIsQueueFull>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d018      	beq.n	80043b0 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800437e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004380:	3310      	adds	r3, #16
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	4611      	mov	r1, r2
 8004386:	4618      	mov	r0, r3
 8004388:	f001 f922 	bl	80055d0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800438c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800438e:	f000 faab 	bl	80048e8 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8004392:	f000 fe9d 	bl	80050d0 <xTaskResumeAll>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	f47f af7c 	bne.w	8004296 <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 800439e:	4b0c      	ldr	r3, [pc, #48]	@ (80043d0 <xQueueGenericSend+0x200>)
 80043a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043a4:	601a      	str	r2, [r3, #0]
 80043a6:	f3bf 8f4f 	dsb	sy
 80043aa:	f3bf 8f6f 	isb	sy
 80043ae:	e772      	b.n	8004296 <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80043b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80043b2:	f000 fa99 	bl	80048e8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80043b6:	f000 fe8b 	bl	80050d0 <xTaskResumeAll>
 80043ba:	e76c      	b.n	8004296 <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80043bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80043be:	f000 fa93 	bl	80048e8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80043c2:	f000 fe85 	bl	80050d0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80043c6:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3738      	adds	r7, #56	@ 0x38
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	e000ed04 	.word	0xe000ed04

080043d4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b08c      	sub	sp, #48	@ 0x30
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80043e0:	2300      	movs	r3, #0
 80043e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80043e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10b      	bne.n	8004406 <xQueueReceive+0x32>
        __asm volatile
 80043ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043f2:	f383 8811 	msr	BASEPRI, r3
 80043f6:	f3bf 8f6f 	isb	sy
 80043fa:	f3bf 8f4f 	dsb	sy
 80043fe:	623b      	str	r3, [r7, #32]
    }
 8004400:	bf00      	nop
 8004402:	bf00      	nop
 8004404:	e7fd      	b.n	8004402 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d103      	bne.n	8004414 <xQueueReceive+0x40>
 800440c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800440e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004410:	2b00      	cmp	r3, #0
 8004412:	d101      	bne.n	8004418 <xQueueReceive+0x44>
 8004414:	2301      	movs	r3, #1
 8004416:	e000      	b.n	800441a <xQueueReceive+0x46>
 8004418:	2300      	movs	r3, #0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10b      	bne.n	8004436 <xQueueReceive+0x62>
        __asm volatile
 800441e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004422:	f383 8811 	msr	BASEPRI, r3
 8004426:	f3bf 8f6f 	isb	sy
 800442a:	f3bf 8f4f 	dsb	sy
 800442e:	61fb      	str	r3, [r7, #28]
    }
 8004430:	bf00      	nop
 8004432:	bf00      	nop
 8004434:	e7fd      	b.n	8004432 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004436:	f001 fb4b 	bl	8005ad0 <xTaskGetSchedulerState>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d102      	bne.n	8004446 <xQueueReceive+0x72>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d101      	bne.n	800444a <xQueueReceive+0x76>
 8004446:	2301      	movs	r3, #1
 8004448:	e000      	b.n	800444c <xQueueReceive+0x78>
 800444a:	2300      	movs	r3, #0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d10b      	bne.n	8004468 <xQueueReceive+0x94>
        __asm volatile
 8004450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004454:	f383 8811 	msr	BASEPRI, r3
 8004458:	f3bf 8f6f 	isb	sy
 800445c:	f3bf 8f4f 	dsb	sy
 8004460:	61bb      	str	r3, [r7, #24]
    }
 8004462:	bf00      	nop
 8004464:	bf00      	nop
 8004466:	e7fd      	b.n	8004464 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004468:	f002 f9a0 	bl	80067ac <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800446c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800446e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004470:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004474:	2b00      	cmp	r3, #0
 8004476:	d01f      	beq.n	80044b8 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004478:	68b9      	ldr	r1, [r7, #8]
 800447a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800447c:	f000 fa0e 	bl	800489c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004482:	1e5a      	subs	r2, r3, #1
 8004484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004486:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00f      	beq.n	80044b0 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004492:	3310      	adds	r3, #16
 8004494:	4618      	mov	r0, r3
 8004496:	f001 f907 	bl	80056a8 <xTaskRemoveFromEventList>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d007      	beq.n	80044b0 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80044a0:	4b3c      	ldr	r3, [pc, #240]	@ (8004594 <xQueueReceive+0x1c0>)
 80044a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044a6:	601a      	str	r2, [r3, #0]
 80044a8:	f3bf 8f4f 	dsb	sy
 80044ac:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80044b0:	f002 f9ae 	bl	8006810 <vPortExitCritical>
                return pdPASS;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e069      	b.n	800458c <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d103      	bne.n	80044c6 <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80044be:	f002 f9a7 	bl	8006810 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80044c2:	2300      	movs	r3, #0
 80044c4:	e062      	b.n	800458c <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 80044c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d106      	bne.n	80044da <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80044cc:	f107 0310 	add.w	r3, r7, #16
 80044d0:	4618      	mov	r0, r3
 80044d2:	f001 f9c1 	bl	8005858 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80044d6:	2301      	movs	r3, #1
 80044d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80044da:	f002 f999 	bl	8006810 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80044de:	f000 fde9 	bl	80050b4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80044e2:	f002 f963 	bl	80067ac <vPortEnterCritical>
 80044e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80044ec:	b25b      	sxtb	r3, r3
 80044ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f2:	d103      	bne.n	80044fc <xQueueReceive+0x128>
 80044f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004502:	b25b      	sxtb	r3, r3
 8004504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004508:	d103      	bne.n	8004512 <xQueueReceive+0x13e>
 800450a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004512:	f002 f97d 	bl	8006810 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004516:	1d3a      	adds	r2, r7, #4
 8004518:	f107 0310 	add.w	r3, r7, #16
 800451c:	4611      	mov	r1, r2
 800451e:	4618      	mov	r0, r3
 8004520:	f001 f9b0 	bl	8005884 <xTaskCheckForTimeOut>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d123      	bne.n	8004572 <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800452a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800452c:	f000 fa2e 	bl	800498c <prvIsQueueEmpty>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d017      	beq.n	8004566 <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004538:	3324      	adds	r3, #36	@ 0x24
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	4611      	mov	r1, r2
 800453e:	4618      	mov	r0, r3
 8004540:	f001 f846 	bl	80055d0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004544:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004546:	f000 f9cf 	bl	80048e8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800454a:	f000 fdc1 	bl	80050d0 <xTaskResumeAll>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d189      	bne.n	8004468 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8004554:	4b0f      	ldr	r3, [pc, #60]	@ (8004594 <xQueueReceive+0x1c0>)
 8004556:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800455a:	601a      	str	r2, [r3, #0]
 800455c:	f3bf 8f4f 	dsb	sy
 8004560:	f3bf 8f6f 	isb	sy
 8004564:	e780      	b.n	8004468 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8004566:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004568:	f000 f9be 	bl	80048e8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800456c:	f000 fdb0 	bl	80050d0 <xTaskResumeAll>
 8004570:	e77a      	b.n	8004468 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8004572:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004574:	f000 f9b8 	bl	80048e8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004578:	f000 fdaa 	bl	80050d0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800457c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800457e:	f000 fa05 	bl	800498c <prvIsQueueEmpty>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	f43f af6f 	beq.w	8004468 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800458a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800458c:	4618      	mov	r0, r3
 800458e:	3730      	adds	r7, #48	@ 0x30
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	e000ed04 	.word	0xe000ed04

08004598 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b08c      	sub	sp, #48	@ 0x30
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 80045a2:	2300      	movs	r3, #0
 80045a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	627b      	str	r3, [r7, #36]	@ 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 80045aa:	2300      	movs	r3, #0
 80045ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80045ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d10b      	bne.n	80045cc <xQueueSemaphoreTake+0x34>
        __asm volatile
 80045b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045b8:	f383 8811 	msr	BASEPRI, r3
 80045bc:	f3bf 8f6f 	isb	sy
 80045c0:	f3bf 8f4f 	dsb	sy
 80045c4:	61bb      	str	r3, [r7, #24]
    }
 80045c6:	bf00      	nop
 80045c8:	bf00      	nop
 80045ca:	e7fd      	b.n	80045c8 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 80045cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00b      	beq.n	80045ec <xQueueSemaphoreTake+0x54>
        __asm volatile
 80045d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045d8:	f383 8811 	msr	BASEPRI, r3
 80045dc:	f3bf 8f6f 	isb	sy
 80045e0:	f3bf 8f4f 	dsb	sy
 80045e4:	617b      	str	r3, [r7, #20]
    }
 80045e6:	bf00      	nop
 80045e8:	bf00      	nop
 80045ea:	e7fd      	b.n	80045e8 <xQueueSemaphoreTake+0x50>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045ec:	f001 fa70 	bl	8005ad0 <xTaskGetSchedulerState>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d102      	bne.n	80045fc <xQueueSemaphoreTake+0x64>
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d101      	bne.n	8004600 <xQueueSemaphoreTake+0x68>
 80045fc:	2301      	movs	r3, #1
 80045fe:	e000      	b.n	8004602 <xQueueSemaphoreTake+0x6a>
 8004600:	2300      	movs	r3, #0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d10b      	bne.n	800461e <xQueueSemaphoreTake+0x86>
        __asm volatile
 8004606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800460a:	f383 8811 	msr	BASEPRI, r3
 800460e:	f3bf 8f6f 	isb	sy
 8004612:	f3bf 8f4f 	dsb	sy
 8004616:	613b      	str	r3, [r7, #16]
    }
 8004618:	bf00      	nop
 800461a:	bf00      	nop
 800461c:	e7fd      	b.n	800461a <xQueueSemaphoreTake+0x82>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800461e:	f002 f8c5 	bl	80067ac <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004626:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004628:	6a3b      	ldr	r3, [r7, #32]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d024      	beq.n	8004678 <xQueueSemaphoreTake+0xe0>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800462e:	6a3b      	ldr	r3, [r7, #32]
 8004630:	1e5a      	subs	r2, r3, #1
 8004632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004634:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d104      	bne.n	8004648 <xQueueSemaphoreTake+0xb0>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800463e:	f001 fc63 	bl	8005f08 <pvTaskIncrementMutexHeldCount>
 8004642:	4602      	mov	r2, r0
 8004644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004646:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00f      	beq.n	8004670 <xQueueSemaphoreTake+0xd8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004652:	3310      	adds	r3, #16
 8004654:	4618      	mov	r0, r3
 8004656:	f001 f827 	bl	80056a8 <xTaskRemoveFromEventList>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d007      	beq.n	8004670 <xQueueSemaphoreTake+0xd8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004660:	4b4c      	ldr	r3, [pc, #304]	@ (8004794 <xQueueSemaphoreTake+0x1fc>)
 8004662:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004666:	601a      	str	r2, [r3, #0]
 8004668:	f3bf 8f4f 	dsb	sy
 800466c:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8004670:	f002 f8ce 	bl	8006810 <vPortExitCritical>
                return pdPASS;
 8004674:	2301      	movs	r3, #1
 8004676:	e089      	b.n	800478c <xQueueSemaphoreTake+0x1f4>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d103      	bne.n	8004686 <xQueueSemaphoreTake+0xee>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 800467e:	f002 f8c7 	bl	8006810 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8004682:	2300      	movs	r3, #0
 8004684:	e082      	b.n	800478c <xQueueSemaphoreTake+0x1f4>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004688:	2b00      	cmp	r3, #0
 800468a:	d106      	bne.n	800469a <xQueueSemaphoreTake+0x102>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800468c:	f107 0308 	add.w	r3, r7, #8
 8004690:	4618      	mov	r0, r3
 8004692:	f001 f8e1 	bl	8005858 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004696:	2301      	movs	r3, #1
 8004698:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800469a:	f002 f8b9 	bl	8006810 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800469e:	f000 fd09 	bl	80050b4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80046a2:	f002 f883 	bl	80067ac <vPortEnterCritical>
 80046a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80046ac:	b25b      	sxtb	r3, r3
 80046ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b2:	d103      	bne.n	80046bc <xQueueSemaphoreTake+0x124>
 80046b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80046c2:	b25b      	sxtb	r3, r3
 80046c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c8:	d103      	bne.n	80046d2 <xQueueSemaphoreTake+0x13a>
 80046ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80046d2:	f002 f89d 	bl	8006810 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80046d6:	463a      	mov	r2, r7
 80046d8:	f107 0308 	add.w	r3, r7, #8
 80046dc:	4611      	mov	r1, r2
 80046de:	4618      	mov	r0, r3
 80046e0:	f001 f8d0 	bl	8005884 <xTaskCheckForTimeOut>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d132      	bne.n	8004750 <xQueueSemaphoreTake+0x1b8>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80046ec:	f000 f94e 	bl	800498c <prvIsQueueEmpty>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d026      	beq.n	8004744 <xQueueSemaphoreTake+0x1ac>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80046f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d109      	bne.n	8004712 <xQueueSemaphoreTake+0x17a>
                    {
                        taskENTER_CRITICAL();
 80046fe:	f002 f855 	bl	80067ac <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	4618      	mov	r0, r3
 8004708:	f001 fa00 	bl	8005b0c <xTaskPriorityInherit>
 800470c:	62b8      	str	r0, [r7, #40]	@ 0x28
                        }
                        taskEXIT_CRITICAL();
 800470e:	f002 f87f 	bl	8006810 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004714:	3324      	adds	r3, #36	@ 0x24
 8004716:	683a      	ldr	r2, [r7, #0]
 8004718:	4611      	mov	r1, r2
 800471a:	4618      	mov	r0, r3
 800471c:	f000 ff58 	bl	80055d0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004720:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004722:	f000 f8e1 	bl	80048e8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004726:	f000 fcd3 	bl	80050d0 <xTaskResumeAll>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	f47f af76 	bne.w	800461e <xQueueSemaphoreTake+0x86>
                {
                    portYIELD_WITHIN_API();
 8004732:	4b18      	ldr	r3, [pc, #96]	@ (8004794 <xQueueSemaphoreTake+0x1fc>)
 8004734:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	f3bf 8f4f 	dsb	sy
 800473e:	f3bf 8f6f 	isb	sy
 8004742:	e76c      	b.n	800461e <xQueueSemaphoreTake+0x86>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8004744:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004746:	f000 f8cf 	bl	80048e8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800474a:	f000 fcc1 	bl	80050d0 <xTaskResumeAll>
 800474e:	e766      	b.n	800461e <xQueueSemaphoreTake+0x86>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8004750:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004752:	f000 f8c9 	bl	80048e8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004756:	f000 fcbb 	bl	80050d0 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800475a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800475c:	f000 f916 	bl	800498c <prvIsQueueEmpty>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	f43f af5b 	beq.w	800461e <xQueueSemaphoreTake+0x86>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 8004768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00d      	beq.n	800478a <xQueueSemaphoreTake+0x1f2>
                    {
                        taskENTER_CRITICAL();
 800476e:	f002 f81d 	bl	80067ac <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004772:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004774:	f000 f810 	bl	8004798 <prvGetDisinheritPriorityAfterTimeout>
 8004778:	61f8      	str	r0, [r7, #28]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800477a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	69f9      	ldr	r1, [r7, #28]
 8004780:	4618      	mov	r0, r3
 8004782:	f001 fb07 	bl	8005d94 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 8004786:	f002 f843 	bl	8006810 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800478a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800478c:	4618      	mov	r0, r3
 800478e:	3730      	adds	r7, #48	@ 0x30
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	e000ed04 	.word	0xe000ed04

08004798 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d006      	beq.n	80047b6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f1c3 0305 	rsb	r3, r3, #5
 80047b2:	60fb      	str	r3, [r7, #12]
 80047b4:	e001      	b.n	80047ba <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80047b6:	2300      	movs	r3, #0
 80047b8:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 80047ba:	68fb      	ldr	r3, [r7, #12]
    }
 80047bc:	4618      	mov	r0, r3
 80047be:	3714      	adds	r7, #20
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b086      	sub	sp, #24
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80047d4:	2300      	movs	r3, #0
 80047d6:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047dc:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10d      	bne.n	8004802 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d14d      	bne.n	800488a <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f001 fa28 	bl	8005c48 <xTaskPriorityDisinherit>
 80047f8:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2200      	movs	r2, #0
 80047fe:	609a      	str	r2, [r3, #8]
 8004800:	e043      	b.n	800488a <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d119      	bne.n	800483c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6858      	ldr	r0, [r3, #4]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004810:	461a      	mov	r2, r3
 8004812:	68b9      	ldr	r1, [r7, #8]
 8004814:	f002 fad0 	bl	8006db8 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	685a      	ldr	r2, [r3, #4]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004820:	441a      	add	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	429a      	cmp	r2, r3
 8004830:	d32b      	bcc.n	800488a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	605a      	str	r2, [r3, #4]
 800483a:	e026      	b.n	800488a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	68d8      	ldr	r0, [r3, #12]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004844:	461a      	mov	r2, r3
 8004846:	68b9      	ldr	r1, [r7, #8]
 8004848:	f002 fab6 	bl	8006db8 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	68da      	ldr	r2, [r3, #12]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004854:	425b      	negs	r3, r3
 8004856:	441a      	add	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	68da      	ldr	r2, [r3, #12]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	429a      	cmp	r2, r3
 8004866:	d207      	bcs.n	8004878 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	689a      	ldr	r2, [r3, #8]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004870:	425b      	negs	r3, r3
 8004872:	441a      	add	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2b02      	cmp	r3, #2
 800487c:	d105      	bne.n	800488a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d002      	beq.n	800488a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	3b01      	subs	r3, #1
 8004888:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	1c5a      	adds	r2, r3, #1
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8004892:	697b      	ldr	r3, [r7, #20]
}
 8004894:	4618      	mov	r0, r3
 8004896:	3718      	adds	r7, #24
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d018      	beq.n	80048e0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	68da      	ldr	r2, [r3, #12]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b6:	441a      	add	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68da      	ldr	r2, [r3, #12]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d303      	bcc.n	80048d0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	68d9      	ldr	r1, [r3, #12]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d8:	461a      	mov	r2, r3
 80048da:	6838      	ldr	r0, [r7, #0]
 80048dc:	f002 fa6c 	bl	8006db8 <memcpy>
    }
}
 80048e0:	bf00      	nop
 80048e2:	3708      	adds	r7, #8
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80048f0:	f001 ff5c 	bl	80067ac <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80048fa:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80048fc:	e011      	b.n	8004922 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004902:	2b00      	cmp	r3, #0
 8004904:	d012      	beq.n	800492c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	3324      	adds	r3, #36	@ 0x24
 800490a:	4618      	mov	r0, r3
 800490c:	f000 fecc 	bl	80056a8 <xTaskRemoveFromEventList>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d001      	beq.n	800491a <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8004916:	f001 f81d 	bl	8005954 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800491a:	7bfb      	ldrb	r3, [r7, #15]
 800491c:	3b01      	subs	r3, #1
 800491e:	b2db      	uxtb	r3, r3
 8004920:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004926:	2b00      	cmp	r3, #0
 8004928:	dce9      	bgt.n	80048fe <prvUnlockQueue+0x16>
 800492a:	e000      	b.n	800492e <prvUnlockQueue+0x46>
                    break;
 800492c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	22ff      	movs	r2, #255	@ 0xff
 8004932:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8004936:	f001 ff6b 	bl	8006810 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800493a:	f001 ff37 	bl	80067ac <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004944:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004946:	e011      	b.n	800496c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d012      	beq.n	8004976 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	3310      	adds	r3, #16
 8004954:	4618      	mov	r0, r3
 8004956:	f000 fea7 	bl	80056a8 <xTaskRemoveFromEventList>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d001      	beq.n	8004964 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8004960:	f000 fff8 	bl	8005954 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8004964:	7bbb      	ldrb	r3, [r7, #14]
 8004966:	3b01      	subs	r3, #1
 8004968:	b2db      	uxtb	r3, r3
 800496a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800496c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004970:	2b00      	cmp	r3, #0
 8004972:	dce9      	bgt.n	8004948 <prvUnlockQueue+0x60>
 8004974:	e000      	b.n	8004978 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8004976:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	22ff      	movs	r2, #255	@ 0xff
 800497c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8004980:	f001 ff46 	bl	8006810 <vPortExitCritical>
}
 8004984:	bf00      	nop
 8004986:	3710      	adds	r7, #16
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004994:	f001 ff0a 	bl	80067ac <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800499c:	2b00      	cmp	r3, #0
 800499e:	d102      	bne.n	80049a6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80049a0:	2301      	movs	r3, #1
 80049a2:	60fb      	str	r3, [r7, #12]
 80049a4:	e001      	b.n	80049aa <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80049a6:	2300      	movs	r3, #0
 80049a8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80049aa:	f001 ff31 	bl	8006810 <vPortExitCritical>

    return xReturn;
 80049ae:	68fb      	ldr	r3, [r7, #12]
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3710      	adds	r7, #16
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80049c0:	f001 fef4 	bl	80067ac <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d102      	bne.n	80049d6 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80049d0:	2301      	movs	r3, #1
 80049d2:	60fb      	str	r3, [r7, #12]
 80049d4:	e001      	b.n	80049da <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80049d6:	2300      	movs	r3, #0
 80049d8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80049da:	f001 ff19 	bl	8006810 <vPortExitCritical>

    return xReturn;
 80049de:	68fb      	ldr	r3, [r7, #12]
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3710      	adds	r7, #16
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80049e8:	b480      	push	{r7}
 80049ea:	b087      	sub	sp, #28
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80049f2:	2300      	movs	r3, #0
 80049f4:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d10b      	bne.n	8004a14 <vQueueAddToRegistry+0x2c>
        __asm volatile
 80049fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a00:	f383 8811 	msr	BASEPRI, r3
 8004a04:	f3bf 8f6f 	isb	sy
 8004a08:	f3bf 8f4f 	dsb	sy
 8004a0c:	60fb      	str	r3, [r7, #12]
    }
 8004a0e:	bf00      	nop
 8004a10:	bf00      	nop
 8004a12:	e7fd      	b.n	8004a10 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d024      	beq.n	8004a64 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	617b      	str	r3, [r7, #20]
 8004a1e:	e01e      	b.n	8004a5e <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8004a20:	4a18      	ldr	r2, [pc, #96]	@ (8004a84 <vQueueAddToRegistry+0x9c>)
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	00db      	lsls	r3, r3, #3
 8004a26:	4413      	add	r3, r2
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d105      	bne.n	8004a3c <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	00db      	lsls	r3, r3, #3
 8004a34:	4a13      	ldr	r2, [pc, #76]	@ (8004a84 <vQueueAddToRegistry+0x9c>)
 8004a36:	4413      	add	r3, r2
 8004a38:	613b      	str	r3, [r7, #16]
                    break;
 8004a3a:	e013      	b.n	8004a64 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10a      	bne.n	8004a58 <vQueueAddToRegistry+0x70>
 8004a42:	4a10      	ldr	r2, [pc, #64]	@ (8004a84 <vQueueAddToRegistry+0x9c>)
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d104      	bne.n	8004a58 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	00db      	lsls	r3, r3, #3
 8004a52:	4a0c      	ldr	r2, [pc, #48]	@ (8004a84 <vQueueAddToRegistry+0x9c>)
 8004a54:	4413      	add	r3, r2
 8004a56:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	617b      	str	r3, [r7, #20]
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	2b07      	cmp	r3, #7
 8004a62:	d9dd      	bls.n	8004a20 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d005      	beq.n	8004a76 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	683a      	ldr	r2, [r7, #0]
 8004a6e:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8004a76:	bf00      	nop
 8004a78:	371c      	adds	r7, #28
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	200005c0 	.word	0x200005c0

08004a88 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b086      	sub	sp, #24
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8004a98:	f001 fe88 	bl	80067ac <vPortEnterCritical>
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004aa2:	b25b      	sxtb	r3, r3
 8004aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa8:	d103      	bne.n	8004ab2 <vQueueWaitForMessageRestricted+0x2a>
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ab8:	b25b      	sxtb	r3, r3
 8004aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004abe:	d103      	bne.n	8004ac8 <vQueueWaitForMessageRestricted+0x40>
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ac8:	f001 fea2 	bl	8006810 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d106      	bne.n	8004ae2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	3324      	adds	r3, #36	@ 0x24
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	68b9      	ldr	r1, [r7, #8]
 8004adc:	4618      	mov	r0, r3
 8004ade:	f000 fd9d 	bl	800561c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8004ae2:	6978      	ldr	r0, [r7, #20]
 8004ae4:	f7ff ff00 	bl	80048e8 <prvUnlockQueue>
    }
 8004ae8:	bf00      	nop
 8004aea:	3718      	adds	r7, #24
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b08c      	sub	sp, #48	@ 0x30
 8004af4:	af04      	add	r7, sp, #16
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	603b      	str	r3, [r7, #0]
 8004afc:	4613      	mov	r3, r2
 8004afe:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004b00:	88fb      	ldrh	r3, [r7, #6]
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4618      	mov	r0, r3
 8004b06:	f001 ff39 	bl	800697c <pvPortMalloc>
 8004b0a:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d013      	beq.n	8004b3a <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004b12:	2058      	movs	r0, #88	@ 0x58
 8004b14:	f001 ff32 	bl	800697c <pvPortMalloc>
 8004b18:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d008      	beq.n	8004b32 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8004b20:	2258      	movs	r2, #88	@ 0x58
 8004b22:	2100      	movs	r1, #0
 8004b24:	69f8      	ldr	r0, [r7, #28]
 8004b26:	f002 f919 	bl	8006d5c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	697a      	ldr	r2, [r7, #20]
 8004b2e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004b30:	e005      	b.n	8004b3e <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8004b32:	6978      	ldr	r0, [r7, #20]
 8004b34:	f001 ffde 	bl	8006af4 <vPortFree>
 8004b38:	e001      	b.n	8004b3e <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d013      	beq.n	8004b6c <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004b44:	88fa      	ldrh	r2, [r7, #6]
 8004b46:	2300      	movs	r3, #0
 8004b48:	9303      	str	r3, [sp, #12]
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	9302      	str	r3, [sp, #8]
 8004b4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b50:	9301      	str	r3, [sp, #4]
 8004b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b54:	9300      	str	r3, [sp, #0]
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	68b9      	ldr	r1, [r7, #8]
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f000 f80e 	bl	8004b7c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8004b60:	69f8      	ldr	r0, [r7, #28]
 8004b62:	f000 f89b 	bl	8004c9c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8004b66:	2301      	movs	r3, #1
 8004b68:	61bb      	str	r3, [r7, #24]
 8004b6a:	e002      	b.n	8004b72 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b70:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8004b72:	69bb      	ldr	r3, [r7, #24]
    }
 8004b74:	4618      	mov	r0, r3
 8004b76:	3720      	adds	r7, #32
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b088      	sub	sp, #32
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	607a      	str	r2, [r7, #4]
 8004b88:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b8c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	461a      	mov	r2, r3
 8004b94:	21a5      	movs	r1, #165	@ 0xa5
 8004b96:	f002 f8e1 	bl	8006d5c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	4413      	add	r3, r2
 8004baa:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	f023 0307 	bic.w	r3, r3, #7
 8004bb2:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	f003 0307 	and.w	r3, r3, #7
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00b      	beq.n	8004bd6 <prvInitialiseNewTask+0x5a>
        __asm volatile
 8004bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bc2:	f383 8811 	msr	BASEPRI, r3
 8004bc6:	f3bf 8f6f 	isb	sy
 8004bca:	f3bf 8f4f 	dsb	sy
 8004bce:	617b      	str	r3, [r7, #20]
    }
 8004bd0:	bf00      	nop
 8004bd2:	bf00      	nop
 8004bd4:	e7fd      	b.n	8004bd2 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d01e      	beq.n	8004c1a <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004bdc:	2300      	movs	r3, #0
 8004bde:	61fb      	str	r3, [r7, #28]
 8004be0:	e012      	b.n	8004c08 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004be2:	68ba      	ldr	r2, [r7, #8]
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	4413      	add	r3, r2
 8004be8:	7819      	ldrb	r1, [r3, #0]
 8004bea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	4413      	add	r3, r2
 8004bf0:	3334      	adds	r3, #52	@ 0x34
 8004bf2:	460a      	mov	r2, r1
 8004bf4:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8004bf6:	68ba      	ldr	r2, [r7, #8]
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d006      	beq.n	8004c10 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	3301      	adds	r3, #1
 8004c06:	61fb      	str	r3, [r7, #28]
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	2b09      	cmp	r3, #9
 8004c0c:	d9e9      	bls.n	8004be2 <prvInitialiseNewTask+0x66>
 8004c0e:	e000      	b.n	8004c12 <prvInitialiseNewTask+0x96>
            {
                break;
 8004c10:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8004c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c1c:	2b04      	cmp	r3, #4
 8004c1e:	d90b      	bls.n	8004c38 <prvInitialiseNewTask+0xbc>
        __asm volatile
 8004c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c24:	f383 8811 	msr	BASEPRI, r3
 8004c28:	f3bf 8f6f 	isb	sy
 8004c2c:	f3bf 8f4f 	dsb	sy
 8004c30:	613b      	str	r3, [r7, #16]
    }
 8004c32:	bf00      	nop
 8004c34:	bf00      	nop
 8004c36:	e7fd      	b.n	8004c34 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c3a:	2b04      	cmp	r3, #4
 8004c3c:	d901      	bls.n	8004c42 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004c3e:	2304      	movs	r3, #4
 8004c40:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8004c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c46:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8004c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c4c:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c50:	3304      	adds	r3, #4
 8004c52:	4618      	mov	r0, r3
 8004c54:	f7ff f916 	bl	8003e84 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c5a:	3318      	adds	r3, #24
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7ff f911 	bl	8003e84 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c66:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c6a:	f1c3 0205 	rsb	r2, r3, #5
 8004c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c70:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c76:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004c78:	683a      	ldr	r2, [r7, #0]
 8004c7a:	68f9      	ldr	r1, [r7, #12]
 8004c7c:	69b8      	ldr	r0, [r7, #24]
 8004c7e:	f001 fc63 	bl	8006548 <pxPortInitialiseStack>
 8004c82:	4602      	mov	r2, r0
 8004c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c86:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8004c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d002      	beq.n	8004c94 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c92:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004c94:	bf00      	nop
 8004c96:	3720      	adds	r7, #32
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8004ca4:	f001 fd82 	bl	80067ac <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8004ca8:	4b40      	ldr	r3, [pc, #256]	@ (8004dac <prvAddNewTaskToReadyList+0x110>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	3301      	adds	r3, #1
 8004cae:	4a3f      	ldr	r2, [pc, #252]	@ (8004dac <prvAddNewTaskToReadyList+0x110>)
 8004cb0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8004cb2:	4b3f      	ldr	r3, [pc, #252]	@ (8004db0 <prvAddNewTaskToReadyList+0x114>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d109      	bne.n	8004cce <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8004cba:	4a3d      	ldr	r2, [pc, #244]	@ (8004db0 <prvAddNewTaskToReadyList+0x114>)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004cc0:	4b3a      	ldr	r3, [pc, #232]	@ (8004dac <prvAddNewTaskToReadyList+0x110>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d110      	bne.n	8004cea <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8004cc8:	f000 fe68 	bl	800599c <prvInitialiseTaskLists>
 8004ccc:	e00d      	b.n	8004cea <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8004cce:	4b39      	ldr	r3, [pc, #228]	@ (8004db4 <prvAddNewTaskToReadyList+0x118>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d109      	bne.n	8004cea <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004cd6:	4b36      	ldr	r3, [pc, #216]	@ (8004db0 <prvAddNewTaskToReadyList+0x114>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d802      	bhi.n	8004cea <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8004ce4:	4a32      	ldr	r2, [pc, #200]	@ (8004db0 <prvAddNewTaskToReadyList+0x114>)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8004cea:	4b33      	ldr	r3, [pc, #204]	@ (8004db8 <prvAddNewTaskToReadyList+0x11c>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	3301      	adds	r3, #1
 8004cf0:	4a31      	ldr	r2, [pc, #196]	@ (8004db8 <prvAddNewTaskToReadyList+0x11c>)
 8004cf2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004cf4:	4b30      	ldr	r3, [pc, #192]	@ (8004db8 <prvAddNewTaskToReadyList+0x11c>)
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d00:	2201      	movs	r2, #1
 8004d02:	409a      	lsls	r2, r3
 8004d04:	4b2d      	ldr	r3, [pc, #180]	@ (8004dbc <prvAddNewTaskToReadyList+0x120>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	4a2c      	ldr	r2, [pc, #176]	@ (8004dbc <prvAddNewTaskToReadyList+0x120>)
 8004d0c:	6013      	str	r3, [r2, #0]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d12:	492b      	ldr	r1, [pc, #172]	@ (8004dc0 <prvAddNewTaskToReadyList+0x124>)
 8004d14:	4613      	mov	r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4413      	add	r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	440b      	add	r3, r1
 8004d1e:	3304      	adds	r3, #4
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	60fb      	str	r3, [r7, #12]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	609a      	str	r2, [r3, #8]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	689a      	ldr	r2, [r3, #8]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	60da      	str	r2, [r3, #12]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	3204      	adds	r2, #4
 8004d3a:	605a      	str	r2, [r3, #4]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	1d1a      	adds	r2, r3, #4
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	609a      	str	r2, [r3, #8]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d48:	4613      	mov	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	4413      	add	r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	4a1b      	ldr	r2, [pc, #108]	@ (8004dc0 <prvAddNewTaskToReadyList+0x124>)
 8004d52:	441a      	add	r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	615a      	str	r2, [r3, #20]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d5c:	4918      	ldr	r1, [pc, #96]	@ (8004dc0 <prvAddNewTaskToReadyList+0x124>)
 8004d5e:	4613      	mov	r3, r2
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	4413      	add	r3, r2
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	440b      	add	r3, r1
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	1c59      	adds	r1, r3, #1
 8004d6c:	4814      	ldr	r0, [pc, #80]	@ (8004dc0 <prvAddNewTaskToReadyList+0x124>)
 8004d6e:	4613      	mov	r3, r2
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	4413      	add	r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	4403      	add	r3, r0
 8004d78:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8004d7a:	f001 fd49 	bl	8006810 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8004d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8004db4 <prvAddNewTaskToReadyList+0x118>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00e      	beq.n	8004da4 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004d86:	4b0a      	ldr	r3, [pc, #40]	@ (8004db0 <prvAddNewTaskToReadyList+0x114>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d207      	bcs.n	8004da4 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8004d94:	4b0b      	ldr	r3, [pc, #44]	@ (8004dc4 <prvAddNewTaskToReadyList+0x128>)
 8004d96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d9a:	601a      	str	r2, [r3, #0]
 8004d9c:	f3bf 8f4f 	dsb	sy
 8004da0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004da4:	bf00      	nop
 8004da6:	3710      	adds	r7, #16
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	200006d8 	.word	0x200006d8
 8004db0:	20000600 	.word	0x20000600
 8004db4:	200006e4 	.word	0x200006e4
 8004db8:	200006f4 	.word	0x200006f4
 8004dbc:	200006e0 	.word	0x200006e0
 8004dc0:	20000604 	.word	0x20000604
 8004dc4:	e000ed04 	.word	0xe000ed04

08004dc8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d018      	beq.n	8004e0c <vTaskDelay+0x44>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8004dda:	4b14      	ldr	r3, [pc, #80]	@ (8004e2c <vTaskDelay+0x64>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00b      	beq.n	8004dfa <vTaskDelay+0x32>
        __asm volatile
 8004de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004de6:	f383 8811 	msr	BASEPRI, r3
 8004dea:	f3bf 8f6f 	isb	sy
 8004dee:	f3bf 8f4f 	dsb	sy
 8004df2:	60bb      	str	r3, [r7, #8]
    }
 8004df4:	bf00      	nop
 8004df6:	bf00      	nop
 8004df8:	e7fd      	b.n	8004df6 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8004dfa:	f000 f95b 	bl	80050b4 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004dfe:	2100      	movs	r1, #0
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f001 f895 	bl	8005f30 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8004e06:	f000 f963 	bl	80050d0 <xTaskResumeAll>
 8004e0a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d107      	bne.n	8004e22 <vTaskDelay+0x5a>
        {
            portYIELD_WITHIN_API();
 8004e12:	4b07      	ldr	r3, [pc, #28]	@ (8004e30 <vTaskDelay+0x68>)
 8004e14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e18:	601a      	str	r2, [r3, #0]
 8004e1a:	f3bf 8f4f 	dsb	sy
 8004e1e:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004e22:	bf00      	nop
 8004e24:	3710      	adds	r7, #16
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	20000700 	.word	0x20000700
 8004e30:	e000ed04 	.word	0xe000ed04

08004e34 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

    UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
    {
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
        TCB_t const * pxTCB;
        UBaseType_t uxReturn;

        taskENTER_CRITICAL();
 8004e3c:	f001 fcb6 	bl	80067ac <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the task
             * that called uxTaskPriorityGet() that is being queried. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d102      	bne.n	8004e4c <uxTaskPriorityGet+0x18>
 8004e46:	4b07      	ldr	r3, [pc, #28]	@ (8004e64 <uxTaskPriorityGet+0x30>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	e000      	b.n	8004e4e <uxTaskPriorityGet+0x1a>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	60fb      	str	r3, [r7, #12]
            uxReturn = pxTCB->uxPriority;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e54:	60bb      	str	r3, [r7, #8]
        }
        taskEXIT_CRITICAL();
 8004e56:	f001 fcdb 	bl	8006810 <vPortExitCritical>

        return uxReturn;
 8004e5a:	68bb      	ldr	r3, [r7, #8]
    }
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3710      	adds	r7, #16
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	20000600 	.word	0x20000600

08004e68 <vTaskPrioritySet>:

#if ( INCLUDE_vTaskPrioritySet == 1 )

    void vTaskPrioritySet( TaskHandle_t xTask,
                           UBaseType_t uxNewPriority )
    {
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b088      	sub	sp, #32
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
        BaseType_t xYieldRequired = pdFALSE;
 8004e72:	2300      	movs	r3, #0
 8004e74:	61fb      	str	r3, [r7, #28]

        configASSERT( uxNewPriority < configMAX_PRIORITIES );
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	2b04      	cmp	r3, #4
 8004e7a:	d90b      	bls.n	8004e94 <vTaskPrioritySet+0x2c>
        __asm volatile
 8004e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e80:	f383 8811 	msr	BASEPRI, r3
 8004e84:	f3bf 8f6f 	isb	sy
 8004e88:	f3bf 8f4f 	dsb	sy
 8004e8c:	60bb      	str	r3, [r7, #8]
    }
 8004e8e:	bf00      	nop
 8004e90:	bf00      	nop
 8004e92:	e7fd      	b.n	8004e90 <vTaskPrioritySet+0x28>

        /* Ensure the new priority is valid. */
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	2b04      	cmp	r3, #4
 8004e98:	d901      	bls.n	8004e9e <vTaskPrioritySet+0x36>
        {
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004e9a:	2304      	movs	r3, #4
 8004e9c:	603b      	str	r3, [r7, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8004e9e:	f001 fc85 	bl	80067ac <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being changed. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d102      	bne.n	8004eae <vTaskPrioritySet+0x46>
 8004ea8:	4b55      	ldr	r3, [pc, #340]	@ (8005000 <vTaskPrioritySet+0x198>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	e000      	b.n	8004eb0 <vTaskPrioritySet+0x48>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	61bb      	str	r3, [r7, #24]

            traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

            #if ( configUSE_MUTEXES == 1 )
            {
                uxCurrentBasePriority = pxTCB->uxBasePriority;
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004eb6:	617b      	str	r3, [r7, #20]
            {
                uxCurrentBasePriority = pxTCB->uxPriority;
            }
            #endif

            if( uxCurrentBasePriority != uxNewPriority )
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	f000 8098 	beq.w	8004ff2 <vTaskPrioritySet+0x18a>
            {
                /* The priority change may have readied a task of higher
                 * priority than the calling task. */
                if( uxNewPriority > uxCurrentBasePriority )
 8004ec2:	683a      	ldr	r2, [r7, #0]
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d90d      	bls.n	8004ee6 <vTaskPrioritySet+0x7e>
                {
                    if( pxTCB != pxCurrentTCB )
 8004eca:	4b4d      	ldr	r3, [pc, #308]	@ (8005000 <vTaskPrioritySet+0x198>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	69ba      	ldr	r2, [r7, #24]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d00f      	beq.n	8004ef4 <vTaskPrioritySet+0x8c>
                    {
                        /* The priority of a task other than the currently
                         * running task is being raised.  Is the priority being
                         * raised above that of the running task? */
                        if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8004ed4:	4b4a      	ldr	r3, [pc, #296]	@ (8005000 <vTaskPrioritySet+0x198>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eda:	683a      	ldr	r2, [r7, #0]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d309      	bcc.n	8004ef4 <vTaskPrioritySet+0x8c>
                        {
                            xYieldRequired = pdTRUE;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	61fb      	str	r3, [r7, #28]
 8004ee4:	e006      	b.n	8004ef4 <vTaskPrioritySet+0x8c>
                        /* The priority of the running task is being raised,
                         * but the running task must already be the highest
                         * priority task able to run so no yield is required. */
                    }
                }
                else if( pxTCB == pxCurrentTCB )
 8004ee6:	4b46      	ldr	r3, [pc, #280]	@ (8005000 <vTaskPrioritySet+0x198>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	69ba      	ldr	r2, [r7, #24]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d101      	bne.n	8004ef4 <vTaskPrioritySet+0x8c>
                {
                    /* Setting the priority of the running task down means
                     * there may now be another task of higher priority that
                     * is ready to execute. */
                    xYieldRequired = pdTRUE;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	61fb      	str	r3, [r7, #28]
                }

                /* Remember the ready list the task might be referenced from
                 * before its uxPriority member is changed so the
                 * taskRESET_READY_PRIORITY() macro can function correctly. */
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef8:	613b      	str	r3, [r7, #16]

                #if ( configUSE_MUTEXES == 1 )
                {
                    /* Only change the priority being used if the task is not
                     * currently using an inherited priority. */
                    if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d102      	bne.n	8004f0c <vTaskPrioritySet+0xa4>
                    {
                        pxTCB->uxPriority = uxNewPriority;
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	683a      	ldr	r2, [r7, #0]
 8004f0a:	62da      	str	r2, [r3, #44]	@ 0x2c
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The base priority gets set whatever. */
                    pxTCB->uxBasePriority = uxNewPriority;
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	683a      	ldr	r2, [r7, #0]
 8004f10:	649a      	str	r2, [r3, #72]	@ 0x48
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                /* Only reset the event list item value if the value is not
                 * being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	db04      	blt.n	8004f24 <vTaskPrioritySet+0xbc>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	f1c3 0205 	rsb	r2, r3, #5
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	619a      	str	r2, [r3, #24]

                /* If the task is in the blocked or suspended list we need do
                 * nothing more than change its priority variable. However, if
                 * the task is in a ready list it needs to be removed and placed
                 * in the list appropriate to its new priority. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	6959      	ldr	r1, [r3, #20]
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	4413      	add	r3, r2
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	4a34      	ldr	r2, [pc, #208]	@ (8005004 <vTaskPrioritySet+0x19c>)
 8004f34:	4413      	add	r3, r2
 8004f36:	4299      	cmp	r1, r3
 8004f38:	d150      	bne.n	8004fdc <vTaskPrioritySet+0x174>
                {
                    /* The task is currently in its ready list - remove before
                     * adding it to its new ready list.  As we are in a critical
                     * section we can do this even if the scheduler is suspended. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	3304      	adds	r3, #4
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7fe ffe6 	bl	8003f10 <uxListRemove>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d109      	bne.n	8004f5e <vTaskPrioritySet+0xf6>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f52:	43da      	mvns	r2, r3
 8004f54:	4b2c      	ldr	r3, [pc, #176]	@ (8005008 <vTaskPrioritySet+0x1a0>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4013      	ands	r3, r2
 8004f5a:	4a2b      	ldr	r2, [pc, #172]	@ (8005008 <vTaskPrioritySet+0x1a0>)
 8004f5c:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    prvAddTaskToReadyList( pxTCB );
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f62:	2201      	movs	r2, #1
 8004f64:	409a      	lsls	r2, r3
 8004f66:	4b28      	ldr	r3, [pc, #160]	@ (8005008 <vTaskPrioritySet+0x1a0>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	4a26      	ldr	r2, [pc, #152]	@ (8005008 <vTaskPrioritySet+0x1a0>)
 8004f6e:	6013      	str	r3, [r2, #0]
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f74:	4923      	ldr	r1, [pc, #140]	@ (8005004 <vTaskPrioritySet+0x19c>)
 8004f76:	4613      	mov	r3, r2
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	4413      	add	r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	440b      	add	r3, r1
 8004f80:	3304      	adds	r3, #4
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	60fb      	str	r3, [r7, #12]
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	609a      	str	r2, [r3, #8]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	689a      	ldr	r2, [r3, #8]
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	60da      	str	r2, [r3, #12]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	69ba      	ldr	r2, [r7, #24]
 8004f9a:	3204      	adds	r2, #4
 8004f9c:	605a      	str	r2, [r3, #4]
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	1d1a      	adds	r2, r3, #4
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	609a      	str	r2, [r3, #8]
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004faa:	4613      	mov	r3, r2
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	4413      	add	r3, r2
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	4a14      	ldr	r2, [pc, #80]	@ (8005004 <vTaskPrioritySet+0x19c>)
 8004fb4:	441a      	add	r2, r3
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	615a      	str	r2, [r3, #20]
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fbe:	4911      	ldr	r1, [pc, #68]	@ (8005004 <vTaskPrioritySet+0x19c>)
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	440b      	add	r3, r1
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	1c59      	adds	r1, r3, #1
 8004fce:	480d      	ldr	r0, [pc, #52]	@ (8005004 <vTaskPrioritySet+0x19c>)
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4413      	add	r3, r2
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	4403      	add	r3, r0
 8004fda:	6019      	str	r1, [r3, #0]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xYieldRequired != pdFALSE )
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d007      	beq.n	8004ff2 <vTaskPrioritySet+0x18a>
                {
                    taskYIELD_IF_USING_PREEMPTION();
 8004fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800500c <vTaskPrioritySet+0x1a4>)
 8004fe4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fe8:	601a      	str	r2, [r3, #0]
 8004fea:	f3bf 8f4f 	dsb	sy
 8004fee:	f3bf 8f6f 	isb	sy
                /* Remove compiler warning about unused variables when the port
                 * optimised task selection is not being used. */
                ( void ) uxPriorityUsedOnEntry;
            }
        }
        taskEXIT_CRITICAL();
 8004ff2:	f001 fc0d 	bl	8006810 <vPortExitCritical>
    }
 8004ff6:	bf00      	nop
 8004ff8:	3720      	adds	r7, #32
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	20000600 	.word	0x20000600
 8005004:	20000604 	.word	0x20000604
 8005008:	200006e0 	.word	0x200006e0
 800500c:	e000ed04 	.word	0xe000ed04

08005010 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b086      	sub	sp, #24
 8005014:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8005016:	4b20      	ldr	r3, [pc, #128]	@ (8005098 <vTaskStartScheduler+0x88>)
 8005018:	9301      	str	r3, [sp, #4]
 800501a:	2300      	movs	r3, #0
 800501c:	9300      	str	r3, [sp, #0]
 800501e:	2300      	movs	r3, #0
 8005020:	2282      	movs	r2, #130	@ 0x82
 8005022:	491e      	ldr	r1, [pc, #120]	@ (800509c <vTaskStartScheduler+0x8c>)
 8005024:	481e      	ldr	r0, [pc, #120]	@ (80050a0 <vTaskStartScheduler+0x90>)
 8005026:	f7ff fd63 	bl	8004af0 <xTaskCreate>
 800502a:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2b01      	cmp	r3, #1
 8005030:	d102      	bne.n	8005038 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8005032:	f000 fffd 	bl	8006030 <xTimerCreateTimerTask>
 8005036:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d116      	bne.n	800506c <vTaskStartScheduler+0x5c>
        __asm volatile
 800503e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005042:	f383 8811 	msr	BASEPRI, r3
 8005046:	f3bf 8f6f 	isb	sy
 800504a:	f3bf 8f4f 	dsb	sy
 800504e:	60bb      	str	r3, [r7, #8]
    }
 8005050:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8005052:	4b14      	ldr	r3, [pc, #80]	@ (80050a4 <vTaskStartScheduler+0x94>)
 8005054:	f04f 32ff 	mov.w	r2, #4294967295
 8005058:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800505a:	4b13      	ldr	r3, [pc, #76]	@ (80050a8 <vTaskStartScheduler+0x98>)
 800505c:	2201      	movs	r2, #1
 800505e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005060:	4b12      	ldr	r3, [pc, #72]	@ (80050ac <vTaskStartScheduler+0x9c>)
 8005062:	2200      	movs	r2, #0
 8005064:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8005066:	f001 fafd 	bl	8006664 <xPortStartScheduler>
 800506a:	e00f      	b.n	800508c <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005072:	d10b      	bne.n	800508c <vTaskStartScheduler+0x7c>
        __asm volatile
 8005074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005078:	f383 8811 	msr	BASEPRI, r3
 800507c:	f3bf 8f6f 	isb	sy
 8005080:	f3bf 8f4f 	dsb	sy
 8005084:	607b      	str	r3, [r7, #4]
    }
 8005086:	bf00      	nop
 8005088:	bf00      	nop
 800508a:	e7fd      	b.n	8005088 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800508c:	4b08      	ldr	r3, [pc, #32]	@ (80050b0 <vTaskStartScheduler+0xa0>)
 800508e:	681b      	ldr	r3, [r3, #0]
}
 8005090:	bf00      	nop
 8005092:	3710      	adds	r7, #16
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	200006fc 	.word	0x200006fc
 800509c:	080076a8 	.word	0x080076a8
 80050a0:	0800596d 	.word	0x0800596d
 80050a4:	200006f8 	.word	0x200006f8
 80050a8:	200006e4 	.word	0x200006e4
 80050ac:	200006dc 	.word	0x200006dc
 80050b0:	20000020 	.word	0x20000020

080050b4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80050b4:	b480      	push	{r7}
 80050b6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80050b8:	4b04      	ldr	r3, [pc, #16]	@ (80050cc <vTaskSuspendAll+0x18>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	3301      	adds	r3, #1
 80050be:	4a03      	ldr	r2, [pc, #12]	@ (80050cc <vTaskSuspendAll+0x18>)
 80050c0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80050c2:	bf00      	nop
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr
 80050cc:	20000700 	.word	0x20000700

080050d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b088      	sub	sp, #32
 80050d4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80050d6:	2300      	movs	r3, #0
 80050d8:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80050da:	2300      	movs	r3, #0
 80050dc:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80050de:	4b71      	ldr	r3, [pc, #452]	@ (80052a4 <xTaskResumeAll+0x1d4>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d10b      	bne.n	80050fe <xTaskResumeAll+0x2e>
        __asm volatile
 80050e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ea:	f383 8811 	msr	BASEPRI, r3
 80050ee:	f3bf 8f6f 	isb	sy
 80050f2:	f3bf 8f4f 	dsb	sy
 80050f6:	607b      	str	r3, [r7, #4]
    }
 80050f8:	bf00      	nop
 80050fa:	bf00      	nop
 80050fc:	e7fd      	b.n	80050fa <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80050fe:	f001 fb55 	bl	80067ac <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8005102:	4b68      	ldr	r3, [pc, #416]	@ (80052a4 <xTaskResumeAll+0x1d4>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	3b01      	subs	r3, #1
 8005108:	4a66      	ldr	r2, [pc, #408]	@ (80052a4 <xTaskResumeAll+0x1d4>)
 800510a:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800510c:	4b65      	ldr	r3, [pc, #404]	@ (80052a4 <xTaskResumeAll+0x1d4>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	f040 80c0 	bne.w	8005296 <xTaskResumeAll+0x1c6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005116:	4b64      	ldr	r3, [pc, #400]	@ (80052a8 <xTaskResumeAll+0x1d8>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2b00      	cmp	r3, #0
 800511c:	f000 80bb 	beq.w	8005296 <xTaskResumeAll+0x1c6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005120:	e08a      	b.n	8005238 <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005122:	4b62      	ldr	r3, [pc, #392]	@ (80052ac <xTaskResumeAll+0x1dc>)
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800512e:	613b      	str	r3, [r7, #16]
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	69db      	ldr	r3, [r3, #28]
 8005134:	69fa      	ldr	r2, [r7, #28]
 8005136:	6a12      	ldr	r2, [r2, #32]
 8005138:	609a      	str	r2, [r3, #8]
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	69fa      	ldr	r2, [r7, #28]
 8005140:	69d2      	ldr	r2, [r2, #28]
 8005142:	605a      	str	r2, [r3, #4]
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	3318      	adds	r3, #24
 800514c:	429a      	cmp	r2, r3
 800514e:	d103      	bne.n	8005158 <xTaskResumeAll+0x88>
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	6a1a      	ldr	r2, [r3, #32]
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	605a      	str	r2, [r3, #4]
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	2200      	movs	r2, #0
 800515c:	629a      	str	r2, [r3, #40]	@ 0x28
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	1e5a      	subs	r2, r3, #1
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	695b      	ldr	r3, [r3, #20]
 800516c:	60fb      	str	r3, [r7, #12]
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	69fa      	ldr	r2, [r7, #28]
 8005174:	68d2      	ldr	r2, [r2, #12]
 8005176:	609a      	str	r2, [r3, #8]
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	69fa      	ldr	r2, [r7, #28]
 800517e:	6892      	ldr	r2, [r2, #8]
 8005180:	605a      	str	r2, [r3, #4]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	685a      	ldr	r2, [r3, #4]
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	3304      	adds	r3, #4
 800518a:	429a      	cmp	r2, r3
 800518c:	d103      	bne.n	8005196 <xTaskResumeAll+0xc6>
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	68da      	ldr	r2, [r3, #12]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	605a      	str	r2, [r3, #4]
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	2200      	movs	r2, #0
 800519a:	615a      	str	r2, [r3, #20]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	1e5a      	subs	r2, r3, #1
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051aa:	2201      	movs	r2, #1
 80051ac:	409a      	lsls	r2, r3
 80051ae:	4b40      	ldr	r3, [pc, #256]	@ (80052b0 <xTaskResumeAll+0x1e0>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	4a3e      	ldr	r2, [pc, #248]	@ (80052b0 <xTaskResumeAll+0x1e0>)
 80051b6:	6013      	str	r3, [r2, #0]
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051bc:	493d      	ldr	r1, [pc, #244]	@ (80052b4 <xTaskResumeAll+0x1e4>)
 80051be:	4613      	mov	r3, r2
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	4413      	add	r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	440b      	add	r3, r1
 80051c8:	3304      	adds	r3, #4
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	60bb      	str	r3, [r7, #8]
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	68ba      	ldr	r2, [r7, #8]
 80051d2:	609a      	str	r2, [r3, #8]
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	689a      	ldr	r2, [r3, #8]
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	60da      	str	r2, [r3, #12]
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	69fa      	ldr	r2, [r7, #28]
 80051e2:	3204      	adds	r2, #4
 80051e4:	605a      	str	r2, [r3, #4]
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	1d1a      	adds	r2, r3, #4
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	609a      	str	r2, [r3, #8]
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051f2:	4613      	mov	r3, r2
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	4413      	add	r3, r2
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	4a2e      	ldr	r2, [pc, #184]	@ (80052b4 <xTaskResumeAll+0x1e4>)
 80051fc:	441a      	add	r2, r3
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	615a      	str	r2, [r3, #20]
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005206:	492b      	ldr	r1, [pc, #172]	@ (80052b4 <xTaskResumeAll+0x1e4>)
 8005208:	4613      	mov	r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4413      	add	r3, r2
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	440b      	add	r3, r1
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	1c59      	adds	r1, r3, #1
 8005216:	4827      	ldr	r0, [pc, #156]	@ (80052b4 <xTaskResumeAll+0x1e4>)
 8005218:	4613      	mov	r3, r2
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	4413      	add	r3, r2
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	4403      	add	r3, r0
 8005222:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005228:	4b23      	ldr	r3, [pc, #140]	@ (80052b8 <xTaskResumeAll+0x1e8>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800522e:	429a      	cmp	r2, r3
 8005230:	d302      	bcc.n	8005238 <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 8005232:	4b22      	ldr	r3, [pc, #136]	@ (80052bc <xTaskResumeAll+0x1ec>)
 8005234:	2201      	movs	r2, #1
 8005236:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005238:	4b1c      	ldr	r3, [pc, #112]	@ (80052ac <xTaskResumeAll+0x1dc>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2b00      	cmp	r3, #0
 800523e:	f47f af70 	bne.w	8005122 <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d001      	beq.n	800524c <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8005248:	f000 fc26 	bl	8005a98 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800524c:	4b1c      	ldr	r3, [pc, #112]	@ (80052c0 <xTaskResumeAll+0x1f0>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d010      	beq.n	800527a <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8005258:	f000 f846 	bl	80052e8 <xTaskIncrementTick>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d002      	beq.n	8005268 <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 8005262:	4b16      	ldr	r3, [pc, #88]	@ (80052bc <xTaskResumeAll+0x1ec>)
 8005264:	2201      	movs	r2, #1
 8005266:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	3b01      	subs	r3, #1
 800526c:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d1f1      	bne.n	8005258 <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 8005274:	4b12      	ldr	r3, [pc, #72]	@ (80052c0 <xTaskResumeAll+0x1f0>)
 8005276:	2200      	movs	r2, #0
 8005278:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800527a:	4b10      	ldr	r3, [pc, #64]	@ (80052bc <xTaskResumeAll+0x1ec>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d009      	beq.n	8005296 <xTaskResumeAll+0x1c6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8005282:	2301      	movs	r3, #1
 8005284:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8005286:	4b0f      	ldr	r3, [pc, #60]	@ (80052c4 <xTaskResumeAll+0x1f4>)
 8005288:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800528c:	601a      	str	r2, [r3, #0]
 800528e:	f3bf 8f4f 	dsb	sy
 8005292:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8005296:	f001 fabb 	bl	8006810 <vPortExitCritical>

    return xAlreadyYielded;
 800529a:	69bb      	ldr	r3, [r7, #24]
}
 800529c:	4618      	mov	r0, r3
 800529e:	3720      	adds	r7, #32
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	20000700 	.word	0x20000700
 80052a8:	200006d8 	.word	0x200006d8
 80052ac:	20000698 	.word	0x20000698
 80052b0:	200006e0 	.word	0x200006e0
 80052b4:	20000604 	.word	0x20000604
 80052b8:	20000600 	.word	0x20000600
 80052bc:	200006ec 	.word	0x200006ec
 80052c0:	200006e8 	.word	0x200006e8
 80052c4:	e000ed04 	.word	0xe000ed04

080052c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80052ce:	4b05      	ldr	r3, [pc, #20]	@ (80052e4 <xTaskGetTickCount+0x1c>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80052d4:	687b      	ldr	r3, [r7, #4]
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	370c      	adds	r7, #12
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	200006dc 	.word	0x200006dc

080052e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b08a      	sub	sp, #40	@ 0x28
 80052ec:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80052ee:	2300      	movs	r3, #0
 80052f0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052f2:	4b7e      	ldr	r3, [pc, #504]	@ (80054ec <xTaskIncrementTick+0x204>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	f040 80ed 	bne.w	80054d6 <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80052fc:	4b7c      	ldr	r3, [pc, #496]	@ (80054f0 <xTaskIncrementTick+0x208>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	3301      	adds	r3, #1
 8005302:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005304:	4a7a      	ldr	r2, [pc, #488]	@ (80054f0 <xTaskIncrementTick+0x208>)
 8005306:	6a3b      	ldr	r3, [r7, #32]
 8005308:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800530a:	6a3b      	ldr	r3, [r7, #32]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d121      	bne.n	8005354 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8005310:	4b78      	ldr	r3, [pc, #480]	@ (80054f4 <xTaskIncrementTick+0x20c>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00b      	beq.n	8005332 <xTaskIncrementTick+0x4a>
        __asm volatile
 800531a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800531e:	f383 8811 	msr	BASEPRI, r3
 8005322:	f3bf 8f6f 	isb	sy
 8005326:	f3bf 8f4f 	dsb	sy
 800532a:	607b      	str	r3, [r7, #4]
    }
 800532c:	bf00      	nop
 800532e:	bf00      	nop
 8005330:	e7fd      	b.n	800532e <xTaskIncrementTick+0x46>
 8005332:	4b70      	ldr	r3, [pc, #448]	@ (80054f4 <xTaskIncrementTick+0x20c>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	61fb      	str	r3, [r7, #28]
 8005338:	4b6f      	ldr	r3, [pc, #444]	@ (80054f8 <xTaskIncrementTick+0x210>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a6d      	ldr	r2, [pc, #436]	@ (80054f4 <xTaskIncrementTick+0x20c>)
 800533e:	6013      	str	r3, [r2, #0]
 8005340:	4a6d      	ldr	r2, [pc, #436]	@ (80054f8 <xTaskIncrementTick+0x210>)
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	6013      	str	r3, [r2, #0]
 8005346:	4b6d      	ldr	r3, [pc, #436]	@ (80054fc <xTaskIncrementTick+0x214>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	3301      	adds	r3, #1
 800534c:	4a6b      	ldr	r2, [pc, #428]	@ (80054fc <xTaskIncrementTick+0x214>)
 800534e:	6013      	str	r3, [r2, #0]
 8005350:	f000 fba2 	bl	8005a98 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8005354:	4b6a      	ldr	r3, [pc, #424]	@ (8005500 <xTaskIncrementTick+0x218>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	6a3a      	ldr	r2, [r7, #32]
 800535a:	429a      	cmp	r2, r3
 800535c:	f0c0 80a6 	bcc.w	80054ac <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005360:	4b64      	ldr	r3, [pc, #400]	@ (80054f4 <xTaskIncrementTick+0x20c>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d104      	bne.n	8005374 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800536a:	4b65      	ldr	r3, [pc, #404]	@ (8005500 <xTaskIncrementTick+0x218>)
 800536c:	f04f 32ff 	mov.w	r2, #4294967295
 8005370:	601a      	str	r2, [r3, #0]
                    break;
 8005372:	e09b      	b.n	80054ac <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005374:	4b5f      	ldr	r3, [pc, #380]	@ (80054f4 <xTaskIncrementTick+0x20c>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8005384:	6a3a      	ldr	r2, [r7, #32]
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	429a      	cmp	r2, r3
 800538a:	d203      	bcs.n	8005394 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800538c:	4a5c      	ldr	r2, [pc, #368]	@ (8005500 <xTaskIncrementTick+0x218>)
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8005392:	e08b      	b.n	80054ac <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	695b      	ldr	r3, [r3, #20]
 8005398:	613b      	str	r3, [r7, #16]
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	69ba      	ldr	r2, [r7, #24]
 80053a0:	68d2      	ldr	r2, [r2, #12]
 80053a2:	609a      	str	r2, [r3, #8]
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	69ba      	ldr	r2, [r7, #24]
 80053aa:	6892      	ldr	r2, [r2, #8]
 80053ac:	605a      	str	r2, [r3, #4]
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	685a      	ldr	r2, [r3, #4]
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	3304      	adds	r3, #4
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d103      	bne.n	80053c2 <xTaskIncrementTick+0xda>
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	68da      	ldr	r2, [r3, #12]
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	605a      	str	r2, [r3, #4]
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	2200      	movs	r2, #0
 80053c6:	615a      	str	r2, [r3, #20]
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	1e5a      	subs	r2, r3, #1
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d01e      	beq.n	8005418 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053de:	60fb      	str	r3, [r7, #12]
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	69db      	ldr	r3, [r3, #28]
 80053e4:	69ba      	ldr	r2, [r7, #24]
 80053e6:	6a12      	ldr	r2, [r2, #32]
 80053e8:	609a      	str	r2, [r3, #8]
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	6a1b      	ldr	r3, [r3, #32]
 80053ee:	69ba      	ldr	r2, [r7, #24]
 80053f0:	69d2      	ldr	r2, [r2, #28]
 80053f2:	605a      	str	r2, [r3, #4]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	685a      	ldr	r2, [r3, #4]
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	3318      	adds	r3, #24
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d103      	bne.n	8005408 <xTaskIncrementTick+0x120>
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	6a1a      	ldr	r2, [r3, #32]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	605a      	str	r2, [r3, #4]
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	2200      	movs	r2, #0
 800540c:	629a      	str	r2, [r3, #40]	@ 0x28
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	1e5a      	subs	r2, r3, #1
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800541c:	2201      	movs	r2, #1
 800541e:	409a      	lsls	r2, r3
 8005420:	4b38      	ldr	r3, [pc, #224]	@ (8005504 <xTaskIncrementTick+0x21c>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4313      	orrs	r3, r2
 8005426:	4a37      	ldr	r2, [pc, #220]	@ (8005504 <xTaskIncrementTick+0x21c>)
 8005428:	6013      	str	r3, [r2, #0]
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800542e:	4936      	ldr	r1, [pc, #216]	@ (8005508 <xTaskIncrementTick+0x220>)
 8005430:	4613      	mov	r3, r2
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	4413      	add	r3, r2
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	440b      	add	r3, r1
 800543a:	3304      	adds	r3, #4
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	60bb      	str	r3, [r7, #8]
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	68ba      	ldr	r2, [r7, #8]
 8005444:	609a      	str	r2, [r3, #8]
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	689a      	ldr	r2, [r3, #8]
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	60da      	str	r2, [r3, #12]
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	69ba      	ldr	r2, [r7, #24]
 8005454:	3204      	adds	r2, #4
 8005456:	605a      	str	r2, [r3, #4]
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	1d1a      	adds	r2, r3, #4
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	609a      	str	r2, [r3, #8]
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005464:	4613      	mov	r3, r2
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	4413      	add	r3, r2
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	4a26      	ldr	r2, [pc, #152]	@ (8005508 <xTaskIncrementTick+0x220>)
 800546e:	441a      	add	r2, r3
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	615a      	str	r2, [r3, #20]
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005478:	4923      	ldr	r1, [pc, #140]	@ (8005508 <xTaskIncrementTick+0x220>)
 800547a:	4613      	mov	r3, r2
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	4413      	add	r3, r2
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	440b      	add	r3, r1
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	1c59      	adds	r1, r3, #1
 8005488:	481f      	ldr	r0, [pc, #124]	@ (8005508 <xTaskIncrementTick+0x220>)
 800548a:	4613      	mov	r3, r2
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	4413      	add	r3, r2
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	4403      	add	r3, r0
 8005494:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800549a:	4b1c      	ldr	r3, [pc, #112]	@ (800550c <xTaskIncrementTick+0x224>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a0:	429a      	cmp	r2, r3
 80054a2:	f67f af5d 	bls.w	8005360 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 80054a6:	2301      	movs	r3, #1
 80054a8:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054aa:	e759      	b.n	8005360 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80054ac:	4b17      	ldr	r3, [pc, #92]	@ (800550c <xTaskIncrementTick+0x224>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054b2:	4915      	ldr	r1, [pc, #84]	@ (8005508 <xTaskIncrementTick+0x220>)
 80054b4:	4613      	mov	r3, r2
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	4413      	add	r3, r2
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	440b      	add	r3, r1
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d901      	bls.n	80054c8 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 80054c4:	2301      	movs	r3, #1
 80054c6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80054c8:	4b11      	ldr	r3, [pc, #68]	@ (8005510 <xTaskIncrementTick+0x228>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d007      	beq.n	80054e0 <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 80054d0:	2301      	movs	r3, #1
 80054d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80054d4:	e004      	b.n	80054e0 <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80054d6:	4b0f      	ldr	r3, [pc, #60]	@ (8005514 <xTaskIncrementTick+0x22c>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	3301      	adds	r3, #1
 80054dc:	4a0d      	ldr	r2, [pc, #52]	@ (8005514 <xTaskIncrementTick+0x22c>)
 80054de:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80054e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3728      	adds	r7, #40	@ 0x28
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	20000700 	.word	0x20000700
 80054f0:	200006dc 	.word	0x200006dc
 80054f4:	20000690 	.word	0x20000690
 80054f8:	20000694 	.word	0x20000694
 80054fc:	200006f0 	.word	0x200006f0
 8005500:	200006f8 	.word	0x200006f8
 8005504:	200006e0 	.word	0x200006e0
 8005508:	20000604 	.word	0x20000604
 800550c:	20000600 	.word	0x20000600
 8005510:	200006ec 	.word	0x200006ec
 8005514:	200006e8 	.word	0x200006e8

08005518 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005518:	b480      	push	{r7}
 800551a:	b087      	sub	sp, #28
 800551c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800551e:	4b27      	ldr	r3, [pc, #156]	@ (80055bc <vTaskSwitchContext+0xa4>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d003      	beq.n	800552e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8005526:	4b26      	ldr	r3, [pc, #152]	@ (80055c0 <vTaskSwitchContext+0xa8>)
 8005528:	2201      	movs	r2, #1
 800552a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800552c:	e040      	b.n	80055b0 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 800552e:	4b24      	ldr	r3, [pc, #144]	@ (80055c0 <vTaskSwitchContext+0xa8>)
 8005530:	2200      	movs	r2, #0
 8005532:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005534:	4b23      	ldr	r3, [pc, #140]	@ (80055c4 <vTaskSwitchContext+0xac>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	fab3 f383 	clz	r3, r3
 8005540:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8005542:	7afb      	ldrb	r3, [r7, #11]
 8005544:	f1c3 031f 	rsb	r3, r3, #31
 8005548:	617b      	str	r3, [r7, #20]
 800554a:	491f      	ldr	r1, [pc, #124]	@ (80055c8 <vTaskSwitchContext+0xb0>)
 800554c:	697a      	ldr	r2, [r7, #20]
 800554e:	4613      	mov	r3, r2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	4413      	add	r3, r2
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	440b      	add	r3, r1
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d10b      	bne.n	8005576 <vTaskSwitchContext+0x5e>
        __asm volatile
 800555e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005562:	f383 8811 	msr	BASEPRI, r3
 8005566:	f3bf 8f6f 	isb	sy
 800556a:	f3bf 8f4f 	dsb	sy
 800556e:	607b      	str	r3, [r7, #4]
    }
 8005570:	bf00      	nop
 8005572:	bf00      	nop
 8005574:	e7fd      	b.n	8005572 <vTaskSwitchContext+0x5a>
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	4613      	mov	r3, r2
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	4413      	add	r3, r2
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	4a11      	ldr	r2, [pc, #68]	@ (80055c8 <vTaskSwitchContext+0xb0>)
 8005582:	4413      	add	r3, r2
 8005584:	613b      	str	r3, [r7, #16]
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	685a      	ldr	r2, [r3, #4]
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	605a      	str	r2, [r3, #4]
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	685a      	ldr	r2, [r3, #4]
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	3308      	adds	r3, #8
 8005598:	429a      	cmp	r2, r3
 800559a:	d104      	bne.n	80055a6 <vTaskSwitchContext+0x8e>
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	685a      	ldr	r2, [r3, #4]
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	605a      	str	r2, [r3, #4]
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	4a07      	ldr	r2, [pc, #28]	@ (80055cc <vTaskSwitchContext+0xb4>)
 80055ae:	6013      	str	r3, [r2, #0]
}
 80055b0:	bf00      	nop
 80055b2:	371c      	adds	r7, #28
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr
 80055bc:	20000700 	.word	0x20000700
 80055c0:	200006ec 	.word	0x200006ec
 80055c4:	200006e0 	.word	0x200006e0
 80055c8:	20000604 	.word	0x20000604
 80055cc:	20000600 	.word	0x20000600

080055d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d10b      	bne.n	80055f8 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 80055e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055e4:	f383 8811 	msr	BASEPRI, r3
 80055e8:	f3bf 8f6f 	isb	sy
 80055ec:	f3bf 8f4f 	dsb	sy
 80055f0:	60fb      	str	r3, [r7, #12]
    }
 80055f2:	bf00      	nop
 80055f4:	bf00      	nop
 80055f6:	e7fd      	b.n	80055f4 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80055f8:	4b07      	ldr	r3, [pc, #28]	@ (8005618 <vTaskPlaceOnEventList+0x48>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	3318      	adds	r3, #24
 80055fe:	4619      	mov	r1, r3
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f7fe fc4c 	bl	8003e9e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005606:	2101      	movs	r1, #1
 8005608:	6838      	ldr	r0, [r7, #0]
 800560a:	f000 fc91 	bl	8005f30 <prvAddCurrentTaskToDelayedList>
}
 800560e:	bf00      	nop
 8005610:	3710      	adds	r7, #16
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	20000600 	.word	0x20000600

0800561c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800561c:	b580      	push	{r7, lr}
 800561e:	b086      	sub	sp, #24
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d10b      	bne.n	8005646 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 800562e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005632:	f383 8811 	msr	BASEPRI, r3
 8005636:	f3bf 8f6f 	isb	sy
 800563a:	f3bf 8f4f 	dsb	sy
 800563e:	613b      	str	r3, [r7, #16]
    }
 8005640:	bf00      	nop
 8005642:	bf00      	nop
 8005644:	e7fd      	b.n	8005642 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	617b      	str	r3, [r7, #20]
 800564c:	4b15      	ldr	r3, [pc, #84]	@ (80056a4 <vTaskPlaceOnEventListRestricted+0x88>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	697a      	ldr	r2, [r7, #20]
 8005652:	61da      	str	r2, [r3, #28]
 8005654:	4b13      	ldr	r3, [pc, #76]	@ (80056a4 <vTaskPlaceOnEventListRestricted+0x88>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	697a      	ldr	r2, [r7, #20]
 800565a:	6892      	ldr	r2, [r2, #8]
 800565c:	621a      	str	r2, [r3, #32]
 800565e:	4b11      	ldr	r3, [pc, #68]	@ (80056a4 <vTaskPlaceOnEventListRestricted+0x88>)
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	3218      	adds	r2, #24
 8005668:	605a      	str	r2, [r3, #4]
 800566a:	4b0e      	ldr	r3, [pc, #56]	@ (80056a4 <vTaskPlaceOnEventListRestricted+0x88>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f103 0218 	add.w	r2, r3, #24
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	609a      	str	r2, [r3, #8]
 8005676:	4b0b      	ldr	r3, [pc, #44]	@ (80056a4 <vTaskPlaceOnEventListRestricted+0x88>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	629a      	str	r2, [r3, #40]	@ 0x28
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	1c5a      	adds	r2, r3, #1
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d002      	beq.n	8005694 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 800568e:	f04f 33ff 	mov.w	r3, #4294967295
 8005692:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005694:	6879      	ldr	r1, [r7, #4]
 8005696:	68b8      	ldr	r0, [r7, #8]
 8005698:	f000 fc4a 	bl	8005f30 <prvAddCurrentTaskToDelayedList>
    }
 800569c:	bf00      	nop
 800569e:	3718      	adds	r7, #24
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	20000600 	.word	0x20000600

080056a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80056a8:	b480      	push	{r7}
 80056aa:	b08b      	sub	sp, #44	@ 0x2c
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80056b8:	6a3b      	ldr	r3, [r7, #32]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d10b      	bne.n	80056d6 <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 80056be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056c2:	f383 8811 	msr	BASEPRI, r3
 80056c6:	f3bf 8f6f 	isb	sy
 80056ca:	f3bf 8f4f 	dsb	sy
 80056ce:	60fb      	str	r3, [r7, #12]
    }
 80056d0:	bf00      	nop
 80056d2:	bf00      	nop
 80056d4:	e7fd      	b.n	80056d2 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80056d6:	6a3b      	ldr	r3, [r7, #32]
 80056d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056da:	61fb      	str	r3, [r7, #28]
 80056dc:	6a3b      	ldr	r3, [r7, #32]
 80056de:	69db      	ldr	r3, [r3, #28]
 80056e0:	6a3a      	ldr	r2, [r7, #32]
 80056e2:	6a12      	ldr	r2, [r2, #32]
 80056e4:	609a      	str	r2, [r3, #8]
 80056e6:	6a3b      	ldr	r3, [r7, #32]
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	6a3a      	ldr	r2, [r7, #32]
 80056ec:	69d2      	ldr	r2, [r2, #28]
 80056ee:	605a      	str	r2, [r3, #4]
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	685a      	ldr	r2, [r3, #4]
 80056f4:	6a3b      	ldr	r3, [r7, #32]
 80056f6:	3318      	adds	r3, #24
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d103      	bne.n	8005704 <xTaskRemoveFromEventList+0x5c>
 80056fc:	6a3b      	ldr	r3, [r7, #32]
 80056fe:	6a1a      	ldr	r2, [r3, #32]
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	605a      	str	r2, [r3, #4]
 8005704:	6a3b      	ldr	r3, [r7, #32]
 8005706:	2200      	movs	r2, #0
 8005708:	629a      	str	r2, [r3, #40]	@ 0x28
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	1e5a      	subs	r2, r3, #1
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005714:	4b4a      	ldr	r3, [pc, #296]	@ (8005840 <xTaskRemoveFromEventList+0x198>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d15e      	bne.n	80057da <xTaskRemoveFromEventList+0x132>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800571c:	6a3b      	ldr	r3, [r7, #32]
 800571e:	695b      	ldr	r3, [r3, #20]
 8005720:	617b      	str	r3, [r7, #20]
 8005722:	6a3b      	ldr	r3, [r7, #32]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	6a3a      	ldr	r2, [r7, #32]
 8005728:	68d2      	ldr	r2, [r2, #12]
 800572a:	609a      	str	r2, [r3, #8]
 800572c:	6a3b      	ldr	r3, [r7, #32]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	6a3a      	ldr	r2, [r7, #32]
 8005732:	6892      	ldr	r2, [r2, #8]
 8005734:	605a      	str	r2, [r3, #4]
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	685a      	ldr	r2, [r3, #4]
 800573a:	6a3b      	ldr	r3, [r7, #32]
 800573c:	3304      	adds	r3, #4
 800573e:	429a      	cmp	r2, r3
 8005740:	d103      	bne.n	800574a <xTaskRemoveFromEventList+0xa2>
 8005742:	6a3b      	ldr	r3, [r7, #32]
 8005744:	68da      	ldr	r2, [r3, #12]
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	605a      	str	r2, [r3, #4]
 800574a:	6a3b      	ldr	r3, [r7, #32]
 800574c:	2200      	movs	r2, #0
 800574e:	615a      	str	r2, [r3, #20]
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	1e5a      	subs	r2, r3, #1
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800575a:	6a3b      	ldr	r3, [r7, #32]
 800575c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800575e:	2201      	movs	r2, #1
 8005760:	409a      	lsls	r2, r3
 8005762:	4b38      	ldr	r3, [pc, #224]	@ (8005844 <xTaskRemoveFromEventList+0x19c>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4313      	orrs	r3, r2
 8005768:	4a36      	ldr	r2, [pc, #216]	@ (8005844 <xTaskRemoveFromEventList+0x19c>)
 800576a:	6013      	str	r3, [r2, #0]
 800576c:	6a3b      	ldr	r3, [r7, #32]
 800576e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005770:	4935      	ldr	r1, [pc, #212]	@ (8005848 <xTaskRemoveFromEventList+0x1a0>)
 8005772:	4613      	mov	r3, r2
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	4413      	add	r3, r2
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	440b      	add	r3, r1
 800577c:	3304      	adds	r3, #4
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	613b      	str	r3, [r7, #16]
 8005782:	6a3b      	ldr	r3, [r7, #32]
 8005784:	693a      	ldr	r2, [r7, #16]
 8005786:	609a      	str	r2, [r3, #8]
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	689a      	ldr	r2, [r3, #8]
 800578c:	6a3b      	ldr	r3, [r7, #32]
 800578e:	60da      	str	r2, [r3, #12]
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	6a3a      	ldr	r2, [r7, #32]
 8005796:	3204      	adds	r2, #4
 8005798:	605a      	str	r2, [r3, #4]
 800579a:	6a3b      	ldr	r3, [r7, #32]
 800579c:	1d1a      	adds	r2, r3, #4
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	609a      	str	r2, [r3, #8]
 80057a2:	6a3b      	ldr	r3, [r7, #32]
 80057a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057a6:	4613      	mov	r3, r2
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	4413      	add	r3, r2
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	4a26      	ldr	r2, [pc, #152]	@ (8005848 <xTaskRemoveFromEventList+0x1a0>)
 80057b0:	441a      	add	r2, r3
 80057b2:	6a3b      	ldr	r3, [r7, #32]
 80057b4:	615a      	str	r2, [r3, #20]
 80057b6:	6a3b      	ldr	r3, [r7, #32]
 80057b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057ba:	4923      	ldr	r1, [pc, #140]	@ (8005848 <xTaskRemoveFromEventList+0x1a0>)
 80057bc:	4613      	mov	r3, r2
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	4413      	add	r3, r2
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	440b      	add	r3, r1
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	1c59      	adds	r1, r3, #1
 80057ca:	481f      	ldr	r0, [pc, #124]	@ (8005848 <xTaskRemoveFromEventList+0x1a0>)
 80057cc:	4613      	mov	r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	4413      	add	r3, r2
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	4403      	add	r3, r0
 80057d6:	6019      	str	r1, [r3, #0]
 80057d8:	e01b      	b.n	8005812 <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80057da:	4b1c      	ldr	r3, [pc, #112]	@ (800584c <xTaskRemoveFromEventList+0x1a4>)
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	61bb      	str	r3, [r7, #24]
 80057e0:	6a3b      	ldr	r3, [r7, #32]
 80057e2:	69ba      	ldr	r2, [r7, #24]
 80057e4:	61da      	str	r2, [r3, #28]
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	689a      	ldr	r2, [r3, #8]
 80057ea:	6a3b      	ldr	r3, [r7, #32]
 80057ec:	621a      	str	r2, [r3, #32]
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	6a3a      	ldr	r2, [r7, #32]
 80057f4:	3218      	adds	r2, #24
 80057f6:	605a      	str	r2, [r3, #4]
 80057f8:	6a3b      	ldr	r3, [r7, #32]
 80057fa:	f103 0218 	add.w	r2, r3, #24
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	609a      	str	r2, [r3, #8]
 8005802:	6a3b      	ldr	r3, [r7, #32]
 8005804:	4a11      	ldr	r2, [pc, #68]	@ (800584c <xTaskRemoveFromEventList+0x1a4>)
 8005806:	629a      	str	r2, [r3, #40]	@ 0x28
 8005808:	4b10      	ldr	r3, [pc, #64]	@ (800584c <xTaskRemoveFromEventList+0x1a4>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	3301      	adds	r3, #1
 800580e:	4a0f      	ldr	r2, [pc, #60]	@ (800584c <xTaskRemoveFromEventList+0x1a4>)
 8005810:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005812:	6a3b      	ldr	r3, [r7, #32]
 8005814:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005816:	4b0e      	ldr	r3, [pc, #56]	@ (8005850 <xTaskRemoveFromEventList+0x1a8>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800581c:	429a      	cmp	r2, r3
 800581e:	d905      	bls.n	800582c <xTaskRemoveFromEventList+0x184>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8005820:	2301      	movs	r3, #1
 8005822:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8005824:	4b0b      	ldr	r3, [pc, #44]	@ (8005854 <xTaskRemoveFromEventList+0x1ac>)
 8005826:	2201      	movs	r2, #1
 8005828:	601a      	str	r2, [r3, #0]
 800582a:	e001      	b.n	8005830 <xTaskRemoveFromEventList+0x188>
    }
    else
    {
        xReturn = pdFALSE;
 800582c:	2300      	movs	r3, #0
 800582e:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 8005830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005832:	4618      	mov	r0, r3
 8005834:	372c      	adds	r7, #44	@ 0x2c
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop
 8005840:	20000700 	.word	0x20000700
 8005844:	200006e0 	.word	0x200006e0
 8005848:	20000604 	.word	0x20000604
 800584c:	20000698 	.word	0x20000698
 8005850:	20000600 	.word	0x20000600
 8005854:	200006ec 	.word	0x200006ec

08005858 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005860:	4b06      	ldr	r3, [pc, #24]	@ (800587c <vTaskInternalSetTimeOutState+0x24>)
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8005868:	4b05      	ldr	r3, [pc, #20]	@ (8005880 <vTaskInternalSetTimeOutState+0x28>)
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	605a      	str	r2, [r3, #4]
}
 8005870:	bf00      	nop
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr
 800587c:	200006f0 	.word	0x200006f0
 8005880:	200006dc 	.word	0x200006dc

08005884 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b088      	sub	sp, #32
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d10b      	bne.n	80058ac <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8005894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005898:	f383 8811 	msr	BASEPRI, r3
 800589c:	f3bf 8f6f 	isb	sy
 80058a0:	f3bf 8f4f 	dsb	sy
 80058a4:	613b      	str	r3, [r7, #16]
    }
 80058a6:	bf00      	nop
 80058a8:	bf00      	nop
 80058aa:	e7fd      	b.n	80058a8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d10b      	bne.n	80058ca <xTaskCheckForTimeOut+0x46>
        __asm volatile
 80058b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058b6:	f383 8811 	msr	BASEPRI, r3
 80058ba:	f3bf 8f6f 	isb	sy
 80058be:	f3bf 8f4f 	dsb	sy
 80058c2:	60fb      	str	r3, [r7, #12]
    }
 80058c4:	bf00      	nop
 80058c6:	bf00      	nop
 80058c8:	e7fd      	b.n	80058c6 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 80058ca:	f000 ff6f 	bl	80067ac <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80058ce:	4b1f      	ldr	r3, [pc, #124]	@ (800594c <xTaskCheckForTimeOut+0xc8>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	69ba      	ldr	r2, [r7, #24]
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e6:	d102      	bne.n	80058ee <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80058e8:	2300      	movs	r3, #0
 80058ea:	61fb      	str	r3, [r7, #28]
 80058ec:	e026      	b.n	800593c <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	4b17      	ldr	r3, [pc, #92]	@ (8005950 <xTaskCheckForTimeOut+0xcc>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d00a      	beq.n	8005910 <xTaskCheckForTimeOut+0x8c>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	69ba      	ldr	r2, [r7, #24]
 8005900:	429a      	cmp	r2, r3
 8005902:	d305      	bcc.n	8005910 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8005904:	2301      	movs	r3, #1
 8005906:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	2200      	movs	r2, #0
 800590c:	601a      	str	r2, [r3, #0]
 800590e:	e015      	b.n	800593c <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	429a      	cmp	r2, r3
 8005918:	d20b      	bcs.n	8005932 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	1ad2      	subs	r2, r2, r3
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f7ff ff96 	bl	8005858 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800592c:	2300      	movs	r3, #0
 800592e:	61fb      	str	r3, [r7, #28]
 8005930:	e004      	b.n	800593c <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	2200      	movs	r2, #0
 8005936:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8005938:	2301      	movs	r3, #1
 800593a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800593c:	f000 ff68 	bl	8006810 <vPortExitCritical>

    return xReturn;
 8005940:	69fb      	ldr	r3, [r7, #28]
}
 8005942:	4618      	mov	r0, r3
 8005944:	3720      	adds	r7, #32
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	200006dc 	.word	0x200006dc
 8005950:	200006f0 	.word	0x200006f0

08005954 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005954:	b480      	push	{r7}
 8005956:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8005958:	4b03      	ldr	r3, [pc, #12]	@ (8005968 <vTaskMissedYield+0x14>)
 800595a:	2201      	movs	r2, #1
 800595c:	601a      	str	r2, [r3, #0]
}
 800595e:	bf00      	nop
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr
 8005968:	200006ec 	.word	0x200006ec

0800596c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005974:	f000 f852 	bl	8005a1c <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005978:	4b06      	ldr	r3, [pc, #24]	@ (8005994 <prvIdleTask+0x28>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2b01      	cmp	r3, #1
 800597e:	d9f9      	bls.n	8005974 <prvIdleTask+0x8>
            {
                taskYIELD();
 8005980:	4b05      	ldr	r3, [pc, #20]	@ (8005998 <prvIdleTask+0x2c>)
 8005982:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005986:	601a      	str	r2, [r3, #0]
 8005988:	f3bf 8f4f 	dsb	sy
 800598c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8005990:	e7f0      	b.n	8005974 <prvIdleTask+0x8>
 8005992:	bf00      	nop
 8005994:	20000604 	.word	0x20000604
 8005998:	e000ed04 	.word	0xe000ed04

0800599c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059a2:	2300      	movs	r3, #0
 80059a4:	607b      	str	r3, [r7, #4]
 80059a6:	e00c      	b.n	80059c2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	4613      	mov	r3, r2
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	4413      	add	r3, r2
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	4a12      	ldr	r2, [pc, #72]	@ (80059fc <prvInitialiseTaskLists+0x60>)
 80059b4:	4413      	add	r3, r2
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7fe fa44 	bl	8003e44 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	3301      	adds	r3, #1
 80059c0:	607b      	str	r3, [r7, #4]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2b04      	cmp	r3, #4
 80059c6:	d9ef      	bls.n	80059a8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80059c8:	480d      	ldr	r0, [pc, #52]	@ (8005a00 <prvInitialiseTaskLists+0x64>)
 80059ca:	f7fe fa3b 	bl	8003e44 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80059ce:	480d      	ldr	r0, [pc, #52]	@ (8005a04 <prvInitialiseTaskLists+0x68>)
 80059d0:	f7fe fa38 	bl	8003e44 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80059d4:	480c      	ldr	r0, [pc, #48]	@ (8005a08 <prvInitialiseTaskLists+0x6c>)
 80059d6:	f7fe fa35 	bl	8003e44 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80059da:	480c      	ldr	r0, [pc, #48]	@ (8005a0c <prvInitialiseTaskLists+0x70>)
 80059dc:	f7fe fa32 	bl	8003e44 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80059e0:	480b      	ldr	r0, [pc, #44]	@ (8005a10 <prvInitialiseTaskLists+0x74>)
 80059e2:	f7fe fa2f 	bl	8003e44 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80059e6:	4b0b      	ldr	r3, [pc, #44]	@ (8005a14 <prvInitialiseTaskLists+0x78>)
 80059e8:	4a05      	ldr	r2, [pc, #20]	@ (8005a00 <prvInitialiseTaskLists+0x64>)
 80059ea:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80059ec:	4b0a      	ldr	r3, [pc, #40]	@ (8005a18 <prvInitialiseTaskLists+0x7c>)
 80059ee:	4a05      	ldr	r2, [pc, #20]	@ (8005a04 <prvInitialiseTaskLists+0x68>)
 80059f0:	601a      	str	r2, [r3, #0]
}
 80059f2:	bf00      	nop
 80059f4:	3708      	adds	r7, #8
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	20000604 	.word	0x20000604
 8005a00:	20000668 	.word	0x20000668
 8005a04:	2000067c 	.word	0x2000067c
 8005a08:	20000698 	.word	0x20000698
 8005a0c:	200006ac 	.word	0x200006ac
 8005a10:	200006c4 	.word	0x200006c4
 8005a14:	20000690 	.word	0x20000690
 8005a18:	20000694 	.word	0x20000694

08005a1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b082      	sub	sp, #8
 8005a20:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a22:	e019      	b.n	8005a58 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8005a24:	f000 fec2 	bl	80067ac <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a28:	4b10      	ldr	r3, [pc, #64]	@ (8005a6c <prvCheckTasksWaitingTermination+0x50>)
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	3304      	adds	r3, #4
 8005a34:	4618      	mov	r0, r3
 8005a36:	f7fe fa6b 	bl	8003f10 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8005a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8005a70 <prvCheckTasksWaitingTermination+0x54>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	4a0b      	ldr	r2, [pc, #44]	@ (8005a70 <prvCheckTasksWaitingTermination+0x54>)
 8005a42:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8005a44:	4b0b      	ldr	r3, [pc, #44]	@ (8005a74 <prvCheckTasksWaitingTermination+0x58>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	4a0a      	ldr	r2, [pc, #40]	@ (8005a74 <prvCheckTasksWaitingTermination+0x58>)
 8005a4c:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8005a4e:	f000 fedf 	bl	8006810 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 f810 	bl	8005a78 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a58:	4b06      	ldr	r3, [pc, #24]	@ (8005a74 <prvCheckTasksWaitingTermination+0x58>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d1e1      	bne.n	8005a24 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8005a60:	bf00      	nop
 8005a62:	bf00      	nop
 8005a64:	3708      	adds	r7, #8
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	200006ac 	.word	0x200006ac
 8005a70:	200006d8 	.word	0x200006d8
 8005a74:	200006c0 	.word	0x200006c0

08005a78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a84:	4618      	mov	r0, r3
 8005a86:	f001 f835 	bl	8006af4 <vPortFree>
            vPortFree( pxTCB );
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f001 f832 	bl	8006af4 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8005a90:	bf00      	nop
 8005a92:	3708      	adds	r7, #8
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005a98:	b480      	push	{r7}
 8005a9a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8005ac8 <prvResetNextTaskUnblockTime+0x30>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d104      	bne.n	8005ab0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8005aa6:	4b09      	ldr	r3, [pc, #36]	@ (8005acc <prvResetNextTaskUnblockTime+0x34>)
 8005aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8005aac:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8005aae:	e005      	b.n	8005abc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005ab0:	4b05      	ldr	r3, [pc, #20]	@ (8005ac8 <prvResetNextTaskUnblockTime+0x30>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a04      	ldr	r2, [pc, #16]	@ (8005acc <prvResetNextTaskUnblockTime+0x34>)
 8005aba:	6013      	str	r3, [r2, #0]
}
 8005abc:	bf00      	nop
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	20000690 	.word	0x20000690
 8005acc:	200006f8 	.word	0x200006f8

08005ad0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8005ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8005b04 <xTaskGetSchedulerState+0x34>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d102      	bne.n	8005ae4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	607b      	str	r3, [r7, #4]
 8005ae2:	e008      	b.n	8005af6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ae4:	4b08      	ldr	r3, [pc, #32]	@ (8005b08 <xTaskGetSchedulerState+0x38>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d102      	bne.n	8005af2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8005aec:	2302      	movs	r3, #2
 8005aee:	607b      	str	r3, [r7, #4]
 8005af0:	e001      	b.n	8005af6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8005af2:	2300      	movs	r3, #0
 8005af4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8005af6:	687b      	ldr	r3, [r7, #4]
    }
 8005af8:	4618      	mov	r0, r3
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr
 8005b04:	200006e4 	.word	0x200006e4
 8005b08:	20000700 	.word	0x20000700

08005b0c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b086      	sub	sp, #24
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	f000 8087 	beq.w	8005c32 <xTaskPriorityInherit+0x126>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b28:	4b44      	ldr	r3, [pc, #272]	@ (8005c3c <xTaskPriorityInherit+0x130>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d276      	bcs.n	8005c20 <xTaskPriorityInherit+0x114>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	db06      	blt.n	8005b48 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b3a:	4b40      	ldr	r3, [pc, #256]	@ (8005c3c <xTaskPriorityInherit+0x130>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b40:	f1c3 0205 	rsb	r2, r3, #5
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	6959      	ldr	r1, [r3, #20]
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b50:	4613      	mov	r3, r2
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	4413      	add	r3, r2
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	4a39      	ldr	r2, [pc, #228]	@ (8005c40 <xTaskPriorityInherit+0x134>)
 8005b5a:	4413      	add	r3, r2
 8005b5c:	4299      	cmp	r1, r3
 8005b5e:	d157      	bne.n	8005c10 <xTaskPriorityInherit+0x104>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	3304      	adds	r3, #4
 8005b64:	4618      	mov	r0, r3
 8005b66:	f7fe f9d3 	bl	8003f10 <uxListRemove>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d10a      	bne.n	8005b86 <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b74:	2201      	movs	r2, #1
 8005b76:	fa02 f303 	lsl.w	r3, r2, r3
 8005b7a:	43da      	mvns	r2, r3
 8005b7c:	4b31      	ldr	r3, [pc, #196]	@ (8005c44 <xTaskPriorityInherit+0x138>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4013      	ands	r3, r2
 8005b82:	4a30      	ldr	r2, [pc, #192]	@ (8005c44 <xTaskPriorityInherit+0x138>)
 8005b84:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005b86:	4b2d      	ldr	r3, [pc, #180]	@ (8005c3c <xTaskPriorityInherit+0x130>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b94:	2201      	movs	r2, #1
 8005b96:	409a      	lsls	r2, r3
 8005b98:	4b2a      	ldr	r3, [pc, #168]	@ (8005c44 <xTaskPriorityInherit+0x138>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	4a29      	ldr	r2, [pc, #164]	@ (8005c44 <xTaskPriorityInherit+0x138>)
 8005ba0:	6013      	str	r3, [r2, #0]
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ba6:	4926      	ldr	r1, [pc, #152]	@ (8005c40 <xTaskPriorityInherit+0x134>)
 8005ba8:	4613      	mov	r3, r2
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	4413      	add	r3, r2
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	440b      	add	r3, r1
 8005bb2:	3304      	adds	r3, #4
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	60fb      	str	r3, [r7, #12]
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	609a      	str	r2, [r3, #8]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	689a      	ldr	r2, [r3, #8]
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	60da      	str	r2, [r3, #12]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	693a      	ldr	r2, [r7, #16]
 8005bcc:	3204      	adds	r2, #4
 8005bce:	605a      	str	r2, [r3, #4]
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	1d1a      	adds	r2, r3, #4
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	609a      	str	r2, [r3, #8]
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bdc:	4613      	mov	r3, r2
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	4413      	add	r3, r2
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	4a16      	ldr	r2, [pc, #88]	@ (8005c40 <xTaskPriorityInherit+0x134>)
 8005be6:	441a      	add	r2, r3
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	615a      	str	r2, [r3, #20]
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bf0:	4913      	ldr	r1, [pc, #76]	@ (8005c40 <xTaskPriorityInherit+0x134>)
 8005bf2:	4613      	mov	r3, r2
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	4413      	add	r3, r2
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	440b      	add	r3, r1
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	1c59      	adds	r1, r3, #1
 8005c00:	480f      	ldr	r0, [pc, #60]	@ (8005c40 <xTaskPriorityInherit+0x134>)
 8005c02:	4613      	mov	r3, r2
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	4413      	add	r3, r2
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	4403      	add	r3, r0
 8005c0c:	6019      	str	r1, [r3, #0]
 8005c0e:	e004      	b.n	8005c1a <xTaskPriorityInherit+0x10e>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005c10:	4b0a      	ldr	r3, [pc, #40]	@ (8005c3c <xTaskPriorityInherit+0x130>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	617b      	str	r3, [r7, #20]
 8005c1e:	e008      	b.n	8005c32 <xTaskPriorityInherit+0x126>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005c24:	4b05      	ldr	r3, [pc, #20]	@ (8005c3c <xTaskPriorityInherit+0x130>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d201      	bcs.n	8005c32 <xTaskPriorityInherit+0x126>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005c32:	697b      	ldr	r3, [r7, #20]
    }
 8005c34:	4618      	mov	r0, r3
 8005c36:	3718      	adds	r7, #24
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}
 8005c3c:	20000600 	.word	0x20000600
 8005c40:	20000604 	.word	0x20000604
 8005c44:	200006e0 	.word	0x200006e0

08005c48 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b088      	sub	sp, #32
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8005c54:	2300      	movs	r3, #0
 8005c56:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	f000 808e 	beq.w	8005d7c <xTaskPriorityDisinherit+0x134>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8005c60:	4b49      	ldr	r3, [pc, #292]	@ (8005d88 <xTaskPriorityDisinherit+0x140>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	69ba      	ldr	r2, [r7, #24]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d00b      	beq.n	8005c82 <xTaskPriorityDisinherit+0x3a>
        __asm volatile
 8005c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c6e:	f383 8811 	msr	BASEPRI, r3
 8005c72:	f3bf 8f6f 	isb	sy
 8005c76:	f3bf 8f4f 	dsb	sy
 8005c7a:	613b      	str	r3, [r7, #16]
    }
 8005c7c:	bf00      	nop
 8005c7e:	bf00      	nop
 8005c80:	e7fd      	b.n	8005c7e <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d10b      	bne.n	8005ca2 <xTaskPriorityDisinherit+0x5a>
        __asm volatile
 8005c8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c8e:	f383 8811 	msr	BASEPRI, r3
 8005c92:	f3bf 8f6f 	isb	sy
 8005c96:	f3bf 8f4f 	dsb	sy
 8005c9a:	60fb      	str	r3, [r7, #12]
    }
 8005c9c:	bf00      	nop
 8005c9e:	bf00      	nop
 8005ca0:	e7fd      	b.n	8005c9e <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ca6:	1e5a      	subs	r2, r3, #1
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d061      	beq.n	8005d7c <xTaskPriorityDisinherit+0x134>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d15d      	bne.n	8005d7c <xTaskPriorityDisinherit+0x134>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	3304      	adds	r3, #4
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f7fe f923 	bl	8003f10 <uxListRemove>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d10a      	bne.n	8005ce6 <xTaskPriorityDisinherit+0x9e>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cda:	43da      	mvns	r2, r3
 8005cdc:	4b2b      	ldr	r3, [pc, #172]	@ (8005d8c <xTaskPriorityDisinherit+0x144>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	4a2a      	ldr	r2, [pc, #168]	@ (8005d8c <xTaskPriorityDisinherit+0x144>)
 8005ce4:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cf2:	f1c3 0205 	rsb	r2, r3, #5
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cfe:	2201      	movs	r2, #1
 8005d00:	409a      	lsls	r2, r3
 8005d02:	4b22      	ldr	r3, [pc, #136]	@ (8005d8c <xTaskPriorityDisinherit+0x144>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	4a20      	ldr	r2, [pc, #128]	@ (8005d8c <xTaskPriorityDisinherit+0x144>)
 8005d0a:	6013      	str	r3, [r2, #0]
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d10:	491f      	ldr	r1, [pc, #124]	@ (8005d90 <xTaskPriorityDisinherit+0x148>)
 8005d12:	4613      	mov	r3, r2
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	4413      	add	r3, r2
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	440b      	add	r3, r1
 8005d1c:	3304      	adds	r3, #4
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	617b      	str	r3, [r7, #20]
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	697a      	ldr	r2, [r7, #20]
 8005d26:	609a      	str	r2, [r3, #8]
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	689a      	ldr	r2, [r3, #8]
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	60da      	str	r2, [r3, #12]
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	69ba      	ldr	r2, [r7, #24]
 8005d36:	3204      	adds	r2, #4
 8005d38:	605a      	str	r2, [r3, #4]
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	1d1a      	adds	r2, r3, #4
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	609a      	str	r2, [r3, #8]
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d46:	4613      	mov	r3, r2
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	4413      	add	r3, r2
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	4a10      	ldr	r2, [pc, #64]	@ (8005d90 <xTaskPriorityDisinherit+0x148>)
 8005d50:	441a      	add	r2, r3
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	615a      	str	r2, [r3, #20]
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d5a:	490d      	ldr	r1, [pc, #52]	@ (8005d90 <xTaskPriorityDisinherit+0x148>)
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	4413      	add	r3, r2
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	440b      	add	r3, r1
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	1c59      	adds	r1, r3, #1
 8005d6a:	4809      	ldr	r0, [pc, #36]	@ (8005d90 <xTaskPriorityDisinherit+0x148>)
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	4413      	add	r3, r2
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	4403      	add	r3, r0
 8005d76:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005d7c:	69fb      	ldr	r3, [r7, #28]
    }
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3720      	adds	r7, #32
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	20000600 	.word	0x20000600
 8005d8c:	200006e0 	.word	0x200006e0
 8005d90:	20000604 	.word	0x20000604

08005d94 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b08a      	sub	sp, #40	@ 0x28
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005da2:	2301      	movs	r3, #1
 8005da4:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	f000 80a3 	beq.w	8005ef4 <vTaskPriorityDisinheritAfterTimeout+0x160>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8005dae:	6a3b      	ldr	r3, [r7, #32]
 8005db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d10b      	bne.n	8005dce <vTaskPriorityDisinheritAfterTimeout+0x3a>
        __asm volatile
 8005db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dba:	f383 8811 	msr	BASEPRI, r3
 8005dbe:	f3bf 8f6f 	isb	sy
 8005dc2:	f3bf 8f4f 	dsb	sy
 8005dc6:	613b      	str	r3, [r7, #16]
    }
 8005dc8:	bf00      	nop
 8005dca:	bf00      	nop
 8005dcc:	e7fd      	b.n	8005dca <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005dce:	6a3b      	ldr	r3, [r7, #32]
 8005dd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dd2:	683a      	ldr	r2, [r7, #0]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d902      	bls.n	8005dde <vTaskPriorityDisinheritAfterTimeout+0x4a>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ddc:	e002      	b.n	8005de4 <vTaskPriorityDisinheritAfterTimeout+0x50>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8005dde:	6a3b      	ldr	r3, [r7, #32]
 8005de0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005de2:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8005de4:	6a3b      	ldr	r3, [r7, #32]
 8005de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005de8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dea:	429a      	cmp	r2, r3
 8005dec:	f000 8082 	beq.w	8005ef4 <vTaskPriorityDisinheritAfterTimeout+0x160>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005df0:	6a3b      	ldr	r3, [r7, #32]
 8005df2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005df4:	69fa      	ldr	r2, [r7, #28]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d17c      	bne.n	8005ef4 <vTaskPriorityDisinheritAfterTimeout+0x160>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8005dfa:	4b40      	ldr	r3, [pc, #256]	@ (8005efc <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	6a3a      	ldr	r2, [r7, #32]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d10b      	bne.n	8005e1c <vTaskPriorityDisinheritAfterTimeout+0x88>
        __asm volatile
 8005e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e08:	f383 8811 	msr	BASEPRI, r3
 8005e0c:	f3bf 8f6f 	isb	sy
 8005e10:	f3bf 8f4f 	dsb	sy
 8005e14:	60fb      	str	r3, [r7, #12]
    }
 8005e16:	bf00      	nop
 8005e18:	bf00      	nop
 8005e1a:	e7fd      	b.n	8005e18 <vTaskPriorityDisinheritAfterTimeout+0x84>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005e1c:	6a3b      	ldr	r3, [r7, #32]
 8005e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e20:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 8005e22:	6a3b      	ldr	r3, [r7, #32]
 8005e24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e26:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005e28:	6a3b      	ldr	r3, [r7, #32]
 8005e2a:	699b      	ldr	r3, [r3, #24]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	db04      	blt.n	8005e3a <vTaskPriorityDisinheritAfterTimeout+0xa6>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e32:	f1c3 0205 	rsb	r2, r3, #5
 8005e36:	6a3b      	ldr	r3, [r7, #32]
 8005e38:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005e3a:	6a3b      	ldr	r3, [r7, #32]
 8005e3c:	6959      	ldr	r1, [r3, #20]
 8005e3e:	69ba      	ldr	r2, [r7, #24]
 8005e40:	4613      	mov	r3, r2
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	4413      	add	r3, r2
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	4a2d      	ldr	r2, [pc, #180]	@ (8005f00 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8005e4a:	4413      	add	r3, r2
 8005e4c:	4299      	cmp	r1, r3
 8005e4e:	d151      	bne.n	8005ef4 <vTaskPriorityDisinheritAfterTimeout+0x160>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e50:	6a3b      	ldr	r3, [r7, #32]
 8005e52:	3304      	adds	r3, #4
 8005e54:	4618      	mov	r0, r3
 8005e56:	f7fe f85b 	bl	8003f10 <uxListRemove>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d10a      	bne.n	8005e76 <vTaskPriorityDisinheritAfterTimeout+0xe2>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005e60:	6a3b      	ldr	r3, [r7, #32]
 8005e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e64:	2201      	movs	r2, #1
 8005e66:	fa02 f303 	lsl.w	r3, r2, r3
 8005e6a:	43da      	mvns	r2, r3
 8005e6c:	4b25      	ldr	r3, [pc, #148]	@ (8005f04 <vTaskPriorityDisinheritAfterTimeout+0x170>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4013      	ands	r3, r2
 8005e72:	4a24      	ldr	r2, [pc, #144]	@ (8005f04 <vTaskPriorityDisinheritAfterTimeout+0x170>)
 8005e74:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8005e76:	6a3b      	ldr	r3, [r7, #32]
 8005e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	409a      	lsls	r2, r3
 8005e7e:	4b21      	ldr	r3, [pc, #132]	@ (8005f04 <vTaskPriorityDisinheritAfterTimeout+0x170>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	4a1f      	ldr	r2, [pc, #124]	@ (8005f04 <vTaskPriorityDisinheritAfterTimeout+0x170>)
 8005e86:	6013      	str	r3, [r2, #0]
 8005e88:	6a3b      	ldr	r3, [r7, #32]
 8005e8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e8c:	491c      	ldr	r1, [pc, #112]	@ (8005f00 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8005e8e:	4613      	mov	r3, r2
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	4413      	add	r3, r2
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	440b      	add	r3, r1
 8005e98:	3304      	adds	r3, #4
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	617b      	str	r3, [r7, #20]
 8005e9e:	6a3b      	ldr	r3, [r7, #32]
 8005ea0:	697a      	ldr	r2, [r7, #20]
 8005ea2:	609a      	str	r2, [r3, #8]
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	689a      	ldr	r2, [r3, #8]
 8005ea8:	6a3b      	ldr	r3, [r7, #32]
 8005eaa:	60da      	str	r2, [r3, #12]
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	6a3a      	ldr	r2, [r7, #32]
 8005eb2:	3204      	adds	r2, #4
 8005eb4:	605a      	str	r2, [r3, #4]
 8005eb6:	6a3b      	ldr	r3, [r7, #32]
 8005eb8:	1d1a      	adds	r2, r3, #4
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	609a      	str	r2, [r3, #8]
 8005ebe:	6a3b      	ldr	r3, [r7, #32]
 8005ec0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ec2:	4613      	mov	r3, r2
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	4413      	add	r3, r2
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	4a0d      	ldr	r2, [pc, #52]	@ (8005f00 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8005ecc:	441a      	add	r2, r3
 8005ece:	6a3b      	ldr	r3, [r7, #32]
 8005ed0:	615a      	str	r2, [r3, #20]
 8005ed2:	6a3b      	ldr	r3, [r7, #32]
 8005ed4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ed6:	490a      	ldr	r1, [pc, #40]	@ (8005f00 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8005ed8:	4613      	mov	r3, r2
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	4413      	add	r3, r2
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	440b      	add	r3, r1
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	1c59      	adds	r1, r3, #1
 8005ee6:	4806      	ldr	r0, [pc, #24]	@ (8005f00 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8005ee8:	4613      	mov	r3, r2
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	4413      	add	r3, r2
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	4403      	add	r3, r0
 8005ef2:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8005ef4:	bf00      	nop
 8005ef6:	3728      	adds	r7, #40	@ 0x28
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	20000600 	.word	0x20000600
 8005f00:	20000604 	.word	0x20000604
 8005f04:	200006e0 	.word	0x200006e0

08005f08 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8005f08:	b480      	push	{r7}
 8005f0a:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8005f0c:	4b07      	ldr	r3, [pc, #28]	@ (8005f2c <pvTaskIncrementMutexHeldCount+0x24>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d004      	beq.n	8005f1e <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8005f14:	4b05      	ldr	r3, [pc, #20]	@ (8005f2c <pvTaskIncrementMutexHeldCount+0x24>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005f1a:	3201      	adds	r2, #1
 8005f1c:	64da      	str	r2, [r3, #76]	@ 0x4c
        }

        return pxCurrentTCB;
 8005f1e:	4b03      	ldr	r3, [pc, #12]	@ (8005f2c <pvTaskIncrementMutexHeldCount+0x24>)
 8005f20:	681b      	ldr	r3, [r3, #0]
    }
 8005f22:	4618      	mov	r0, r3
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr
 8005f2c:	20000600 	.word	0x20000600

08005f30 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b086      	sub	sp, #24
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8005f3a:	4b36      	ldr	r3, [pc, #216]	@ (8006014 <prvAddCurrentTaskToDelayedList+0xe4>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f40:	4b35      	ldr	r3, [pc, #212]	@ (8006018 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	3304      	adds	r3, #4
 8005f46:	4618      	mov	r0, r3
 8005f48:	f7fd ffe2 	bl	8003f10 <uxListRemove>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d10b      	bne.n	8005f6a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005f52:	4b31      	ldr	r3, [pc, #196]	@ (8006018 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f58:	2201      	movs	r2, #1
 8005f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f5e:	43da      	mvns	r2, r3
 8005f60:	4b2e      	ldr	r3, [pc, #184]	@ (800601c <prvAddCurrentTaskToDelayedList+0xec>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4013      	ands	r3, r2
 8005f66:	4a2d      	ldr	r2, [pc, #180]	@ (800601c <prvAddCurrentTaskToDelayedList+0xec>)
 8005f68:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f70:	d124      	bne.n	8005fbc <prvAddCurrentTaskToDelayedList+0x8c>
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d021      	beq.n	8005fbc <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f78:	4b29      	ldr	r3, [pc, #164]	@ (8006020 <prvAddCurrentTaskToDelayedList+0xf0>)
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	613b      	str	r3, [r7, #16]
 8005f7e:	4b26      	ldr	r3, [pc, #152]	@ (8006018 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	693a      	ldr	r2, [r7, #16]
 8005f84:	609a      	str	r2, [r3, #8]
 8005f86:	4b24      	ldr	r3, [pc, #144]	@ (8006018 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	693a      	ldr	r2, [r7, #16]
 8005f8c:	6892      	ldr	r2, [r2, #8]
 8005f8e:	60da      	str	r2, [r3, #12]
 8005f90:	4b21      	ldr	r3, [pc, #132]	@ (8006018 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	3204      	adds	r2, #4
 8005f9a:	605a      	str	r2, [r3, #4]
 8005f9c:	4b1e      	ldr	r3, [pc, #120]	@ (8006018 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	1d1a      	adds	r2, r3, #4
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	609a      	str	r2, [r3, #8]
 8005fa6:	4b1c      	ldr	r3, [pc, #112]	@ (8006018 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a1d      	ldr	r2, [pc, #116]	@ (8006020 <prvAddCurrentTaskToDelayedList+0xf0>)
 8005fac:	615a      	str	r2, [r3, #20]
 8005fae:	4b1c      	ldr	r3, [pc, #112]	@ (8006020 <prvAddCurrentTaskToDelayedList+0xf0>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	4a1a      	ldr	r2, [pc, #104]	@ (8006020 <prvAddCurrentTaskToDelayedList+0xf0>)
 8005fb6:	6013      	str	r3, [r2, #0]
 8005fb8:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8005fba:	e026      	b.n	800600a <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8005fbc:	697a      	ldr	r2, [r7, #20]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4413      	add	r3, r2
 8005fc2:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005fc4:	4b14      	ldr	r3, [pc, #80]	@ (8006018 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68fa      	ldr	r2, [r7, #12]
 8005fca:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d209      	bcs.n	8005fe8 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fd4:	4b13      	ldr	r3, [pc, #76]	@ (8006024 <prvAddCurrentTaskToDelayedList+0xf4>)
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	4b0f      	ldr	r3, [pc, #60]	@ (8006018 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	3304      	adds	r3, #4
 8005fde:	4619      	mov	r1, r3
 8005fe0:	4610      	mov	r0, r2
 8005fe2:	f7fd ff5c 	bl	8003e9e <vListInsert>
}
 8005fe6:	e010      	b.n	800600a <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8006028 <prvAddCurrentTaskToDelayedList+0xf8>)
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	4b0a      	ldr	r3, [pc, #40]	@ (8006018 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	3304      	adds	r3, #4
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	4610      	mov	r0, r2
 8005ff6:	f7fd ff52 	bl	8003e9e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8005ffa:	4b0c      	ldr	r3, [pc, #48]	@ (800602c <prvAddCurrentTaskToDelayedList+0xfc>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	429a      	cmp	r2, r3
 8006002:	d202      	bcs.n	800600a <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8006004:	4a09      	ldr	r2, [pc, #36]	@ (800602c <prvAddCurrentTaskToDelayedList+0xfc>)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6013      	str	r3, [r2, #0]
}
 800600a:	bf00      	nop
 800600c:	3718      	adds	r7, #24
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop
 8006014:	200006dc 	.word	0x200006dc
 8006018:	20000600 	.word	0x20000600
 800601c:	200006e0 	.word	0x200006e0
 8006020:	200006c4 	.word	0x200006c4
 8006024:	20000694 	.word	0x20000694
 8006028:	20000690 	.word	0x20000690
 800602c:	200006f8 	.word	0x200006f8

08006030 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8006036:	2300      	movs	r3, #0
 8006038:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800603a:	f000 fa4f 	bl	80064dc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800603e:	4b12      	ldr	r3, [pc, #72]	@ (8006088 <xTimerCreateTimerTask+0x58>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00b      	beq.n	800605e <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8006046:	4b11      	ldr	r3, [pc, #68]	@ (800608c <xTimerCreateTimerTask+0x5c>)
 8006048:	9301      	str	r3, [sp, #4]
 800604a:	2302      	movs	r3, #2
 800604c:	9300      	str	r3, [sp, #0]
 800604e:	2300      	movs	r3, #0
 8006050:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006054:	490e      	ldr	r1, [pc, #56]	@ (8006090 <xTimerCreateTimerTask+0x60>)
 8006056:	480f      	ldr	r0, [pc, #60]	@ (8006094 <xTimerCreateTimerTask+0x64>)
 8006058:	f7fe fd4a 	bl	8004af0 <xTaskCreate>
 800605c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d10b      	bne.n	800607c <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8006064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006068:	f383 8811 	msr	BASEPRI, r3
 800606c:	f3bf 8f6f 	isb	sy
 8006070:	f3bf 8f4f 	dsb	sy
 8006074:	603b      	str	r3, [r7, #0]
    }
 8006076:	bf00      	nop
 8006078:	bf00      	nop
 800607a:	e7fd      	b.n	8006078 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800607c:	687b      	ldr	r3, [r7, #4]
    }
 800607e:	4618      	mov	r0, r3
 8006080:	3708      	adds	r7, #8
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	20000734 	.word	0x20000734
 800608c:	20000738 	.word	0x20000738
 8006090:	080076b0 	.word	0x080076b0
 8006094:	0800613d 	.word	0x0800613d

08006098 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8006098:	b580      	push	{r7, lr}
 800609a:	b084      	sub	sp, #16
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80060a4:	e008      	b.n	80060b8 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	699b      	ldr	r3, [r3, #24]
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	4413      	add	r3, r2
 80060ae:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6a1b      	ldr	r3, [r3, #32]
 80060b4:	68f8      	ldr	r0, [r7, #12]
 80060b6:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	699a      	ldr	r2, [r3, #24]
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	18d1      	adds	r1, r2, r3
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	68f8      	ldr	r0, [r7, #12]
 80060c6:	f000 f8df 	bl	8006288 <prvInsertTimerInActiveList>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d1ea      	bne.n	80060a6 <prvReloadTimer+0xe>
        }
    }
 80060d0:	bf00      	nop
 80060d2:	bf00      	nop
 80060d4:	3710      	adds	r7, #16
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
	...

080060dc <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060e6:	4b14      	ldr	r3, [pc, #80]	@ (8006138 <prvProcessExpiredTimer+0x5c>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	3304      	adds	r3, #4
 80060f4:	4618      	mov	r0, r3
 80060f6:	f7fd ff0b 	bl	8003f10 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006100:	f003 0304 	and.w	r3, r3, #4
 8006104:	2b00      	cmp	r3, #0
 8006106:	d005      	beq.n	8006114 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8006108:	683a      	ldr	r2, [r7, #0]
 800610a:	6879      	ldr	r1, [r7, #4]
 800610c:	68f8      	ldr	r0, [r7, #12]
 800610e:	f7ff ffc3 	bl	8006098 <prvReloadTimer>
 8006112:	e008      	b.n	8006126 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800611a:	f023 0301 	bic.w	r3, r3, #1
 800611e:	b2da      	uxtb	r2, r3
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6a1b      	ldr	r3, [r3, #32]
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	4798      	blx	r3
    }
 800612e:	bf00      	nop
 8006130:	3710      	adds	r7, #16
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	2000072c 	.word	0x2000072c

0800613c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006144:	f107 0308 	add.w	r3, r7, #8
 8006148:	4618      	mov	r0, r3
 800614a:	f000 f859 	bl	8006200 <prvGetNextExpireTime>
 800614e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	4619      	mov	r1, r3
 8006154:	68f8      	ldr	r0, [r7, #12]
 8006156:	f000 f805 	bl	8006164 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800615a:	f000 f8d7 	bl	800630c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800615e:	bf00      	nop
 8006160:	e7f0      	b.n	8006144 <prvTimerTask+0x8>
	...

08006164 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800616e:	f7fe ffa1 	bl	80050b4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006172:	f107 0308 	add.w	r3, r7, #8
 8006176:	4618      	mov	r0, r3
 8006178:	f000 f866 	bl	8006248 <prvSampleTimeNow>
 800617c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d130      	bne.n	80061e6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d10a      	bne.n	80061a0 <prvProcessTimerOrBlockTask+0x3c>
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	429a      	cmp	r2, r3
 8006190:	d806      	bhi.n	80061a0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8006192:	f7fe ff9d 	bl	80050d0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006196:	68f9      	ldr	r1, [r7, #12]
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f7ff ff9f 	bl	80060dc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800619e:	e024      	b.n	80061ea <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d008      	beq.n	80061b8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80061a6:	4b13      	ldr	r3, [pc, #76]	@ (80061f4 <prvProcessTimerOrBlockTask+0x90>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d101      	bne.n	80061b4 <prvProcessTimerOrBlockTask+0x50>
 80061b0:	2301      	movs	r3, #1
 80061b2:	e000      	b.n	80061b6 <prvProcessTimerOrBlockTask+0x52>
 80061b4:	2300      	movs	r3, #0
 80061b6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80061b8:	4b0f      	ldr	r3, [pc, #60]	@ (80061f8 <prvProcessTimerOrBlockTask+0x94>)
 80061ba:	6818      	ldr	r0, [r3, #0]
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	683a      	ldr	r2, [r7, #0]
 80061c4:	4619      	mov	r1, r3
 80061c6:	f7fe fc5f 	bl	8004a88 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80061ca:	f7fe ff81 	bl	80050d0 <xTaskResumeAll>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d10a      	bne.n	80061ea <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80061d4:	4b09      	ldr	r3, [pc, #36]	@ (80061fc <prvProcessTimerOrBlockTask+0x98>)
 80061d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061da:	601a      	str	r2, [r3, #0]
 80061dc:	f3bf 8f4f 	dsb	sy
 80061e0:	f3bf 8f6f 	isb	sy
    }
 80061e4:	e001      	b.n	80061ea <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80061e6:	f7fe ff73 	bl	80050d0 <xTaskResumeAll>
    }
 80061ea:	bf00      	nop
 80061ec:	3710      	adds	r7, #16
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	20000730 	.word	0x20000730
 80061f8:	20000734 	.word	0x20000734
 80061fc:	e000ed04 	.word	0xe000ed04

08006200 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8006200:	b480      	push	{r7}
 8006202:	b085      	sub	sp, #20
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006208:	4b0e      	ldr	r3, [pc, #56]	@ (8006244 <prvGetNextExpireTime+0x44>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d101      	bne.n	8006216 <prvGetNextExpireTime+0x16>
 8006212:	2201      	movs	r2, #1
 8006214:	e000      	b.n	8006218 <prvGetNextExpireTime+0x18>
 8006216:	2200      	movs	r2, #0
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d105      	bne.n	8006230 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006224:	4b07      	ldr	r3, [pc, #28]	@ (8006244 <prvGetNextExpireTime+0x44>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	60fb      	str	r3, [r7, #12]
 800622e:	e001      	b.n	8006234 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8006230:	2300      	movs	r3, #0
 8006232:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8006234:	68fb      	ldr	r3, [r7, #12]
    }
 8006236:	4618      	mov	r0, r3
 8006238:	3714      	adds	r7, #20
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop
 8006244:	2000072c 	.word	0x2000072c

08006248 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8006250:	f7ff f83a 	bl	80052c8 <xTaskGetTickCount>
 8006254:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8006256:	4b0b      	ldr	r3, [pc, #44]	@ (8006284 <prvSampleTimeNow+0x3c>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	429a      	cmp	r2, r3
 800625e:	d205      	bcs.n	800626c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8006260:	f000 f916 	bl	8006490 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	601a      	str	r2, [r3, #0]
 800626a:	e002      	b.n	8006272 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8006272:	4a04      	ldr	r2, [pc, #16]	@ (8006284 <prvSampleTimeNow+0x3c>)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8006278:	68fb      	ldr	r3, [r7, #12]
    }
 800627a:	4618      	mov	r0, r3
 800627c:	3710      	adds	r7, #16
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	2000073c 	.word	0x2000073c

08006288 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8006288:	b580      	push	{r7, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	af00      	add	r7, sp, #0
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	607a      	str	r2, [r7, #4]
 8006294:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8006296:	2300      	movs	r3, #0
 8006298:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	68ba      	ldr	r2, [r7, #8]
 800629e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80062a6:	68ba      	ldr	r2, [r7, #8]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d812      	bhi.n	80062d4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	1ad2      	subs	r2, r2, r3
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	699b      	ldr	r3, [r3, #24]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d302      	bcc.n	80062c2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80062bc:	2301      	movs	r3, #1
 80062be:	617b      	str	r3, [r7, #20]
 80062c0:	e01b      	b.n	80062fa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80062c2:	4b10      	ldr	r3, [pc, #64]	@ (8006304 <prvInsertTimerInActiveList+0x7c>)
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	3304      	adds	r3, #4
 80062ca:	4619      	mov	r1, r3
 80062cc:	4610      	mov	r0, r2
 80062ce:	f7fd fde6 	bl	8003e9e <vListInsert>
 80062d2:	e012      	b.n	80062fa <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	429a      	cmp	r2, r3
 80062da:	d206      	bcs.n	80062ea <prvInsertTimerInActiveList+0x62>
 80062dc:	68ba      	ldr	r2, [r7, #8]
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d302      	bcc.n	80062ea <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80062e4:	2301      	movs	r3, #1
 80062e6:	617b      	str	r3, [r7, #20]
 80062e8:	e007      	b.n	80062fa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80062ea:	4b07      	ldr	r3, [pc, #28]	@ (8006308 <prvInsertTimerInActiveList+0x80>)
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	3304      	adds	r3, #4
 80062f2:	4619      	mov	r1, r3
 80062f4:	4610      	mov	r0, r2
 80062f6:	f7fd fdd2 	bl	8003e9e <vListInsert>
            }
        }

        return xProcessTimerNow;
 80062fa:	697b      	ldr	r3, [r7, #20]
    }
 80062fc:	4618      	mov	r0, r3
 80062fe:	3718      	adds	r7, #24
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	20000730 	.word	0x20000730
 8006308:	2000072c 	.word	0x2000072c

0800630c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800630c:	b580      	push	{r7, lr}
 800630e:	b088      	sub	sp, #32
 8006310:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006312:	e0a9      	b.n	8006468 <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	2b00      	cmp	r3, #0
 8006318:	f2c0 80a6 	blt.w	8006468 <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	695b      	ldr	r3, [r3, #20]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d004      	beq.n	8006332 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	3304      	adds	r3, #4
 800632c:	4618      	mov	r0, r3
 800632e:	f7fd fdef 	bl	8003f10 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006332:	1d3b      	adds	r3, r7, #4
 8006334:	4618      	mov	r0, r3
 8006336:	f7ff ff87 	bl	8006248 <prvSampleTimeNow>
 800633a:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	3b01      	subs	r3, #1
 8006340:	2b08      	cmp	r3, #8
 8006342:	f200 808e 	bhi.w	8006462 <prvProcessReceivedCommands+0x156>
 8006346:	a201      	add	r2, pc, #4	@ (adr r2, 800634c <prvProcessReceivedCommands+0x40>)
 8006348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800634c:	08006371 	.word	0x08006371
 8006350:	08006371 	.word	0x08006371
 8006354:	080063d9 	.word	0x080063d9
 8006358:	080063ed 	.word	0x080063ed
 800635c:	08006439 	.word	0x08006439
 8006360:	08006371 	.word	0x08006371
 8006364:	08006371 	.word	0x08006371
 8006368:	080063d9 	.word	0x080063d9
 800636c:	080063ed 	.word	0x080063ed
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006376:	f043 0301 	orr.w	r3, r3, #1
 800637a:	b2da      	uxtb	r2, r3
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	699b      	ldr	r3, [r3, #24]
 8006388:	18d1      	adds	r1, r2, r3
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	69ba      	ldr	r2, [r7, #24]
 800638e:	69f8      	ldr	r0, [r7, #28]
 8006390:	f7ff ff7a 	bl	8006288 <prvInsertTimerInActiveList>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d065      	beq.n	8006466 <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063a0:	f003 0304 	and.w	r3, r3, #4
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d009      	beq.n	80063bc <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	4413      	add	r3, r2
 80063b0:	69ba      	ldr	r2, [r7, #24]
 80063b2:	4619      	mov	r1, r3
 80063b4:	69f8      	ldr	r0, [r7, #28]
 80063b6:	f7ff fe6f 	bl	8006098 <prvReloadTimer>
 80063ba:	e008      	b.n	80063ce <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063c2:	f023 0301 	bic.w	r3, r3, #1
 80063c6:	b2da      	uxtb	r2, r3
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	6a1b      	ldr	r3, [r3, #32]
 80063d2:	69f8      	ldr	r0, [r7, #28]
 80063d4:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80063d6:	e046      	b.n	8006466 <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063de:	f023 0301 	bic.w	r3, r3, #1
 80063e2:	b2da      	uxtb	r2, r3
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80063ea:	e03d      	b.n	8006468 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063f2:	f043 0301 	orr.w	r3, r3, #1
 80063f6:	b2da      	uxtb	r2, r3
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80063fe:	68fa      	ldr	r2, [r7, #12]
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	699b      	ldr	r3, [r3, #24]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d10b      	bne.n	8006424 <prvProcessReceivedCommands+0x118>
        __asm volatile
 800640c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006410:	f383 8811 	msr	BASEPRI, r3
 8006414:	f3bf 8f6f 	isb	sy
 8006418:	f3bf 8f4f 	dsb	sy
 800641c:	617b      	str	r3, [r7, #20]
    }
 800641e:	bf00      	nop
 8006420:	bf00      	nop
 8006422:	e7fd      	b.n	8006420 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	699a      	ldr	r2, [r3, #24]
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	18d1      	adds	r1, r2, r3
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	69ba      	ldr	r2, [r7, #24]
 8006430:	69f8      	ldr	r0, [r7, #28]
 8006432:	f7ff ff29 	bl	8006288 <prvInsertTimerInActiveList>
                        break;
 8006436:	e017      	b.n	8006468 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800643e:	f003 0302 	and.w	r3, r3, #2
 8006442:	2b00      	cmp	r3, #0
 8006444:	d103      	bne.n	800644e <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 8006446:	69f8      	ldr	r0, [r7, #28]
 8006448:	f000 fb54 	bl	8006af4 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800644c:	e00c      	b.n	8006468 <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006454:	f023 0301 	bic.w	r3, r3, #1
 8006458:	b2da      	uxtb	r2, r3
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8006460:	e002      	b.n	8006468 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 8006462:	bf00      	nop
 8006464:	e000      	b.n	8006468 <prvProcessReceivedCommands+0x15c>
                        break;
 8006466:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006468:	4b08      	ldr	r3, [pc, #32]	@ (800648c <prvProcessReceivedCommands+0x180>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f107 0108 	add.w	r1, r7, #8
 8006470:	2200      	movs	r2, #0
 8006472:	4618      	mov	r0, r3
 8006474:	f7fd ffae 	bl	80043d4 <xQueueReceive>
 8006478:	4603      	mov	r3, r0
 800647a:	2b00      	cmp	r3, #0
 800647c:	f47f af4a 	bne.w	8006314 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8006480:	bf00      	nop
 8006482:	bf00      	nop
 8006484:	3720      	adds	r7, #32
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	20000734 	.word	0x20000734

08006490 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006496:	e009      	b.n	80064ac <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006498:	4b0e      	ldr	r3, [pc, #56]	@ (80064d4 <prvSwitchTimerLists+0x44>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80064a2:	f04f 31ff 	mov.w	r1, #4294967295
 80064a6:	6838      	ldr	r0, [r7, #0]
 80064a8:	f7ff fe18 	bl	80060dc <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80064ac:	4b09      	ldr	r3, [pc, #36]	@ (80064d4 <prvSwitchTimerLists+0x44>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1f0      	bne.n	8006498 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80064b6:	4b07      	ldr	r3, [pc, #28]	@ (80064d4 <prvSwitchTimerLists+0x44>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80064bc:	4b06      	ldr	r3, [pc, #24]	@ (80064d8 <prvSwitchTimerLists+0x48>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a04      	ldr	r2, [pc, #16]	@ (80064d4 <prvSwitchTimerLists+0x44>)
 80064c2:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80064c4:	4a04      	ldr	r2, [pc, #16]	@ (80064d8 <prvSwitchTimerLists+0x48>)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6013      	str	r3, [r2, #0]
    }
 80064ca:	bf00      	nop
 80064cc:	3708      	adds	r7, #8
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	2000072c 	.word	0x2000072c
 80064d8:	20000730 	.word	0x20000730

080064dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80064dc:	b580      	push	{r7, lr}
 80064de:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80064e0:	f000 f964 	bl	80067ac <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80064e4:	4b12      	ldr	r3, [pc, #72]	@ (8006530 <prvCheckForValidListAndQueue+0x54>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d11d      	bne.n	8006528 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80064ec:	4811      	ldr	r0, [pc, #68]	@ (8006534 <prvCheckForValidListAndQueue+0x58>)
 80064ee:	f7fd fca9 	bl	8003e44 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80064f2:	4811      	ldr	r0, [pc, #68]	@ (8006538 <prvCheckForValidListAndQueue+0x5c>)
 80064f4:	f7fd fca6 	bl	8003e44 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80064f8:	4b10      	ldr	r3, [pc, #64]	@ (800653c <prvCheckForValidListAndQueue+0x60>)
 80064fa:	4a0e      	ldr	r2, [pc, #56]	@ (8006534 <prvCheckForValidListAndQueue+0x58>)
 80064fc:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80064fe:	4b10      	ldr	r3, [pc, #64]	@ (8006540 <prvCheckForValidListAndQueue+0x64>)
 8006500:	4a0d      	ldr	r2, [pc, #52]	@ (8006538 <prvCheckForValidListAndQueue+0x5c>)
 8006502:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8006504:	2200      	movs	r2, #0
 8006506:	210c      	movs	r1, #12
 8006508:	200a      	movs	r0, #10
 800650a:	f7fd fdbd 	bl	8004088 <xQueueGenericCreate>
 800650e:	4603      	mov	r3, r0
 8006510:	4a07      	ldr	r2, [pc, #28]	@ (8006530 <prvCheckForValidListAndQueue+0x54>)
 8006512:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8006514:	4b06      	ldr	r3, [pc, #24]	@ (8006530 <prvCheckForValidListAndQueue+0x54>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d005      	beq.n	8006528 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800651c:	4b04      	ldr	r3, [pc, #16]	@ (8006530 <prvCheckForValidListAndQueue+0x54>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4908      	ldr	r1, [pc, #32]	@ (8006544 <prvCheckForValidListAndQueue+0x68>)
 8006522:	4618      	mov	r0, r3
 8006524:	f7fe fa60 	bl	80049e8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006528:	f000 f972 	bl	8006810 <vPortExitCritical>
    }
 800652c:	bf00      	nop
 800652e:	bd80      	pop	{r7, pc}
 8006530:	20000734 	.word	0x20000734
 8006534:	20000704 	.word	0x20000704
 8006538:	20000718 	.word	0x20000718
 800653c:	2000072c 	.word	0x2000072c
 8006540:	20000730 	.word	0x20000730
 8006544:	080076b8 	.word	0x080076b8

08006548 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8006548:	b480      	push	{r7}
 800654a:	b085      	sub	sp, #20
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	3b04      	subs	r3, #4
 8006558:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006560:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	3b04      	subs	r3, #4
 8006566:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	f023 0201 	bic.w	r2, r3, #1
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	3b04      	subs	r3, #4
 8006576:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8006578:	4a0c      	ldr	r2, [pc, #48]	@ (80065ac <pxPortInitialiseStack+0x64>)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	3b14      	subs	r3, #20
 8006582:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	3b04      	subs	r3, #4
 800658e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f06f 0202 	mvn.w	r2, #2
 8006596:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	3b20      	subs	r3, #32
 800659c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800659e:	68fb      	ldr	r3, [r7, #12]
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3714      	adds	r7, #20
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr
 80065ac:	080065b1 	.word	0x080065b1

080065b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80065b0:	b480      	push	{r7}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80065b6:	2300      	movs	r3, #0
 80065b8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80065ba:	4b13      	ldr	r3, [pc, #76]	@ (8006608 <prvTaskExitError+0x58>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c2:	d00b      	beq.n	80065dc <prvTaskExitError+0x2c>
        __asm volatile
 80065c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c8:	f383 8811 	msr	BASEPRI, r3
 80065cc:	f3bf 8f6f 	isb	sy
 80065d0:	f3bf 8f4f 	dsb	sy
 80065d4:	60fb      	str	r3, [r7, #12]
    }
 80065d6:	bf00      	nop
 80065d8:	bf00      	nop
 80065da:	e7fd      	b.n	80065d8 <prvTaskExitError+0x28>
        __asm volatile
 80065dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065e0:	f383 8811 	msr	BASEPRI, r3
 80065e4:	f3bf 8f6f 	isb	sy
 80065e8:	f3bf 8f4f 	dsb	sy
 80065ec:	60bb      	str	r3, [r7, #8]
    }
 80065ee:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80065f0:	bf00      	nop
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d0fc      	beq.n	80065f2 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80065f8:	bf00      	nop
 80065fa:	bf00      	nop
 80065fc:	3714      	adds	r7, #20
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr
 8006606:	bf00      	nop
 8006608:	20000024 	.word	0x20000024
 800660c:	00000000 	.word	0x00000000

08006610 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8006610:	4b07      	ldr	r3, [pc, #28]	@ (8006630 <pxCurrentTCBConst2>)
 8006612:	6819      	ldr	r1, [r3, #0]
 8006614:	6808      	ldr	r0, [r1, #0]
 8006616:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800661a:	f380 8809 	msr	PSP, r0
 800661e:	f3bf 8f6f 	isb	sy
 8006622:	f04f 0000 	mov.w	r0, #0
 8006626:	f380 8811 	msr	BASEPRI, r0
 800662a:	4770      	bx	lr
 800662c:	f3af 8000 	nop.w

08006630 <pxCurrentTCBConst2>:
 8006630:	20000600 	.word	0x20000600
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8006634:	bf00      	nop
 8006636:	bf00      	nop

08006638 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8006638:	4808      	ldr	r0, [pc, #32]	@ (800665c <prvPortStartFirstTask+0x24>)
 800663a:	6800      	ldr	r0, [r0, #0]
 800663c:	6800      	ldr	r0, [r0, #0]
 800663e:	f380 8808 	msr	MSP, r0
 8006642:	f04f 0000 	mov.w	r0, #0
 8006646:	f380 8814 	msr	CONTROL, r0
 800664a:	b662      	cpsie	i
 800664c:	b661      	cpsie	f
 800664e:	f3bf 8f4f 	dsb	sy
 8006652:	f3bf 8f6f 	isb	sy
 8006656:	df00      	svc	0
 8006658:	bf00      	nop
 800665a:	0000      	.short	0x0000
 800665c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8006660:	bf00      	nop
 8006662:	bf00      	nop

08006664 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b086      	sub	sp, #24
 8006668:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800666a:	4b47      	ldr	r3, [pc, #284]	@ (8006788 <xPortStartScheduler+0x124>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a47      	ldr	r2, [pc, #284]	@ (800678c <xPortStartScheduler+0x128>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d10b      	bne.n	800668c <xPortStartScheduler+0x28>
        __asm volatile
 8006674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006678:	f383 8811 	msr	BASEPRI, r3
 800667c:	f3bf 8f6f 	isb	sy
 8006680:	f3bf 8f4f 	dsb	sy
 8006684:	613b      	str	r3, [r7, #16]
    }
 8006686:	bf00      	nop
 8006688:	bf00      	nop
 800668a:	e7fd      	b.n	8006688 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800668c:	4b3e      	ldr	r3, [pc, #248]	@ (8006788 <xPortStartScheduler+0x124>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a3f      	ldr	r2, [pc, #252]	@ (8006790 <xPortStartScheduler+0x12c>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d10b      	bne.n	80066ae <xPortStartScheduler+0x4a>
        __asm volatile
 8006696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800669a:	f383 8811 	msr	BASEPRI, r3
 800669e:	f3bf 8f6f 	isb	sy
 80066a2:	f3bf 8f4f 	dsb	sy
 80066a6:	60fb      	str	r3, [r7, #12]
    }
 80066a8:	bf00      	nop
 80066aa:	bf00      	nop
 80066ac:	e7fd      	b.n	80066aa <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80066ae:	4b39      	ldr	r3, [pc, #228]	@ (8006794 <xPortStartScheduler+0x130>)
 80066b0:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	22ff      	movs	r2, #255	@ 0xff
 80066be:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80066c8:	78fb      	ldrb	r3, [r7, #3]
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80066d0:	b2da      	uxtb	r2, r3
 80066d2:	4b31      	ldr	r3, [pc, #196]	@ (8006798 <xPortStartScheduler+0x134>)
 80066d4:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80066d6:	4b31      	ldr	r3, [pc, #196]	@ (800679c <xPortStartScheduler+0x138>)
 80066d8:	2207      	movs	r2, #7
 80066da:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066dc:	e009      	b.n	80066f2 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 80066de:	4b2f      	ldr	r3, [pc, #188]	@ (800679c <xPortStartScheduler+0x138>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	3b01      	subs	r3, #1
 80066e4:	4a2d      	ldr	r2, [pc, #180]	@ (800679c <xPortStartScheduler+0x138>)
 80066e6:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80066e8:	78fb      	ldrb	r3, [r7, #3]
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	005b      	lsls	r3, r3, #1
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066f2:	78fb      	ldrb	r3, [r7, #3]
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066fa:	2b80      	cmp	r3, #128	@ 0x80
 80066fc:	d0ef      	beq.n	80066de <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80066fe:	4b27      	ldr	r3, [pc, #156]	@ (800679c <xPortStartScheduler+0x138>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f1c3 0307 	rsb	r3, r3, #7
 8006706:	2b04      	cmp	r3, #4
 8006708:	d00b      	beq.n	8006722 <xPortStartScheduler+0xbe>
        __asm volatile
 800670a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800670e:	f383 8811 	msr	BASEPRI, r3
 8006712:	f3bf 8f6f 	isb	sy
 8006716:	f3bf 8f4f 	dsb	sy
 800671a:	60bb      	str	r3, [r7, #8]
    }
 800671c:	bf00      	nop
 800671e:	bf00      	nop
 8006720:	e7fd      	b.n	800671e <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006722:	4b1e      	ldr	r3, [pc, #120]	@ (800679c <xPortStartScheduler+0x138>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	021b      	lsls	r3, r3, #8
 8006728:	4a1c      	ldr	r2, [pc, #112]	@ (800679c <xPortStartScheduler+0x138>)
 800672a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800672c:	4b1b      	ldr	r3, [pc, #108]	@ (800679c <xPortStartScheduler+0x138>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006734:	4a19      	ldr	r2, [pc, #100]	@ (800679c <xPortStartScheduler+0x138>)
 8006736:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	b2da      	uxtb	r2, r3
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8006740:	4b17      	ldr	r3, [pc, #92]	@ (80067a0 <xPortStartScheduler+0x13c>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a16      	ldr	r2, [pc, #88]	@ (80067a0 <xPortStartScheduler+0x13c>)
 8006746:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800674a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800674c:	4b14      	ldr	r3, [pc, #80]	@ (80067a0 <xPortStartScheduler+0x13c>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a13      	ldr	r2, [pc, #76]	@ (80067a0 <xPortStartScheduler+0x13c>)
 8006752:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006756:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8006758:	f000 f8e0 	bl	800691c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800675c:	4b11      	ldr	r3, [pc, #68]	@ (80067a4 <xPortStartScheduler+0x140>)
 800675e:	2200      	movs	r2, #0
 8006760:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8006762:	f000 f8ff 	bl	8006964 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006766:	4b10      	ldr	r3, [pc, #64]	@ (80067a8 <xPortStartScheduler+0x144>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a0f      	ldr	r2, [pc, #60]	@ (80067a8 <xPortStartScheduler+0x144>)
 800676c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006770:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8006772:	f7ff ff61 	bl	8006638 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8006776:	f7fe fecf 	bl	8005518 <vTaskSwitchContext>
    prvTaskExitError();
 800677a:	f7ff ff19 	bl	80065b0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3718      	adds	r7, #24
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}
 8006788:	e000ed00 	.word	0xe000ed00
 800678c:	410fc271 	.word	0x410fc271
 8006790:	410fc270 	.word	0x410fc270
 8006794:	e000e400 	.word	0xe000e400
 8006798:	20000740 	.word	0x20000740
 800679c:	20000744 	.word	0x20000744
 80067a0:	e000ed20 	.word	0xe000ed20
 80067a4:	20000024 	.word	0x20000024
 80067a8:	e000ef34 	.word	0xe000ef34

080067ac <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
        __asm volatile
 80067b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067b6:	f383 8811 	msr	BASEPRI, r3
 80067ba:	f3bf 8f6f 	isb	sy
 80067be:	f3bf 8f4f 	dsb	sy
 80067c2:	607b      	str	r3, [r7, #4]
    }
 80067c4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80067c6:	4b10      	ldr	r3, [pc, #64]	@ (8006808 <vPortEnterCritical+0x5c>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	3301      	adds	r3, #1
 80067cc:	4a0e      	ldr	r2, [pc, #56]	@ (8006808 <vPortEnterCritical+0x5c>)
 80067ce:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80067d0:	4b0d      	ldr	r3, [pc, #52]	@ (8006808 <vPortEnterCritical+0x5c>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d110      	bne.n	80067fa <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80067d8:	4b0c      	ldr	r3, [pc, #48]	@ (800680c <vPortEnterCritical+0x60>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d00b      	beq.n	80067fa <vPortEnterCritical+0x4e>
        __asm volatile
 80067e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067e6:	f383 8811 	msr	BASEPRI, r3
 80067ea:	f3bf 8f6f 	isb	sy
 80067ee:	f3bf 8f4f 	dsb	sy
 80067f2:	603b      	str	r3, [r7, #0]
    }
 80067f4:	bf00      	nop
 80067f6:	bf00      	nop
 80067f8:	e7fd      	b.n	80067f6 <vPortEnterCritical+0x4a>
    }
}
 80067fa:	bf00      	nop
 80067fc:	370c      	adds	r7, #12
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	20000024 	.word	0x20000024
 800680c:	e000ed04 	.word	0xe000ed04

08006810 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8006816:	4b12      	ldr	r3, [pc, #72]	@ (8006860 <vPortExitCritical+0x50>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d10b      	bne.n	8006836 <vPortExitCritical+0x26>
        __asm volatile
 800681e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006822:	f383 8811 	msr	BASEPRI, r3
 8006826:	f3bf 8f6f 	isb	sy
 800682a:	f3bf 8f4f 	dsb	sy
 800682e:	607b      	str	r3, [r7, #4]
    }
 8006830:	bf00      	nop
 8006832:	bf00      	nop
 8006834:	e7fd      	b.n	8006832 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8006836:	4b0a      	ldr	r3, [pc, #40]	@ (8006860 <vPortExitCritical+0x50>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	3b01      	subs	r3, #1
 800683c:	4a08      	ldr	r2, [pc, #32]	@ (8006860 <vPortExitCritical+0x50>)
 800683e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8006840:	4b07      	ldr	r3, [pc, #28]	@ (8006860 <vPortExitCritical+0x50>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d105      	bne.n	8006854 <vPortExitCritical+0x44>
 8006848:	2300      	movs	r3, #0
 800684a:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8006852:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8006854:	bf00      	nop
 8006856:	370c      	adds	r7, #12
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr
 8006860:	20000024 	.word	0x20000024
	...

08006870 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006870:	f3ef 8009 	mrs	r0, PSP
 8006874:	f3bf 8f6f 	isb	sy
 8006878:	4b15      	ldr	r3, [pc, #84]	@ (80068d0 <pxCurrentTCBConst>)
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	f01e 0f10 	tst.w	lr, #16
 8006880:	bf08      	it	eq
 8006882:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006886:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800688a:	6010      	str	r0, [r2, #0]
 800688c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006890:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006894:	f380 8811 	msr	BASEPRI, r0
 8006898:	f3bf 8f4f 	dsb	sy
 800689c:	f3bf 8f6f 	isb	sy
 80068a0:	f7fe fe3a 	bl	8005518 <vTaskSwitchContext>
 80068a4:	f04f 0000 	mov.w	r0, #0
 80068a8:	f380 8811 	msr	BASEPRI, r0
 80068ac:	bc09      	pop	{r0, r3}
 80068ae:	6819      	ldr	r1, [r3, #0]
 80068b0:	6808      	ldr	r0, [r1, #0]
 80068b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068b6:	f01e 0f10 	tst.w	lr, #16
 80068ba:	bf08      	it	eq
 80068bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80068c0:	f380 8809 	msr	PSP, r0
 80068c4:	f3bf 8f6f 	isb	sy
 80068c8:	4770      	bx	lr
 80068ca:	bf00      	nop
 80068cc:	f3af 8000 	nop.w

080068d0 <pxCurrentTCBConst>:
 80068d0:	20000600 	.word	0x20000600
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80068d4:	bf00      	nop
 80068d6:	bf00      	nop

080068d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b082      	sub	sp, #8
 80068dc:	af00      	add	r7, sp, #0
        __asm volatile
 80068de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068e2:	f383 8811 	msr	BASEPRI, r3
 80068e6:	f3bf 8f6f 	isb	sy
 80068ea:	f3bf 8f4f 	dsb	sy
 80068ee:	607b      	str	r3, [r7, #4]
    }
 80068f0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80068f2:	f7fe fcf9 	bl	80052e8 <xTaskIncrementTick>
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d003      	beq.n	8006904 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80068fc:	4b06      	ldr	r3, [pc, #24]	@ (8006918 <SysTick_Handler+0x40>)
 80068fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006902:	601a      	str	r2, [r3, #0]
 8006904:	2300      	movs	r3, #0
 8006906:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	f383 8811 	msr	BASEPRI, r3
    }
 800690e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8006910:	bf00      	nop
 8006912:	3708      	adds	r7, #8
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}
 8006918:	e000ed04 	.word	0xe000ed04

0800691c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800691c:	b480      	push	{r7}
 800691e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006920:	4b0b      	ldr	r3, [pc, #44]	@ (8006950 <vPortSetupTimerInterrupt+0x34>)
 8006922:	2200      	movs	r2, #0
 8006924:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006926:	4b0b      	ldr	r3, [pc, #44]	@ (8006954 <vPortSetupTimerInterrupt+0x38>)
 8006928:	2200      	movs	r2, #0
 800692a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800692c:	4b0a      	ldr	r3, [pc, #40]	@ (8006958 <vPortSetupTimerInterrupt+0x3c>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a0a      	ldr	r2, [pc, #40]	@ (800695c <vPortSetupTimerInterrupt+0x40>)
 8006932:	fba2 2303 	umull	r2, r3, r2, r3
 8006936:	099b      	lsrs	r3, r3, #6
 8006938:	4a09      	ldr	r2, [pc, #36]	@ (8006960 <vPortSetupTimerInterrupt+0x44>)
 800693a:	3b01      	subs	r3, #1
 800693c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800693e:	4b04      	ldr	r3, [pc, #16]	@ (8006950 <vPortSetupTimerInterrupt+0x34>)
 8006940:	2207      	movs	r2, #7
 8006942:	601a      	str	r2, [r3, #0]
}
 8006944:	bf00      	nop
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop
 8006950:	e000e010 	.word	0xe000e010
 8006954:	e000e018 	.word	0xe000e018
 8006958:	20000018 	.word	0x20000018
 800695c:	10624dd3 	.word	0x10624dd3
 8006960:	e000e014 	.word	0xe000e014

08006964 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8006964:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006974 <vPortEnableVFP+0x10>
 8006968:	6801      	ldr	r1, [r0, #0]
 800696a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800696e:	6001      	str	r1, [r0, #0]
 8006970:	4770      	bx	lr
 8006972:	0000      	.short	0x0000
 8006974:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8006978:	bf00      	nop
 800697a:	bf00      	nop

0800697c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b08a      	sub	sp, #40	@ 0x28
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8006984:	2300      	movs	r3, #0
 8006986:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8006988:	f7fe fb94 	bl	80050b4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800698c:	4b54      	ldr	r3, [pc, #336]	@ (8006ae0 <pvPortMalloc+0x164>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d101      	bne.n	8006998 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8006994:	f000 f90c 	bl	8006bb0 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d012      	beq.n	80069c4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800699e:	2208      	movs	r2, #8
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f003 0307 	and.w	r3, r3, #7
 80069a6:	1ad3      	subs	r3, r2, r3
 80069a8:	3308      	adds	r3, #8
 80069aa:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	43db      	mvns	r3, r3
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d804      	bhi.n	80069c0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	69bb      	ldr	r3, [r7, #24]
 80069ba:	4413      	add	r3, r2
 80069bc:	607b      	str	r3, [r7, #4]
 80069be:	e001      	b.n	80069c4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80069c0:	2300      	movs	r3, #0
 80069c2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	db71      	blt.n	8006aae <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d06e      	beq.n	8006aae <pvPortMalloc+0x132>
 80069d0:	4b44      	ldr	r3, [pc, #272]	@ (8006ae4 <pvPortMalloc+0x168>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d869      	bhi.n	8006aae <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80069da:	4b43      	ldr	r3, [pc, #268]	@ (8006ae8 <pvPortMalloc+0x16c>)
 80069dc:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80069de:	4b42      	ldr	r3, [pc, #264]	@ (8006ae8 <pvPortMalloc+0x16c>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80069e4:	e004      	b.n	80069f0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80069e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80069ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80069f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d903      	bls.n	8006a02 <pvPortMalloc+0x86>
 80069fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1f1      	bne.n	80069e6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8006a02:	4b37      	ldr	r3, [pc, #220]	@ (8006ae0 <pvPortMalloc+0x164>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d050      	beq.n	8006aae <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006a0c:	6a3b      	ldr	r3, [r7, #32]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	2208      	movs	r2, #8
 8006a12:	4413      	add	r3, r2
 8006a14:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	6a3b      	ldr	r3, [r7, #32]
 8006a1c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a20:	685a      	ldr	r2, [r3, #4]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	1ad2      	subs	r2, r2, r3
 8006a26:	2308      	movs	r3, #8
 8006a28:	005b      	lsls	r3, r3, #1
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d920      	bls.n	8006a70 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006a2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	4413      	add	r3, r2
 8006a34:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	f003 0307 	and.w	r3, r3, #7
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00b      	beq.n	8006a58 <pvPortMalloc+0xdc>
        __asm volatile
 8006a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a44:	f383 8811 	msr	BASEPRI, r3
 8006a48:	f3bf 8f6f 	isb	sy
 8006a4c:	f3bf 8f4f 	dsb	sy
 8006a50:	613b      	str	r3, [r7, #16]
    }
 8006a52:	bf00      	nop
 8006a54:	bf00      	nop
 8006a56:	e7fd      	b.n	8006a54 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a5a:	685a      	ldr	r2, [r3, #4]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	1ad2      	subs	r2, r2, r3
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8006a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006a6a:	6978      	ldr	r0, [r7, #20]
 8006a6c:	f000 f8fc 	bl	8006c68 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006a70:	4b1c      	ldr	r3, [pc, #112]	@ (8006ae4 <pvPortMalloc+0x168>)
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	4a1a      	ldr	r2, [pc, #104]	@ (8006ae4 <pvPortMalloc+0x168>)
 8006a7c:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006a7e:	4b19      	ldr	r3, [pc, #100]	@ (8006ae4 <pvPortMalloc+0x168>)
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	4b1a      	ldr	r3, [pc, #104]	@ (8006aec <pvPortMalloc+0x170>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d203      	bcs.n	8006a92 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006a8a:	4b16      	ldr	r3, [pc, #88]	@ (8006ae4 <pvPortMalloc+0x168>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a17      	ldr	r2, [pc, #92]	@ (8006aec <pvPortMalloc+0x170>)
 8006a90:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8006a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a9c:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8006a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8006aa4:	4b12      	ldr	r3, [pc, #72]	@ (8006af0 <pvPortMalloc+0x174>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	4a11      	ldr	r2, [pc, #68]	@ (8006af0 <pvPortMalloc+0x174>)
 8006aac:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8006aae:	f7fe fb0f 	bl	80050d0 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	f003 0307 	and.w	r3, r3, #7
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d00b      	beq.n	8006ad4 <pvPortMalloc+0x158>
        __asm volatile
 8006abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ac0:	f383 8811 	msr	BASEPRI, r3
 8006ac4:	f3bf 8f6f 	isb	sy
 8006ac8:	f3bf 8f4f 	dsb	sy
 8006acc:	60fb      	str	r3, [r7, #12]
    }
 8006ace:	bf00      	nop
 8006ad0:	bf00      	nop
 8006ad2:	e7fd      	b.n	8006ad0 <pvPortMalloc+0x154>
    return pvReturn;
 8006ad4:	69fb      	ldr	r3, [r7, #28]
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3728      	adds	r7, #40	@ 0x28
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop
 8006ae0:	2000f750 	.word	0x2000f750
 8006ae4:	2000f754 	.word	0x2000f754
 8006ae8:	2000f748 	.word	0x2000f748
 8006aec:	2000f758 	.word	0x2000f758
 8006af0:	2000f75c 	.word	0x2000f75c

08006af4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b086      	sub	sp, #24
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d04b      	beq.n	8006b9e <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8006b06:	2308      	movs	r3, #8
 8006b08:	425b      	negs	r3, r3
 8006b0a:	697a      	ldr	r2, [r7, #20]
 8006b0c:	4413      	add	r3, r2
 8006b0e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	db0b      	blt.n	8006b34 <vPortFree+0x40>
        __asm volatile
 8006b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b20:	f383 8811 	msr	BASEPRI, r3
 8006b24:	f3bf 8f6f 	isb	sy
 8006b28:	f3bf 8f4f 	dsb	sy
 8006b2c:	60fb      	str	r3, [r7, #12]
    }
 8006b2e:	bf00      	nop
 8006b30:	bf00      	nop
 8006b32:	e7fd      	b.n	8006b30 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d00b      	beq.n	8006b54 <vPortFree+0x60>
        __asm volatile
 8006b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b40:	f383 8811 	msr	BASEPRI, r3
 8006b44:	f3bf 8f6f 	isb	sy
 8006b48:	f3bf 8f4f 	dsb	sy
 8006b4c:	60bb      	str	r3, [r7, #8]
    }
 8006b4e:	bf00      	nop
 8006b50:	bf00      	nop
 8006b52:	e7fd      	b.n	8006b50 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	0fdb      	lsrs	r3, r3, #31
 8006b5a:	f003 0301 	and.w	r3, r3, #1
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d01c      	beq.n	8006b9e <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d118      	bne.n	8006b9e <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8006b78:	f7fe fa9c 	bl	80050b4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	685a      	ldr	r2, [r3, #4]
 8006b80:	4b09      	ldr	r3, [pc, #36]	@ (8006ba8 <vPortFree+0xb4>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4413      	add	r3, r2
 8006b86:	4a08      	ldr	r2, [pc, #32]	@ (8006ba8 <vPortFree+0xb4>)
 8006b88:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006b8a:	6938      	ldr	r0, [r7, #16]
 8006b8c:	f000 f86c 	bl	8006c68 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8006b90:	4b06      	ldr	r3, [pc, #24]	@ (8006bac <vPortFree+0xb8>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	3301      	adds	r3, #1
 8006b96:	4a05      	ldr	r2, [pc, #20]	@ (8006bac <vPortFree+0xb8>)
 8006b98:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8006b9a:	f7fe fa99 	bl	80050d0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8006b9e:	bf00      	nop
 8006ba0:	3718      	adds	r7, #24
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	2000f754 	.word	0x2000f754
 8006bac:	2000f760 	.word	0x2000f760

08006bb0 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b085      	sub	sp, #20
 8006bb4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006bb6:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8006bba:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8006bbc:	4b25      	ldr	r3, [pc, #148]	@ (8006c54 <prvHeapInit+0xa4>)
 8006bbe:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f003 0307 	and.w	r3, r3, #7
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d00c      	beq.n	8006be4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	3307      	adds	r3, #7
 8006bce:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f023 0307 	bic.w	r3, r3, #7
 8006bd6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8006bd8:	68ba      	ldr	r2, [r7, #8]
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	1ad3      	subs	r3, r2, r3
 8006bde:	4a1d      	ldr	r2, [pc, #116]	@ (8006c54 <prvHeapInit+0xa4>)
 8006be0:	4413      	add	r3, r2
 8006be2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006be8:	4a1b      	ldr	r2, [pc, #108]	@ (8006c58 <prvHeapInit+0xa8>)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8006bee:	4b1a      	ldr	r3, [pc, #104]	@ (8006c58 <prvHeapInit+0xa8>)
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	68ba      	ldr	r2, [r7, #8]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8006bfc:	2208      	movs	r2, #8
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	1a9b      	subs	r3, r3, r2
 8006c02:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f023 0307 	bic.w	r3, r3, #7
 8006c0a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	4a13      	ldr	r2, [pc, #76]	@ (8006c5c <prvHeapInit+0xac>)
 8006c10:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8006c12:	4b12      	ldr	r3, [pc, #72]	@ (8006c5c <prvHeapInit+0xac>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2200      	movs	r2, #0
 8006c18:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8006c1a:	4b10      	ldr	r3, [pc, #64]	@ (8006c5c <prvHeapInit+0xac>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	68fa      	ldr	r2, [r7, #12]
 8006c2a:	1ad2      	subs	r2, r2, r3
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006c30:	4b0a      	ldr	r3, [pc, #40]	@ (8006c5c <prvHeapInit+0xac>)
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	4a08      	ldr	r2, [pc, #32]	@ (8006c60 <prvHeapInit+0xb0>)
 8006c3e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	4a07      	ldr	r2, [pc, #28]	@ (8006c64 <prvHeapInit+0xb4>)
 8006c46:	6013      	str	r3, [r2, #0]
}
 8006c48:	bf00      	nop
 8006c4a:	3714      	adds	r7, #20
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr
 8006c54:	20000748 	.word	0x20000748
 8006c58:	2000f748 	.word	0x2000f748
 8006c5c:	2000f750 	.word	0x2000f750
 8006c60:	2000f758 	.word	0x2000f758
 8006c64:	2000f754 	.word	0x2000f754

08006c68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b085      	sub	sp, #20
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006c70:	4b28      	ldr	r3, [pc, #160]	@ (8006d14 <prvInsertBlockIntoFreeList+0xac>)
 8006c72:	60fb      	str	r3, [r7, #12]
 8006c74:	e002      	b.n	8006c7c <prvInsertBlockIntoFreeList+0x14>
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	60fb      	str	r3, [r7, #12]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d8f7      	bhi.n	8006c76 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	68ba      	ldr	r2, [r7, #8]
 8006c90:	4413      	add	r3, r2
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d108      	bne.n	8006caa <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	685a      	ldr	r2, [r3, #4]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	441a      	add	r2, r3
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	68ba      	ldr	r2, [r7, #8]
 8006cb4:	441a      	add	r2, r3
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d118      	bne.n	8006cf0 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	4b15      	ldr	r3, [pc, #84]	@ (8006d18 <prvInsertBlockIntoFreeList+0xb0>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d00d      	beq.n	8006ce6 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	685a      	ldr	r2, [r3, #4]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	441a      	add	r2, r3
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	601a      	str	r2, [r3, #0]
 8006ce4:	e008      	b.n	8006cf8 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006ce6:	4b0c      	ldr	r3, [pc, #48]	@ (8006d18 <prvInsertBlockIntoFreeList+0xb0>)
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	601a      	str	r2, [r3, #0]
 8006cee:	e003      	b.n	8006cf8 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d002      	beq.n	8006d06 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006d06:	bf00      	nop
 8006d08:	3714      	adds	r7, #20
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop
 8006d14:	2000f748 	.word	0x2000f748
 8006d18:	2000f750 	.word	0x2000f750

08006d1c <siprintf>:
 8006d1c:	b40e      	push	{r1, r2, r3}
 8006d1e:	b500      	push	{lr}
 8006d20:	b09c      	sub	sp, #112	@ 0x70
 8006d22:	ab1d      	add	r3, sp, #116	@ 0x74
 8006d24:	9002      	str	r0, [sp, #8]
 8006d26:	9006      	str	r0, [sp, #24]
 8006d28:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006d2c:	4809      	ldr	r0, [pc, #36]	@ (8006d54 <siprintf+0x38>)
 8006d2e:	9107      	str	r1, [sp, #28]
 8006d30:	9104      	str	r1, [sp, #16]
 8006d32:	4909      	ldr	r1, [pc, #36]	@ (8006d58 <siprintf+0x3c>)
 8006d34:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d38:	9105      	str	r1, [sp, #20]
 8006d3a:	6800      	ldr	r0, [r0, #0]
 8006d3c:	9301      	str	r3, [sp, #4]
 8006d3e:	a902      	add	r1, sp, #8
 8006d40:	f000 f99c 	bl	800707c <_svfiprintf_r>
 8006d44:	9b02      	ldr	r3, [sp, #8]
 8006d46:	2200      	movs	r2, #0
 8006d48:	701a      	strb	r2, [r3, #0]
 8006d4a:	b01c      	add	sp, #112	@ 0x70
 8006d4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d50:	b003      	add	sp, #12
 8006d52:	4770      	bx	lr
 8006d54:	20000028 	.word	0x20000028
 8006d58:	ffff0208 	.word	0xffff0208

08006d5c <memset>:
 8006d5c:	4402      	add	r2, r0
 8006d5e:	4603      	mov	r3, r0
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d100      	bne.n	8006d66 <memset+0xa>
 8006d64:	4770      	bx	lr
 8006d66:	f803 1b01 	strb.w	r1, [r3], #1
 8006d6a:	e7f9      	b.n	8006d60 <memset+0x4>

08006d6c <__libc_init_array>:
 8006d6c:	b570      	push	{r4, r5, r6, lr}
 8006d6e:	4d0d      	ldr	r5, [pc, #52]	@ (8006da4 <__libc_init_array+0x38>)
 8006d70:	4c0d      	ldr	r4, [pc, #52]	@ (8006da8 <__libc_init_array+0x3c>)
 8006d72:	1b64      	subs	r4, r4, r5
 8006d74:	10a4      	asrs	r4, r4, #2
 8006d76:	2600      	movs	r6, #0
 8006d78:	42a6      	cmp	r6, r4
 8006d7a:	d109      	bne.n	8006d90 <__libc_init_array+0x24>
 8006d7c:	4d0b      	ldr	r5, [pc, #44]	@ (8006dac <__libc_init_array+0x40>)
 8006d7e:	4c0c      	ldr	r4, [pc, #48]	@ (8006db0 <__libc_init_array+0x44>)
 8006d80:	f000 fc74 	bl	800766c <_init>
 8006d84:	1b64      	subs	r4, r4, r5
 8006d86:	10a4      	asrs	r4, r4, #2
 8006d88:	2600      	movs	r6, #0
 8006d8a:	42a6      	cmp	r6, r4
 8006d8c:	d105      	bne.n	8006d9a <__libc_init_array+0x2e>
 8006d8e:	bd70      	pop	{r4, r5, r6, pc}
 8006d90:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d94:	4798      	blx	r3
 8006d96:	3601      	adds	r6, #1
 8006d98:	e7ee      	b.n	8006d78 <__libc_init_array+0xc>
 8006d9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d9e:	4798      	blx	r3
 8006da0:	3601      	adds	r6, #1
 8006da2:	e7f2      	b.n	8006d8a <__libc_init_array+0x1e>
 8006da4:	080097bc 	.word	0x080097bc
 8006da8:	080097bc 	.word	0x080097bc
 8006dac:	080097bc 	.word	0x080097bc
 8006db0:	080097c0 	.word	0x080097c0

08006db4 <__retarget_lock_acquire_recursive>:
 8006db4:	4770      	bx	lr

08006db6 <__retarget_lock_release_recursive>:
 8006db6:	4770      	bx	lr

08006db8 <memcpy>:
 8006db8:	440a      	add	r2, r1
 8006dba:	4291      	cmp	r1, r2
 8006dbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006dc0:	d100      	bne.n	8006dc4 <memcpy+0xc>
 8006dc2:	4770      	bx	lr
 8006dc4:	b510      	push	{r4, lr}
 8006dc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006dca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006dce:	4291      	cmp	r1, r2
 8006dd0:	d1f9      	bne.n	8006dc6 <memcpy+0xe>
 8006dd2:	bd10      	pop	{r4, pc}

08006dd4 <_free_r>:
 8006dd4:	b538      	push	{r3, r4, r5, lr}
 8006dd6:	4605      	mov	r5, r0
 8006dd8:	2900      	cmp	r1, #0
 8006dda:	d041      	beq.n	8006e60 <_free_r+0x8c>
 8006ddc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006de0:	1f0c      	subs	r4, r1, #4
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	bfb8      	it	lt
 8006de6:	18e4      	addlt	r4, r4, r3
 8006de8:	f000 f8e0 	bl	8006fac <__malloc_lock>
 8006dec:	4a1d      	ldr	r2, [pc, #116]	@ (8006e64 <_free_r+0x90>)
 8006dee:	6813      	ldr	r3, [r2, #0]
 8006df0:	b933      	cbnz	r3, 8006e00 <_free_r+0x2c>
 8006df2:	6063      	str	r3, [r4, #4]
 8006df4:	6014      	str	r4, [r2, #0]
 8006df6:	4628      	mov	r0, r5
 8006df8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006dfc:	f000 b8dc 	b.w	8006fb8 <__malloc_unlock>
 8006e00:	42a3      	cmp	r3, r4
 8006e02:	d908      	bls.n	8006e16 <_free_r+0x42>
 8006e04:	6820      	ldr	r0, [r4, #0]
 8006e06:	1821      	adds	r1, r4, r0
 8006e08:	428b      	cmp	r3, r1
 8006e0a:	bf01      	itttt	eq
 8006e0c:	6819      	ldreq	r1, [r3, #0]
 8006e0e:	685b      	ldreq	r3, [r3, #4]
 8006e10:	1809      	addeq	r1, r1, r0
 8006e12:	6021      	streq	r1, [r4, #0]
 8006e14:	e7ed      	b.n	8006df2 <_free_r+0x1e>
 8006e16:	461a      	mov	r2, r3
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	b10b      	cbz	r3, 8006e20 <_free_r+0x4c>
 8006e1c:	42a3      	cmp	r3, r4
 8006e1e:	d9fa      	bls.n	8006e16 <_free_r+0x42>
 8006e20:	6811      	ldr	r1, [r2, #0]
 8006e22:	1850      	adds	r0, r2, r1
 8006e24:	42a0      	cmp	r0, r4
 8006e26:	d10b      	bne.n	8006e40 <_free_r+0x6c>
 8006e28:	6820      	ldr	r0, [r4, #0]
 8006e2a:	4401      	add	r1, r0
 8006e2c:	1850      	adds	r0, r2, r1
 8006e2e:	4283      	cmp	r3, r0
 8006e30:	6011      	str	r1, [r2, #0]
 8006e32:	d1e0      	bne.n	8006df6 <_free_r+0x22>
 8006e34:	6818      	ldr	r0, [r3, #0]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	6053      	str	r3, [r2, #4]
 8006e3a:	4408      	add	r0, r1
 8006e3c:	6010      	str	r0, [r2, #0]
 8006e3e:	e7da      	b.n	8006df6 <_free_r+0x22>
 8006e40:	d902      	bls.n	8006e48 <_free_r+0x74>
 8006e42:	230c      	movs	r3, #12
 8006e44:	602b      	str	r3, [r5, #0]
 8006e46:	e7d6      	b.n	8006df6 <_free_r+0x22>
 8006e48:	6820      	ldr	r0, [r4, #0]
 8006e4a:	1821      	adds	r1, r4, r0
 8006e4c:	428b      	cmp	r3, r1
 8006e4e:	bf04      	itt	eq
 8006e50:	6819      	ldreq	r1, [r3, #0]
 8006e52:	685b      	ldreq	r3, [r3, #4]
 8006e54:	6063      	str	r3, [r4, #4]
 8006e56:	bf04      	itt	eq
 8006e58:	1809      	addeq	r1, r1, r0
 8006e5a:	6021      	streq	r1, [r4, #0]
 8006e5c:	6054      	str	r4, [r2, #4]
 8006e5e:	e7ca      	b.n	8006df6 <_free_r+0x22>
 8006e60:	bd38      	pop	{r3, r4, r5, pc}
 8006e62:	bf00      	nop
 8006e64:	2000f8a8 	.word	0x2000f8a8

08006e68 <sbrk_aligned>:
 8006e68:	b570      	push	{r4, r5, r6, lr}
 8006e6a:	4e0f      	ldr	r6, [pc, #60]	@ (8006ea8 <sbrk_aligned+0x40>)
 8006e6c:	460c      	mov	r4, r1
 8006e6e:	6831      	ldr	r1, [r6, #0]
 8006e70:	4605      	mov	r5, r0
 8006e72:	b911      	cbnz	r1, 8006e7a <sbrk_aligned+0x12>
 8006e74:	f000 fba6 	bl	80075c4 <_sbrk_r>
 8006e78:	6030      	str	r0, [r6, #0]
 8006e7a:	4621      	mov	r1, r4
 8006e7c:	4628      	mov	r0, r5
 8006e7e:	f000 fba1 	bl	80075c4 <_sbrk_r>
 8006e82:	1c43      	adds	r3, r0, #1
 8006e84:	d103      	bne.n	8006e8e <sbrk_aligned+0x26>
 8006e86:	f04f 34ff 	mov.w	r4, #4294967295
 8006e8a:	4620      	mov	r0, r4
 8006e8c:	bd70      	pop	{r4, r5, r6, pc}
 8006e8e:	1cc4      	adds	r4, r0, #3
 8006e90:	f024 0403 	bic.w	r4, r4, #3
 8006e94:	42a0      	cmp	r0, r4
 8006e96:	d0f8      	beq.n	8006e8a <sbrk_aligned+0x22>
 8006e98:	1a21      	subs	r1, r4, r0
 8006e9a:	4628      	mov	r0, r5
 8006e9c:	f000 fb92 	bl	80075c4 <_sbrk_r>
 8006ea0:	3001      	adds	r0, #1
 8006ea2:	d1f2      	bne.n	8006e8a <sbrk_aligned+0x22>
 8006ea4:	e7ef      	b.n	8006e86 <sbrk_aligned+0x1e>
 8006ea6:	bf00      	nop
 8006ea8:	2000f8a4 	.word	0x2000f8a4

08006eac <_malloc_r>:
 8006eac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006eb0:	1ccd      	adds	r5, r1, #3
 8006eb2:	f025 0503 	bic.w	r5, r5, #3
 8006eb6:	3508      	adds	r5, #8
 8006eb8:	2d0c      	cmp	r5, #12
 8006eba:	bf38      	it	cc
 8006ebc:	250c      	movcc	r5, #12
 8006ebe:	2d00      	cmp	r5, #0
 8006ec0:	4606      	mov	r6, r0
 8006ec2:	db01      	blt.n	8006ec8 <_malloc_r+0x1c>
 8006ec4:	42a9      	cmp	r1, r5
 8006ec6:	d904      	bls.n	8006ed2 <_malloc_r+0x26>
 8006ec8:	230c      	movs	r3, #12
 8006eca:	6033      	str	r3, [r6, #0]
 8006ecc:	2000      	movs	r0, #0
 8006ece:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ed2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006fa8 <_malloc_r+0xfc>
 8006ed6:	f000 f869 	bl	8006fac <__malloc_lock>
 8006eda:	f8d8 3000 	ldr.w	r3, [r8]
 8006ede:	461c      	mov	r4, r3
 8006ee0:	bb44      	cbnz	r4, 8006f34 <_malloc_r+0x88>
 8006ee2:	4629      	mov	r1, r5
 8006ee4:	4630      	mov	r0, r6
 8006ee6:	f7ff ffbf 	bl	8006e68 <sbrk_aligned>
 8006eea:	1c43      	adds	r3, r0, #1
 8006eec:	4604      	mov	r4, r0
 8006eee:	d158      	bne.n	8006fa2 <_malloc_r+0xf6>
 8006ef0:	f8d8 4000 	ldr.w	r4, [r8]
 8006ef4:	4627      	mov	r7, r4
 8006ef6:	2f00      	cmp	r7, #0
 8006ef8:	d143      	bne.n	8006f82 <_malloc_r+0xd6>
 8006efa:	2c00      	cmp	r4, #0
 8006efc:	d04b      	beq.n	8006f96 <_malloc_r+0xea>
 8006efe:	6823      	ldr	r3, [r4, #0]
 8006f00:	4639      	mov	r1, r7
 8006f02:	4630      	mov	r0, r6
 8006f04:	eb04 0903 	add.w	r9, r4, r3
 8006f08:	f000 fb5c 	bl	80075c4 <_sbrk_r>
 8006f0c:	4581      	cmp	r9, r0
 8006f0e:	d142      	bne.n	8006f96 <_malloc_r+0xea>
 8006f10:	6821      	ldr	r1, [r4, #0]
 8006f12:	1a6d      	subs	r5, r5, r1
 8006f14:	4629      	mov	r1, r5
 8006f16:	4630      	mov	r0, r6
 8006f18:	f7ff ffa6 	bl	8006e68 <sbrk_aligned>
 8006f1c:	3001      	adds	r0, #1
 8006f1e:	d03a      	beq.n	8006f96 <_malloc_r+0xea>
 8006f20:	6823      	ldr	r3, [r4, #0]
 8006f22:	442b      	add	r3, r5
 8006f24:	6023      	str	r3, [r4, #0]
 8006f26:	f8d8 3000 	ldr.w	r3, [r8]
 8006f2a:	685a      	ldr	r2, [r3, #4]
 8006f2c:	bb62      	cbnz	r2, 8006f88 <_malloc_r+0xdc>
 8006f2e:	f8c8 7000 	str.w	r7, [r8]
 8006f32:	e00f      	b.n	8006f54 <_malloc_r+0xa8>
 8006f34:	6822      	ldr	r2, [r4, #0]
 8006f36:	1b52      	subs	r2, r2, r5
 8006f38:	d420      	bmi.n	8006f7c <_malloc_r+0xd0>
 8006f3a:	2a0b      	cmp	r2, #11
 8006f3c:	d917      	bls.n	8006f6e <_malloc_r+0xc2>
 8006f3e:	1961      	adds	r1, r4, r5
 8006f40:	42a3      	cmp	r3, r4
 8006f42:	6025      	str	r5, [r4, #0]
 8006f44:	bf18      	it	ne
 8006f46:	6059      	strne	r1, [r3, #4]
 8006f48:	6863      	ldr	r3, [r4, #4]
 8006f4a:	bf08      	it	eq
 8006f4c:	f8c8 1000 	streq.w	r1, [r8]
 8006f50:	5162      	str	r2, [r4, r5]
 8006f52:	604b      	str	r3, [r1, #4]
 8006f54:	4630      	mov	r0, r6
 8006f56:	f000 f82f 	bl	8006fb8 <__malloc_unlock>
 8006f5a:	f104 000b 	add.w	r0, r4, #11
 8006f5e:	1d23      	adds	r3, r4, #4
 8006f60:	f020 0007 	bic.w	r0, r0, #7
 8006f64:	1ac2      	subs	r2, r0, r3
 8006f66:	bf1c      	itt	ne
 8006f68:	1a1b      	subne	r3, r3, r0
 8006f6a:	50a3      	strne	r3, [r4, r2]
 8006f6c:	e7af      	b.n	8006ece <_malloc_r+0x22>
 8006f6e:	6862      	ldr	r2, [r4, #4]
 8006f70:	42a3      	cmp	r3, r4
 8006f72:	bf0c      	ite	eq
 8006f74:	f8c8 2000 	streq.w	r2, [r8]
 8006f78:	605a      	strne	r2, [r3, #4]
 8006f7a:	e7eb      	b.n	8006f54 <_malloc_r+0xa8>
 8006f7c:	4623      	mov	r3, r4
 8006f7e:	6864      	ldr	r4, [r4, #4]
 8006f80:	e7ae      	b.n	8006ee0 <_malloc_r+0x34>
 8006f82:	463c      	mov	r4, r7
 8006f84:	687f      	ldr	r7, [r7, #4]
 8006f86:	e7b6      	b.n	8006ef6 <_malloc_r+0x4a>
 8006f88:	461a      	mov	r2, r3
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	42a3      	cmp	r3, r4
 8006f8e:	d1fb      	bne.n	8006f88 <_malloc_r+0xdc>
 8006f90:	2300      	movs	r3, #0
 8006f92:	6053      	str	r3, [r2, #4]
 8006f94:	e7de      	b.n	8006f54 <_malloc_r+0xa8>
 8006f96:	230c      	movs	r3, #12
 8006f98:	6033      	str	r3, [r6, #0]
 8006f9a:	4630      	mov	r0, r6
 8006f9c:	f000 f80c 	bl	8006fb8 <__malloc_unlock>
 8006fa0:	e794      	b.n	8006ecc <_malloc_r+0x20>
 8006fa2:	6005      	str	r5, [r0, #0]
 8006fa4:	e7d6      	b.n	8006f54 <_malloc_r+0xa8>
 8006fa6:	bf00      	nop
 8006fa8:	2000f8a8 	.word	0x2000f8a8

08006fac <__malloc_lock>:
 8006fac:	4801      	ldr	r0, [pc, #4]	@ (8006fb4 <__malloc_lock+0x8>)
 8006fae:	f7ff bf01 	b.w	8006db4 <__retarget_lock_acquire_recursive>
 8006fb2:	bf00      	nop
 8006fb4:	2000f8a0 	.word	0x2000f8a0

08006fb8 <__malloc_unlock>:
 8006fb8:	4801      	ldr	r0, [pc, #4]	@ (8006fc0 <__malloc_unlock+0x8>)
 8006fba:	f7ff befc 	b.w	8006db6 <__retarget_lock_release_recursive>
 8006fbe:	bf00      	nop
 8006fc0:	2000f8a0 	.word	0x2000f8a0

08006fc4 <__ssputs_r>:
 8006fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fc8:	688e      	ldr	r6, [r1, #8]
 8006fca:	461f      	mov	r7, r3
 8006fcc:	42be      	cmp	r6, r7
 8006fce:	680b      	ldr	r3, [r1, #0]
 8006fd0:	4682      	mov	sl, r0
 8006fd2:	460c      	mov	r4, r1
 8006fd4:	4690      	mov	r8, r2
 8006fd6:	d82d      	bhi.n	8007034 <__ssputs_r+0x70>
 8006fd8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006fdc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006fe0:	d026      	beq.n	8007030 <__ssputs_r+0x6c>
 8006fe2:	6965      	ldr	r5, [r4, #20]
 8006fe4:	6909      	ldr	r1, [r1, #16]
 8006fe6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006fea:	eba3 0901 	sub.w	r9, r3, r1
 8006fee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006ff2:	1c7b      	adds	r3, r7, #1
 8006ff4:	444b      	add	r3, r9
 8006ff6:	106d      	asrs	r5, r5, #1
 8006ff8:	429d      	cmp	r5, r3
 8006ffa:	bf38      	it	cc
 8006ffc:	461d      	movcc	r5, r3
 8006ffe:	0553      	lsls	r3, r2, #21
 8007000:	d527      	bpl.n	8007052 <__ssputs_r+0x8e>
 8007002:	4629      	mov	r1, r5
 8007004:	f7ff ff52 	bl	8006eac <_malloc_r>
 8007008:	4606      	mov	r6, r0
 800700a:	b360      	cbz	r0, 8007066 <__ssputs_r+0xa2>
 800700c:	6921      	ldr	r1, [r4, #16]
 800700e:	464a      	mov	r2, r9
 8007010:	f7ff fed2 	bl	8006db8 <memcpy>
 8007014:	89a3      	ldrh	r3, [r4, #12]
 8007016:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800701a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800701e:	81a3      	strh	r3, [r4, #12]
 8007020:	6126      	str	r6, [r4, #16]
 8007022:	6165      	str	r5, [r4, #20]
 8007024:	444e      	add	r6, r9
 8007026:	eba5 0509 	sub.w	r5, r5, r9
 800702a:	6026      	str	r6, [r4, #0]
 800702c:	60a5      	str	r5, [r4, #8]
 800702e:	463e      	mov	r6, r7
 8007030:	42be      	cmp	r6, r7
 8007032:	d900      	bls.n	8007036 <__ssputs_r+0x72>
 8007034:	463e      	mov	r6, r7
 8007036:	6820      	ldr	r0, [r4, #0]
 8007038:	4632      	mov	r2, r6
 800703a:	4641      	mov	r1, r8
 800703c:	f000 faa8 	bl	8007590 <memmove>
 8007040:	68a3      	ldr	r3, [r4, #8]
 8007042:	1b9b      	subs	r3, r3, r6
 8007044:	60a3      	str	r3, [r4, #8]
 8007046:	6823      	ldr	r3, [r4, #0]
 8007048:	4433      	add	r3, r6
 800704a:	6023      	str	r3, [r4, #0]
 800704c:	2000      	movs	r0, #0
 800704e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007052:	462a      	mov	r2, r5
 8007054:	f000 fac6 	bl	80075e4 <_realloc_r>
 8007058:	4606      	mov	r6, r0
 800705a:	2800      	cmp	r0, #0
 800705c:	d1e0      	bne.n	8007020 <__ssputs_r+0x5c>
 800705e:	6921      	ldr	r1, [r4, #16]
 8007060:	4650      	mov	r0, sl
 8007062:	f7ff feb7 	bl	8006dd4 <_free_r>
 8007066:	230c      	movs	r3, #12
 8007068:	f8ca 3000 	str.w	r3, [sl]
 800706c:	89a3      	ldrh	r3, [r4, #12]
 800706e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007072:	81a3      	strh	r3, [r4, #12]
 8007074:	f04f 30ff 	mov.w	r0, #4294967295
 8007078:	e7e9      	b.n	800704e <__ssputs_r+0x8a>
	...

0800707c <_svfiprintf_r>:
 800707c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007080:	4698      	mov	r8, r3
 8007082:	898b      	ldrh	r3, [r1, #12]
 8007084:	061b      	lsls	r3, r3, #24
 8007086:	b09d      	sub	sp, #116	@ 0x74
 8007088:	4607      	mov	r7, r0
 800708a:	460d      	mov	r5, r1
 800708c:	4614      	mov	r4, r2
 800708e:	d510      	bpl.n	80070b2 <_svfiprintf_r+0x36>
 8007090:	690b      	ldr	r3, [r1, #16]
 8007092:	b973      	cbnz	r3, 80070b2 <_svfiprintf_r+0x36>
 8007094:	2140      	movs	r1, #64	@ 0x40
 8007096:	f7ff ff09 	bl	8006eac <_malloc_r>
 800709a:	6028      	str	r0, [r5, #0]
 800709c:	6128      	str	r0, [r5, #16]
 800709e:	b930      	cbnz	r0, 80070ae <_svfiprintf_r+0x32>
 80070a0:	230c      	movs	r3, #12
 80070a2:	603b      	str	r3, [r7, #0]
 80070a4:	f04f 30ff 	mov.w	r0, #4294967295
 80070a8:	b01d      	add	sp, #116	@ 0x74
 80070aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ae:	2340      	movs	r3, #64	@ 0x40
 80070b0:	616b      	str	r3, [r5, #20]
 80070b2:	2300      	movs	r3, #0
 80070b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80070b6:	2320      	movs	r3, #32
 80070b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80070bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80070c0:	2330      	movs	r3, #48	@ 0x30
 80070c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007260 <_svfiprintf_r+0x1e4>
 80070c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80070ca:	f04f 0901 	mov.w	r9, #1
 80070ce:	4623      	mov	r3, r4
 80070d0:	469a      	mov	sl, r3
 80070d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070d6:	b10a      	cbz	r2, 80070dc <_svfiprintf_r+0x60>
 80070d8:	2a25      	cmp	r2, #37	@ 0x25
 80070da:	d1f9      	bne.n	80070d0 <_svfiprintf_r+0x54>
 80070dc:	ebba 0b04 	subs.w	fp, sl, r4
 80070e0:	d00b      	beq.n	80070fa <_svfiprintf_r+0x7e>
 80070e2:	465b      	mov	r3, fp
 80070e4:	4622      	mov	r2, r4
 80070e6:	4629      	mov	r1, r5
 80070e8:	4638      	mov	r0, r7
 80070ea:	f7ff ff6b 	bl	8006fc4 <__ssputs_r>
 80070ee:	3001      	adds	r0, #1
 80070f0:	f000 80a7 	beq.w	8007242 <_svfiprintf_r+0x1c6>
 80070f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80070f6:	445a      	add	r2, fp
 80070f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80070fa:	f89a 3000 	ldrb.w	r3, [sl]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	f000 809f 	beq.w	8007242 <_svfiprintf_r+0x1c6>
 8007104:	2300      	movs	r3, #0
 8007106:	f04f 32ff 	mov.w	r2, #4294967295
 800710a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800710e:	f10a 0a01 	add.w	sl, sl, #1
 8007112:	9304      	str	r3, [sp, #16]
 8007114:	9307      	str	r3, [sp, #28]
 8007116:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800711a:	931a      	str	r3, [sp, #104]	@ 0x68
 800711c:	4654      	mov	r4, sl
 800711e:	2205      	movs	r2, #5
 8007120:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007124:	484e      	ldr	r0, [pc, #312]	@ (8007260 <_svfiprintf_r+0x1e4>)
 8007126:	f7f9 f85b 	bl	80001e0 <memchr>
 800712a:	9a04      	ldr	r2, [sp, #16]
 800712c:	b9d8      	cbnz	r0, 8007166 <_svfiprintf_r+0xea>
 800712e:	06d0      	lsls	r0, r2, #27
 8007130:	bf44      	itt	mi
 8007132:	2320      	movmi	r3, #32
 8007134:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007138:	0711      	lsls	r1, r2, #28
 800713a:	bf44      	itt	mi
 800713c:	232b      	movmi	r3, #43	@ 0x2b
 800713e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007142:	f89a 3000 	ldrb.w	r3, [sl]
 8007146:	2b2a      	cmp	r3, #42	@ 0x2a
 8007148:	d015      	beq.n	8007176 <_svfiprintf_r+0xfa>
 800714a:	9a07      	ldr	r2, [sp, #28]
 800714c:	4654      	mov	r4, sl
 800714e:	2000      	movs	r0, #0
 8007150:	f04f 0c0a 	mov.w	ip, #10
 8007154:	4621      	mov	r1, r4
 8007156:	f811 3b01 	ldrb.w	r3, [r1], #1
 800715a:	3b30      	subs	r3, #48	@ 0x30
 800715c:	2b09      	cmp	r3, #9
 800715e:	d94b      	bls.n	80071f8 <_svfiprintf_r+0x17c>
 8007160:	b1b0      	cbz	r0, 8007190 <_svfiprintf_r+0x114>
 8007162:	9207      	str	r2, [sp, #28]
 8007164:	e014      	b.n	8007190 <_svfiprintf_r+0x114>
 8007166:	eba0 0308 	sub.w	r3, r0, r8
 800716a:	fa09 f303 	lsl.w	r3, r9, r3
 800716e:	4313      	orrs	r3, r2
 8007170:	9304      	str	r3, [sp, #16]
 8007172:	46a2      	mov	sl, r4
 8007174:	e7d2      	b.n	800711c <_svfiprintf_r+0xa0>
 8007176:	9b03      	ldr	r3, [sp, #12]
 8007178:	1d19      	adds	r1, r3, #4
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	9103      	str	r1, [sp, #12]
 800717e:	2b00      	cmp	r3, #0
 8007180:	bfbb      	ittet	lt
 8007182:	425b      	neglt	r3, r3
 8007184:	f042 0202 	orrlt.w	r2, r2, #2
 8007188:	9307      	strge	r3, [sp, #28]
 800718a:	9307      	strlt	r3, [sp, #28]
 800718c:	bfb8      	it	lt
 800718e:	9204      	strlt	r2, [sp, #16]
 8007190:	7823      	ldrb	r3, [r4, #0]
 8007192:	2b2e      	cmp	r3, #46	@ 0x2e
 8007194:	d10a      	bne.n	80071ac <_svfiprintf_r+0x130>
 8007196:	7863      	ldrb	r3, [r4, #1]
 8007198:	2b2a      	cmp	r3, #42	@ 0x2a
 800719a:	d132      	bne.n	8007202 <_svfiprintf_r+0x186>
 800719c:	9b03      	ldr	r3, [sp, #12]
 800719e:	1d1a      	adds	r2, r3, #4
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	9203      	str	r2, [sp, #12]
 80071a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80071a8:	3402      	adds	r4, #2
 80071aa:	9305      	str	r3, [sp, #20]
 80071ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007270 <_svfiprintf_r+0x1f4>
 80071b0:	7821      	ldrb	r1, [r4, #0]
 80071b2:	2203      	movs	r2, #3
 80071b4:	4650      	mov	r0, sl
 80071b6:	f7f9 f813 	bl	80001e0 <memchr>
 80071ba:	b138      	cbz	r0, 80071cc <_svfiprintf_r+0x150>
 80071bc:	9b04      	ldr	r3, [sp, #16]
 80071be:	eba0 000a 	sub.w	r0, r0, sl
 80071c2:	2240      	movs	r2, #64	@ 0x40
 80071c4:	4082      	lsls	r2, r0
 80071c6:	4313      	orrs	r3, r2
 80071c8:	3401      	adds	r4, #1
 80071ca:	9304      	str	r3, [sp, #16]
 80071cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071d0:	4824      	ldr	r0, [pc, #144]	@ (8007264 <_svfiprintf_r+0x1e8>)
 80071d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80071d6:	2206      	movs	r2, #6
 80071d8:	f7f9 f802 	bl	80001e0 <memchr>
 80071dc:	2800      	cmp	r0, #0
 80071de:	d036      	beq.n	800724e <_svfiprintf_r+0x1d2>
 80071e0:	4b21      	ldr	r3, [pc, #132]	@ (8007268 <_svfiprintf_r+0x1ec>)
 80071e2:	bb1b      	cbnz	r3, 800722c <_svfiprintf_r+0x1b0>
 80071e4:	9b03      	ldr	r3, [sp, #12]
 80071e6:	3307      	adds	r3, #7
 80071e8:	f023 0307 	bic.w	r3, r3, #7
 80071ec:	3308      	adds	r3, #8
 80071ee:	9303      	str	r3, [sp, #12]
 80071f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071f2:	4433      	add	r3, r6
 80071f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80071f6:	e76a      	b.n	80070ce <_svfiprintf_r+0x52>
 80071f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80071fc:	460c      	mov	r4, r1
 80071fe:	2001      	movs	r0, #1
 8007200:	e7a8      	b.n	8007154 <_svfiprintf_r+0xd8>
 8007202:	2300      	movs	r3, #0
 8007204:	3401      	adds	r4, #1
 8007206:	9305      	str	r3, [sp, #20]
 8007208:	4619      	mov	r1, r3
 800720a:	f04f 0c0a 	mov.w	ip, #10
 800720e:	4620      	mov	r0, r4
 8007210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007214:	3a30      	subs	r2, #48	@ 0x30
 8007216:	2a09      	cmp	r2, #9
 8007218:	d903      	bls.n	8007222 <_svfiprintf_r+0x1a6>
 800721a:	2b00      	cmp	r3, #0
 800721c:	d0c6      	beq.n	80071ac <_svfiprintf_r+0x130>
 800721e:	9105      	str	r1, [sp, #20]
 8007220:	e7c4      	b.n	80071ac <_svfiprintf_r+0x130>
 8007222:	fb0c 2101 	mla	r1, ip, r1, r2
 8007226:	4604      	mov	r4, r0
 8007228:	2301      	movs	r3, #1
 800722a:	e7f0      	b.n	800720e <_svfiprintf_r+0x192>
 800722c:	ab03      	add	r3, sp, #12
 800722e:	9300      	str	r3, [sp, #0]
 8007230:	462a      	mov	r2, r5
 8007232:	4b0e      	ldr	r3, [pc, #56]	@ (800726c <_svfiprintf_r+0x1f0>)
 8007234:	a904      	add	r1, sp, #16
 8007236:	4638      	mov	r0, r7
 8007238:	f3af 8000 	nop.w
 800723c:	1c42      	adds	r2, r0, #1
 800723e:	4606      	mov	r6, r0
 8007240:	d1d6      	bne.n	80071f0 <_svfiprintf_r+0x174>
 8007242:	89ab      	ldrh	r3, [r5, #12]
 8007244:	065b      	lsls	r3, r3, #25
 8007246:	f53f af2d 	bmi.w	80070a4 <_svfiprintf_r+0x28>
 800724a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800724c:	e72c      	b.n	80070a8 <_svfiprintf_r+0x2c>
 800724e:	ab03      	add	r3, sp, #12
 8007250:	9300      	str	r3, [sp, #0]
 8007252:	462a      	mov	r2, r5
 8007254:	4b05      	ldr	r3, [pc, #20]	@ (800726c <_svfiprintf_r+0x1f0>)
 8007256:	a904      	add	r1, sp, #16
 8007258:	4638      	mov	r0, r7
 800725a:	f000 f879 	bl	8007350 <_printf_i>
 800725e:	e7ed      	b.n	800723c <_svfiprintf_r+0x1c0>
 8007260:	08009780 	.word	0x08009780
 8007264:	0800978a 	.word	0x0800978a
 8007268:	00000000 	.word	0x00000000
 800726c:	08006fc5 	.word	0x08006fc5
 8007270:	08009786 	.word	0x08009786

08007274 <_printf_common>:
 8007274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007278:	4616      	mov	r6, r2
 800727a:	4698      	mov	r8, r3
 800727c:	688a      	ldr	r2, [r1, #8]
 800727e:	690b      	ldr	r3, [r1, #16]
 8007280:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007284:	4293      	cmp	r3, r2
 8007286:	bfb8      	it	lt
 8007288:	4613      	movlt	r3, r2
 800728a:	6033      	str	r3, [r6, #0]
 800728c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007290:	4607      	mov	r7, r0
 8007292:	460c      	mov	r4, r1
 8007294:	b10a      	cbz	r2, 800729a <_printf_common+0x26>
 8007296:	3301      	adds	r3, #1
 8007298:	6033      	str	r3, [r6, #0]
 800729a:	6823      	ldr	r3, [r4, #0]
 800729c:	0699      	lsls	r1, r3, #26
 800729e:	bf42      	ittt	mi
 80072a0:	6833      	ldrmi	r3, [r6, #0]
 80072a2:	3302      	addmi	r3, #2
 80072a4:	6033      	strmi	r3, [r6, #0]
 80072a6:	6825      	ldr	r5, [r4, #0]
 80072a8:	f015 0506 	ands.w	r5, r5, #6
 80072ac:	d106      	bne.n	80072bc <_printf_common+0x48>
 80072ae:	f104 0a19 	add.w	sl, r4, #25
 80072b2:	68e3      	ldr	r3, [r4, #12]
 80072b4:	6832      	ldr	r2, [r6, #0]
 80072b6:	1a9b      	subs	r3, r3, r2
 80072b8:	42ab      	cmp	r3, r5
 80072ba:	dc26      	bgt.n	800730a <_printf_common+0x96>
 80072bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80072c0:	6822      	ldr	r2, [r4, #0]
 80072c2:	3b00      	subs	r3, #0
 80072c4:	bf18      	it	ne
 80072c6:	2301      	movne	r3, #1
 80072c8:	0692      	lsls	r2, r2, #26
 80072ca:	d42b      	bmi.n	8007324 <_printf_common+0xb0>
 80072cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80072d0:	4641      	mov	r1, r8
 80072d2:	4638      	mov	r0, r7
 80072d4:	47c8      	blx	r9
 80072d6:	3001      	adds	r0, #1
 80072d8:	d01e      	beq.n	8007318 <_printf_common+0xa4>
 80072da:	6823      	ldr	r3, [r4, #0]
 80072dc:	6922      	ldr	r2, [r4, #16]
 80072de:	f003 0306 	and.w	r3, r3, #6
 80072e2:	2b04      	cmp	r3, #4
 80072e4:	bf02      	ittt	eq
 80072e6:	68e5      	ldreq	r5, [r4, #12]
 80072e8:	6833      	ldreq	r3, [r6, #0]
 80072ea:	1aed      	subeq	r5, r5, r3
 80072ec:	68a3      	ldr	r3, [r4, #8]
 80072ee:	bf0c      	ite	eq
 80072f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072f4:	2500      	movne	r5, #0
 80072f6:	4293      	cmp	r3, r2
 80072f8:	bfc4      	itt	gt
 80072fa:	1a9b      	subgt	r3, r3, r2
 80072fc:	18ed      	addgt	r5, r5, r3
 80072fe:	2600      	movs	r6, #0
 8007300:	341a      	adds	r4, #26
 8007302:	42b5      	cmp	r5, r6
 8007304:	d11a      	bne.n	800733c <_printf_common+0xc8>
 8007306:	2000      	movs	r0, #0
 8007308:	e008      	b.n	800731c <_printf_common+0xa8>
 800730a:	2301      	movs	r3, #1
 800730c:	4652      	mov	r2, sl
 800730e:	4641      	mov	r1, r8
 8007310:	4638      	mov	r0, r7
 8007312:	47c8      	blx	r9
 8007314:	3001      	adds	r0, #1
 8007316:	d103      	bne.n	8007320 <_printf_common+0xac>
 8007318:	f04f 30ff 	mov.w	r0, #4294967295
 800731c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007320:	3501      	adds	r5, #1
 8007322:	e7c6      	b.n	80072b2 <_printf_common+0x3e>
 8007324:	18e1      	adds	r1, r4, r3
 8007326:	1c5a      	adds	r2, r3, #1
 8007328:	2030      	movs	r0, #48	@ 0x30
 800732a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800732e:	4422      	add	r2, r4
 8007330:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007334:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007338:	3302      	adds	r3, #2
 800733a:	e7c7      	b.n	80072cc <_printf_common+0x58>
 800733c:	2301      	movs	r3, #1
 800733e:	4622      	mov	r2, r4
 8007340:	4641      	mov	r1, r8
 8007342:	4638      	mov	r0, r7
 8007344:	47c8      	blx	r9
 8007346:	3001      	adds	r0, #1
 8007348:	d0e6      	beq.n	8007318 <_printf_common+0xa4>
 800734a:	3601      	adds	r6, #1
 800734c:	e7d9      	b.n	8007302 <_printf_common+0x8e>
	...

08007350 <_printf_i>:
 8007350:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007354:	7e0f      	ldrb	r7, [r1, #24]
 8007356:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007358:	2f78      	cmp	r7, #120	@ 0x78
 800735a:	4691      	mov	r9, r2
 800735c:	4680      	mov	r8, r0
 800735e:	460c      	mov	r4, r1
 8007360:	469a      	mov	sl, r3
 8007362:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007366:	d807      	bhi.n	8007378 <_printf_i+0x28>
 8007368:	2f62      	cmp	r7, #98	@ 0x62
 800736a:	d80a      	bhi.n	8007382 <_printf_i+0x32>
 800736c:	2f00      	cmp	r7, #0
 800736e:	f000 80d2 	beq.w	8007516 <_printf_i+0x1c6>
 8007372:	2f58      	cmp	r7, #88	@ 0x58
 8007374:	f000 80b9 	beq.w	80074ea <_printf_i+0x19a>
 8007378:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800737c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007380:	e03a      	b.n	80073f8 <_printf_i+0xa8>
 8007382:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007386:	2b15      	cmp	r3, #21
 8007388:	d8f6      	bhi.n	8007378 <_printf_i+0x28>
 800738a:	a101      	add	r1, pc, #4	@ (adr r1, 8007390 <_printf_i+0x40>)
 800738c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007390:	080073e9 	.word	0x080073e9
 8007394:	080073fd 	.word	0x080073fd
 8007398:	08007379 	.word	0x08007379
 800739c:	08007379 	.word	0x08007379
 80073a0:	08007379 	.word	0x08007379
 80073a4:	08007379 	.word	0x08007379
 80073a8:	080073fd 	.word	0x080073fd
 80073ac:	08007379 	.word	0x08007379
 80073b0:	08007379 	.word	0x08007379
 80073b4:	08007379 	.word	0x08007379
 80073b8:	08007379 	.word	0x08007379
 80073bc:	080074fd 	.word	0x080074fd
 80073c0:	08007427 	.word	0x08007427
 80073c4:	080074b7 	.word	0x080074b7
 80073c8:	08007379 	.word	0x08007379
 80073cc:	08007379 	.word	0x08007379
 80073d0:	0800751f 	.word	0x0800751f
 80073d4:	08007379 	.word	0x08007379
 80073d8:	08007427 	.word	0x08007427
 80073dc:	08007379 	.word	0x08007379
 80073e0:	08007379 	.word	0x08007379
 80073e4:	080074bf 	.word	0x080074bf
 80073e8:	6833      	ldr	r3, [r6, #0]
 80073ea:	1d1a      	adds	r2, r3, #4
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	6032      	str	r2, [r6, #0]
 80073f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80073f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80073f8:	2301      	movs	r3, #1
 80073fa:	e09d      	b.n	8007538 <_printf_i+0x1e8>
 80073fc:	6833      	ldr	r3, [r6, #0]
 80073fe:	6820      	ldr	r0, [r4, #0]
 8007400:	1d19      	adds	r1, r3, #4
 8007402:	6031      	str	r1, [r6, #0]
 8007404:	0606      	lsls	r6, r0, #24
 8007406:	d501      	bpl.n	800740c <_printf_i+0xbc>
 8007408:	681d      	ldr	r5, [r3, #0]
 800740a:	e003      	b.n	8007414 <_printf_i+0xc4>
 800740c:	0645      	lsls	r5, r0, #25
 800740e:	d5fb      	bpl.n	8007408 <_printf_i+0xb8>
 8007410:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007414:	2d00      	cmp	r5, #0
 8007416:	da03      	bge.n	8007420 <_printf_i+0xd0>
 8007418:	232d      	movs	r3, #45	@ 0x2d
 800741a:	426d      	negs	r5, r5
 800741c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007420:	4859      	ldr	r0, [pc, #356]	@ (8007588 <_printf_i+0x238>)
 8007422:	230a      	movs	r3, #10
 8007424:	e011      	b.n	800744a <_printf_i+0xfa>
 8007426:	6821      	ldr	r1, [r4, #0]
 8007428:	6833      	ldr	r3, [r6, #0]
 800742a:	0608      	lsls	r0, r1, #24
 800742c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007430:	d402      	bmi.n	8007438 <_printf_i+0xe8>
 8007432:	0649      	lsls	r1, r1, #25
 8007434:	bf48      	it	mi
 8007436:	b2ad      	uxthmi	r5, r5
 8007438:	2f6f      	cmp	r7, #111	@ 0x6f
 800743a:	4853      	ldr	r0, [pc, #332]	@ (8007588 <_printf_i+0x238>)
 800743c:	6033      	str	r3, [r6, #0]
 800743e:	bf14      	ite	ne
 8007440:	230a      	movne	r3, #10
 8007442:	2308      	moveq	r3, #8
 8007444:	2100      	movs	r1, #0
 8007446:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800744a:	6866      	ldr	r6, [r4, #4]
 800744c:	60a6      	str	r6, [r4, #8]
 800744e:	2e00      	cmp	r6, #0
 8007450:	bfa2      	ittt	ge
 8007452:	6821      	ldrge	r1, [r4, #0]
 8007454:	f021 0104 	bicge.w	r1, r1, #4
 8007458:	6021      	strge	r1, [r4, #0]
 800745a:	b90d      	cbnz	r5, 8007460 <_printf_i+0x110>
 800745c:	2e00      	cmp	r6, #0
 800745e:	d04b      	beq.n	80074f8 <_printf_i+0x1a8>
 8007460:	4616      	mov	r6, r2
 8007462:	fbb5 f1f3 	udiv	r1, r5, r3
 8007466:	fb03 5711 	mls	r7, r3, r1, r5
 800746a:	5dc7      	ldrb	r7, [r0, r7]
 800746c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007470:	462f      	mov	r7, r5
 8007472:	42bb      	cmp	r3, r7
 8007474:	460d      	mov	r5, r1
 8007476:	d9f4      	bls.n	8007462 <_printf_i+0x112>
 8007478:	2b08      	cmp	r3, #8
 800747a:	d10b      	bne.n	8007494 <_printf_i+0x144>
 800747c:	6823      	ldr	r3, [r4, #0]
 800747e:	07df      	lsls	r7, r3, #31
 8007480:	d508      	bpl.n	8007494 <_printf_i+0x144>
 8007482:	6923      	ldr	r3, [r4, #16]
 8007484:	6861      	ldr	r1, [r4, #4]
 8007486:	4299      	cmp	r1, r3
 8007488:	bfde      	ittt	le
 800748a:	2330      	movle	r3, #48	@ 0x30
 800748c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007490:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007494:	1b92      	subs	r2, r2, r6
 8007496:	6122      	str	r2, [r4, #16]
 8007498:	f8cd a000 	str.w	sl, [sp]
 800749c:	464b      	mov	r3, r9
 800749e:	aa03      	add	r2, sp, #12
 80074a0:	4621      	mov	r1, r4
 80074a2:	4640      	mov	r0, r8
 80074a4:	f7ff fee6 	bl	8007274 <_printf_common>
 80074a8:	3001      	adds	r0, #1
 80074aa:	d14a      	bne.n	8007542 <_printf_i+0x1f2>
 80074ac:	f04f 30ff 	mov.w	r0, #4294967295
 80074b0:	b004      	add	sp, #16
 80074b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074b6:	6823      	ldr	r3, [r4, #0]
 80074b8:	f043 0320 	orr.w	r3, r3, #32
 80074bc:	6023      	str	r3, [r4, #0]
 80074be:	4833      	ldr	r0, [pc, #204]	@ (800758c <_printf_i+0x23c>)
 80074c0:	2778      	movs	r7, #120	@ 0x78
 80074c2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80074c6:	6823      	ldr	r3, [r4, #0]
 80074c8:	6831      	ldr	r1, [r6, #0]
 80074ca:	061f      	lsls	r7, r3, #24
 80074cc:	f851 5b04 	ldr.w	r5, [r1], #4
 80074d0:	d402      	bmi.n	80074d8 <_printf_i+0x188>
 80074d2:	065f      	lsls	r7, r3, #25
 80074d4:	bf48      	it	mi
 80074d6:	b2ad      	uxthmi	r5, r5
 80074d8:	6031      	str	r1, [r6, #0]
 80074da:	07d9      	lsls	r1, r3, #31
 80074dc:	bf44      	itt	mi
 80074de:	f043 0320 	orrmi.w	r3, r3, #32
 80074e2:	6023      	strmi	r3, [r4, #0]
 80074e4:	b11d      	cbz	r5, 80074ee <_printf_i+0x19e>
 80074e6:	2310      	movs	r3, #16
 80074e8:	e7ac      	b.n	8007444 <_printf_i+0xf4>
 80074ea:	4827      	ldr	r0, [pc, #156]	@ (8007588 <_printf_i+0x238>)
 80074ec:	e7e9      	b.n	80074c2 <_printf_i+0x172>
 80074ee:	6823      	ldr	r3, [r4, #0]
 80074f0:	f023 0320 	bic.w	r3, r3, #32
 80074f4:	6023      	str	r3, [r4, #0]
 80074f6:	e7f6      	b.n	80074e6 <_printf_i+0x196>
 80074f8:	4616      	mov	r6, r2
 80074fa:	e7bd      	b.n	8007478 <_printf_i+0x128>
 80074fc:	6833      	ldr	r3, [r6, #0]
 80074fe:	6825      	ldr	r5, [r4, #0]
 8007500:	6961      	ldr	r1, [r4, #20]
 8007502:	1d18      	adds	r0, r3, #4
 8007504:	6030      	str	r0, [r6, #0]
 8007506:	062e      	lsls	r6, r5, #24
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	d501      	bpl.n	8007510 <_printf_i+0x1c0>
 800750c:	6019      	str	r1, [r3, #0]
 800750e:	e002      	b.n	8007516 <_printf_i+0x1c6>
 8007510:	0668      	lsls	r0, r5, #25
 8007512:	d5fb      	bpl.n	800750c <_printf_i+0x1bc>
 8007514:	8019      	strh	r1, [r3, #0]
 8007516:	2300      	movs	r3, #0
 8007518:	6123      	str	r3, [r4, #16]
 800751a:	4616      	mov	r6, r2
 800751c:	e7bc      	b.n	8007498 <_printf_i+0x148>
 800751e:	6833      	ldr	r3, [r6, #0]
 8007520:	1d1a      	adds	r2, r3, #4
 8007522:	6032      	str	r2, [r6, #0]
 8007524:	681e      	ldr	r6, [r3, #0]
 8007526:	6862      	ldr	r2, [r4, #4]
 8007528:	2100      	movs	r1, #0
 800752a:	4630      	mov	r0, r6
 800752c:	f7f8 fe58 	bl	80001e0 <memchr>
 8007530:	b108      	cbz	r0, 8007536 <_printf_i+0x1e6>
 8007532:	1b80      	subs	r0, r0, r6
 8007534:	6060      	str	r0, [r4, #4]
 8007536:	6863      	ldr	r3, [r4, #4]
 8007538:	6123      	str	r3, [r4, #16]
 800753a:	2300      	movs	r3, #0
 800753c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007540:	e7aa      	b.n	8007498 <_printf_i+0x148>
 8007542:	6923      	ldr	r3, [r4, #16]
 8007544:	4632      	mov	r2, r6
 8007546:	4649      	mov	r1, r9
 8007548:	4640      	mov	r0, r8
 800754a:	47d0      	blx	sl
 800754c:	3001      	adds	r0, #1
 800754e:	d0ad      	beq.n	80074ac <_printf_i+0x15c>
 8007550:	6823      	ldr	r3, [r4, #0]
 8007552:	079b      	lsls	r3, r3, #30
 8007554:	d413      	bmi.n	800757e <_printf_i+0x22e>
 8007556:	68e0      	ldr	r0, [r4, #12]
 8007558:	9b03      	ldr	r3, [sp, #12]
 800755a:	4298      	cmp	r0, r3
 800755c:	bfb8      	it	lt
 800755e:	4618      	movlt	r0, r3
 8007560:	e7a6      	b.n	80074b0 <_printf_i+0x160>
 8007562:	2301      	movs	r3, #1
 8007564:	4632      	mov	r2, r6
 8007566:	4649      	mov	r1, r9
 8007568:	4640      	mov	r0, r8
 800756a:	47d0      	blx	sl
 800756c:	3001      	adds	r0, #1
 800756e:	d09d      	beq.n	80074ac <_printf_i+0x15c>
 8007570:	3501      	adds	r5, #1
 8007572:	68e3      	ldr	r3, [r4, #12]
 8007574:	9903      	ldr	r1, [sp, #12]
 8007576:	1a5b      	subs	r3, r3, r1
 8007578:	42ab      	cmp	r3, r5
 800757a:	dcf2      	bgt.n	8007562 <_printf_i+0x212>
 800757c:	e7eb      	b.n	8007556 <_printf_i+0x206>
 800757e:	2500      	movs	r5, #0
 8007580:	f104 0619 	add.w	r6, r4, #25
 8007584:	e7f5      	b.n	8007572 <_printf_i+0x222>
 8007586:	bf00      	nop
 8007588:	08009791 	.word	0x08009791
 800758c:	080097a2 	.word	0x080097a2

08007590 <memmove>:
 8007590:	4288      	cmp	r0, r1
 8007592:	b510      	push	{r4, lr}
 8007594:	eb01 0402 	add.w	r4, r1, r2
 8007598:	d902      	bls.n	80075a0 <memmove+0x10>
 800759a:	4284      	cmp	r4, r0
 800759c:	4623      	mov	r3, r4
 800759e:	d807      	bhi.n	80075b0 <memmove+0x20>
 80075a0:	1e43      	subs	r3, r0, #1
 80075a2:	42a1      	cmp	r1, r4
 80075a4:	d008      	beq.n	80075b8 <memmove+0x28>
 80075a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80075aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80075ae:	e7f8      	b.n	80075a2 <memmove+0x12>
 80075b0:	4402      	add	r2, r0
 80075b2:	4601      	mov	r1, r0
 80075b4:	428a      	cmp	r2, r1
 80075b6:	d100      	bne.n	80075ba <memmove+0x2a>
 80075b8:	bd10      	pop	{r4, pc}
 80075ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80075be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80075c2:	e7f7      	b.n	80075b4 <memmove+0x24>

080075c4 <_sbrk_r>:
 80075c4:	b538      	push	{r3, r4, r5, lr}
 80075c6:	4d06      	ldr	r5, [pc, #24]	@ (80075e0 <_sbrk_r+0x1c>)
 80075c8:	2300      	movs	r3, #0
 80075ca:	4604      	mov	r4, r0
 80075cc:	4608      	mov	r0, r1
 80075ce:	602b      	str	r3, [r5, #0]
 80075d0:	f000 f83e 	bl	8007650 <_sbrk>
 80075d4:	1c43      	adds	r3, r0, #1
 80075d6:	d102      	bne.n	80075de <_sbrk_r+0x1a>
 80075d8:	682b      	ldr	r3, [r5, #0]
 80075da:	b103      	cbz	r3, 80075de <_sbrk_r+0x1a>
 80075dc:	6023      	str	r3, [r4, #0]
 80075de:	bd38      	pop	{r3, r4, r5, pc}
 80075e0:	2000f89c 	.word	0x2000f89c

080075e4 <_realloc_r>:
 80075e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075e8:	4680      	mov	r8, r0
 80075ea:	4615      	mov	r5, r2
 80075ec:	460c      	mov	r4, r1
 80075ee:	b921      	cbnz	r1, 80075fa <_realloc_r+0x16>
 80075f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075f4:	4611      	mov	r1, r2
 80075f6:	f7ff bc59 	b.w	8006eac <_malloc_r>
 80075fa:	b92a      	cbnz	r2, 8007608 <_realloc_r+0x24>
 80075fc:	f7ff fbea 	bl	8006dd4 <_free_r>
 8007600:	2400      	movs	r4, #0
 8007602:	4620      	mov	r0, r4
 8007604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007608:	f000 f81a 	bl	8007640 <_malloc_usable_size_r>
 800760c:	4285      	cmp	r5, r0
 800760e:	4606      	mov	r6, r0
 8007610:	d802      	bhi.n	8007618 <_realloc_r+0x34>
 8007612:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007616:	d8f4      	bhi.n	8007602 <_realloc_r+0x1e>
 8007618:	4629      	mov	r1, r5
 800761a:	4640      	mov	r0, r8
 800761c:	f7ff fc46 	bl	8006eac <_malloc_r>
 8007620:	4607      	mov	r7, r0
 8007622:	2800      	cmp	r0, #0
 8007624:	d0ec      	beq.n	8007600 <_realloc_r+0x1c>
 8007626:	42b5      	cmp	r5, r6
 8007628:	462a      	mov	r2, r5
 800762a:	4621      	mov	r1, r4
 800762c:	bf28      	it	cs
 800762e:	4632      	movcs	r2, r6
 8007630:	f7ff fbc2 	bl	8006db8 <memcpy>
 8007634:	4621      	mov	r1, r4
 8007636:	4640      	mov	r0, r8
 8007638:	f7ff fbcc 	bl	8006dd4 <_free_r>
 800763c:	463c      	mov	r4, r7
 800763e:	e7e0      	b.n	8007602 <_realloc_r+0x1e>

08007640 <_malloc_usable_size_r>:
 8007640:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007644:	1f18      	subs	r0, r3, #4
 8007646:	2b00      	cmp	r3, #0
 8007648:	bfbc      	itt	lt
 800764a:	580b      	ldrlt	r3, [r1, r0]
 800764c:	18c0      	addlt	r0, r0, r3
 800764e:	4770      	bx	lr

08007650 <_sbrk>:
 8007650:	4a04      	ldr	r2, [pc, #16]	@ (8007664 <_sbrk+0x14>)
 8007652:	6811      	ldr	r1, [r2, #0]
 8007654:	4603      	mov	r3, r0
 8007656:	b909      	cbnz	r1, 800765c <_sbrk+0xc>
 8007658:	4903      	ldr	r1, [pc, #12]	@ (8007668 <_sbrk+0x18>)
 800765a:	6011      	str	r1, [r2, #0]
 800765c:	6810      	ldr	r0, [r2, #0]
 800765e:	4403      	add	r3, r0
 8007660:	6013      	str	r3, [r2, #0]
 8007662:	4770      	bx	lr
 8007664:	2000f8ac 	.word	0x2000f8ac
 8007668:	2000f8b0 	.word	0x2000f8b0

0800766c <_init>:
 800766c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800766e:	bf00      	nop
 8007670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007672:	bc08      	pop	{r3}
 8007674:	469e      	mov	lr, r3
 8007676:	4770      	bx	lr

08007678 <_fini>:
 8007678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800767a:	bf00      	nop
 800767c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800767e:	bc08      	pop	{r3}
 8007680:	469e      	mov	lr, r3
 8007682:	4770      	bx	lr
